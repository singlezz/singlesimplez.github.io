<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>整理最近用的Mongo查询语句</title>
      <link href="/_post/common-mongoSQL-summary/"/>
      <url>/_post/common-mongoSQL-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近做了几个规则逻辑。用到mongo查询比较多，就是查询交易信息跑既定规则筛选出交易商户，使用聚合管道进行统计和取出简单处理后的数据，用SQL代替业务代码逻辑的判断。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>MongoDB聚合使用<code>aggregate</code>，聚合管道采取自动向下子执行方式，基本语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure><p>聚合框架中常用的操作:</p><ul><li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</li><li>$limit：用来限制MongoDB聚合管道返回的文档数。</li><li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li>$group：将集合中的文档分组，可用于统计结果。</li><li>$sort：将输入文档排序后输出。</li><li>$geoNear：输出接近某一地理位置的有序文档。</li></ul><table><thead><tr><th align="left">表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">$sum</td><td align="left">计算总和。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td></tr><tr><td align="left">$avg</td><td align="left">计算平均值</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td></tr><tr><td align="left">$min</td><td align="left">获取集合中所有文档对应值得最小值。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td></tr><tr><td align="left">$max</td><td align="left">获取集合中所有文档对应值得最大值。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td></tr><tr><td align="left">$push</td><td align="left">在结果文档中插入值到一个数组中。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td></tr><tr><td align="left">$addToSet</td><td align="left">在结果文档中插入值到一个数组中，但不创建副本。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td></tr><tr><td align="left">$first</td><td align="left">根据资源文档的排序获取第一个文档数据。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td></tr><tr><td align="left">$last</td><td align="left">根据资源文档的排序获取最后一个文档数据</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td></tr></tbody></table><h1 id="查询示例"><a href="#查询示例" class="headerlink" title="查询示例"></a>查询示例</h1><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><p>部分字段说明：transAmt:交易金额，transType:交易类型，transTime:交易时间，mercNum:商户编号</p><p>查询交易信息，交易商户昨天交易笔数大于三百，交易金额累加大于三百万，这里现根据<code>$match</code>将交易信息筛选出来，然后使用<code>$group</code>根据商户编号分组，统计交易笔数和累加交易金额，将分组结果判断匹配交易笔数大于三百，交易金额大于三百万。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;box_order&#x27;</span>).aggregate([</span><br><span class="line">  &#123;</span><br><span class="line">    $<span class="keyword">match</span>: &#123;</span><br><span class="line">                &quot;transTime&quot;:&#123;$gte:ISODate(&quot;2020-01-03T00:00:00.000Z&quot;),$lt:ISODate(&quot;2020-01-10T00:00:00.000Z&quot;)&#125;,</span><br><span class="line">                &quot;transType&quot;:&quot;consume&quot;,</span><br><span class="line">                &quot;transStatus&quot;:&#123;$<span class="keyword">in</span>:[&quot;tsProcessing&quot;,&quot;success&quot;]&#125;</span><br><span class="line">               &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    $<span class="keyword">group</span>: &#123;</span><br><span class="line">                  &quot;_id&quot;: &quot;$mercNum&quot;,</span><br><span class="line">                  &quot;count&quot;: &#123;&quot;$sum&quot;: <span class="number">1</span>&#125;,</span><br><span class="line">                  &quot;totalAmt&quot;: &#123;&quot;$sum&quot;: &quot;$transAmt&quot;&#125;</span><br><span class="line">             &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    $<span class="keyword">match</span>: &#123;</span><br><span class="line">                  &quot;count&quot;: &#123;&quot;$gte&quot;: <span class="number">300</span>&#125;,</span><br><span class="line">                  &quot;totalAmt&quot;: &#123;&quot;$gte&quot;: <span class="number">3000000</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p>部分字段说明：cardNo:交易卡号，transType:交易类型，transTime:交易时间，mercNum:商户编号</p><p>查询时间段内指定卡号下的交易商户信息。</p><p>根据卡号和交易时间将交易数据查出来，然后只显示商户号和卡号两列字段，根据商户号和卡号分组去重，再根据卡号分组，将商户号转化成一个字段变成数组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;order_202011&#x27;</span>).aggregate([</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$match&quot;: &#123;</span><br><span class="line">      &quot;detailInfo.cardNo&quot;: &#123;</span><br><span class="line">        &quot;$in&quot;: [</span><br><span class="line">          &quot;YtCZ7KhCVG5xerKUg8bzJhVAjW/hWAWj&quot;,</span><br><span class="line">          &quot;cQ7QQ0yCVW6LhHtJNVRq2A==&quot;,</span><br><span class="line">          &quot;6KDpHmQ9s+0SQAGAUyLJ4A==&quot;,</span><br><span class="line">          &quot;cQ7QQ0yCVW7iSegn8uqIfg==&quot;,</span><br><span class="line">          &quot;ZEOcXdI4rfvswAz7dQ80hw==&quot;,</span><br><span class="line">          &quot;6KDpHmQ9s+2Nz61PPuOamw==&quot;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;baseInfo.transTime&quot;: &#123;</span><br><span class="line">        &quot;$gte&quot;: <span class="keyword">new</span> <span class="type">Date</span>(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">01</span>),</span><br><span class="line">        &quot;$lt&quot;: <span class="keyword">new</span> <span class="type">Date</span>(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">24</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$project&quot;: &#123;</span><br><span class="line">      &quot;merchantInfo.mercNum&quot;: <span class="number">1</span>,</span><br><span class="line">      &quot;detailInfo.cardNo&quot;: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$group&quot;: &#123;</span><br><span class="line">      &quot;_id&quot;: &#123;</span><br><span class="line">        &quot;mercNum&quot;: &quot;$merchantInfo.mercNum&quot;,</span><br><span class="line">        &quot;cardNo&quot;: &quot;$detailInfo.cardNo&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$group&quot;: &#123;</span><br><span class="line">      &quot;_id&quot;: &quot;$_id.cardNo&quot;,</span><br><span class="line">      &quot;mercNums&quot;: &#123;</span><br><span class="line">        &quot;$push&quot;: &quot;$_id.mercNum&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h2><p>根据指定商户和其他条件查询交易信息，根据卡号分组并组装成一个字段的集合，最后筛选掉id只保留cardNos数组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;box_order_fxq_202104&#x27;</span>).aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;$match&quot;: &#123;</span><br><span class="line">            &quot;mercNum&quot;: &quot;M15201812030753174730&quot;,</span><br><span class="line">&quot;transTime&quot;: &#123;</span><br><span class="line">&quot;$gte&quot;: ISODate(&quot;2021-04-17T16:00:00.000Z&quot;),</span><br><span class="line">&quot;$lt&quot;: ISODate(&quot;2021-04-18T16:00:00.000Z&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">            &quot;mercLevel&quot;: &#123;</span><br><span class="line">                &quot;$in&quot;: [</span><br><span class="line">                    &quot;C&quot;,</span><br><span class="line">                    &quot;D&quot;,</span><br><span class="line">                    &quot;E&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;payType&quot;: &quot;POSPAY&quot;,</span><br><span class="line">            &quot;transType&quot;: &quot;consume&quot;,</span><br><span class="line">            &quot;cardType&quot;: &quot;2&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;$group&quot;: &#123;</span><br><span class="line">            &quot;_id&quot;: <span class="keyword">null</span>,</span><br><span class="line">            &quot;cardNos&quot;: &#123;</span><br><span class="line">                &quot;$push&quot;: &quot;$cardNo&quot;  <span class="operator">/</span><span class="operator">/</span>$addToSet</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;$project&quot;:&#123;</span><br><span class="line">            &quot;cardNos&quot;:<span class="number">1</span>,&quot;_id&quot;:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;cardNos&quot;</span> : [ </span><br><span class="line">        <span class="string">&quot;n2IwHHhfEAJcm6RFsoNPcBVAjW/hWAWj&quot;</span>, </span><br><span class="line">        <span class="string">&quot;n2IwHHhfEAJcm6RFsoNPcBVAjW/hWAWj&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h2><p>根据时间查询交易信息后，根据商户号分组，并将第一个交易信息存放入data字段中。（如果是需要全部的商户交易信息那么将<code>$first</code>修改为<code>$push</code>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;order&#x27;</span>).aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;$match&quot;: &#123;</span><br><span class="line">            &quot;startTrxTime&quot;: &#123;</span><br><span class="line">                &quot;$gte&quot;: ISODate(&quot;2021-07-20T16:00:00.000Z&quot;),</span><br><span class="line">                &quot;$lt&quot;: ISODate(&quot;2021-07-21T16:00:00.000Z&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;$group&quot;: &#123;</span><br><span class="line">            &quot;_id&quot;: &quot;$subMerchantNo&quot;,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>:&#123;<span class="string">&#x27;$first&#x27;</span>: <span class="string">&#x27;$$ROOT&#x27;</span>&#125;  <span class="operator">/</span><span class="operator">/</span>$push</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;$sort&quot;: &#123;</span><br><span class="line">            &quot;_id&quot;: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>最近那个到查询的大差不差，要注意的都是一些小改动，一般情况正常查就可以。后续有什么不一样的会继续补充。先到这里</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自写一个生成ID的工具类</title>
      <link href="/_post/idutil/"/>
      <url>/_post/idutil/</url>
      
        <content type="html"><![CDATA[<p>平时项目中只要涉及表，那么一定能接触到众多各式各样的ID编号，博主整理一些常用的ID格式，整合一个ID生成工具类，供大家参考，如果有什么不足指出，烦请留言批评指正，尽量改正，感激不尽。</p><p>目前包括ID生成规则：</p><ul><li>根据时间获取编号</li><li>根据时间+机器码+后面累加的位数组成的编号</li><li>根据时间+机器码+后面随机数组成的编号</li><li>根据前缀+累加位数</li><li>根据前缀+时间</li><li>根据后缀+累加位数</li><li>根据后缀+时间</li></ul><p>简单的使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    IDUtil idUtil = <span class="keyword">new</span> IDUtil(<span class="string">&quot;yyyyMMddHHmmssSSS&quot;</span>);<span class="comment">//yyyy-MM-dd HH:mm:ss：SSS</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        System.out.println(idUtil.generatedNoByFormatDateAndRandom(<span class="number">5</span>,<span class="string">&quot;5&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间格式在创建对象时传入。在集群中使用应传入机器码或唯一标识作为唯一ID的根据。</p><hr><p>更新<br>添加了多个可选的构造方法，来适应不同的生成规则。</p><hr><p>IDUtil:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat sfd = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmmssSSS&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; randomSet = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> String dateFlag;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sequence;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   初始化  默认</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:45</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IDUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sfd = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMddHHmmssSSS&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.dateFlag = <span class="keyword">this</span>.sfd.format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">this</span>.sequence = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format 时间格式   yyyyMMddHHmmssSSS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:45</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IDUtil</span><span class="params">(String format)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sfd = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        <span class="keyword">this</span>.dateFlag = <span class="keyword">this</span>.sfd.format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">this</span>.sequence = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sequence 开始累加数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:45</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IDUtil</span><span class="params">(<span class="keyword">int</span> sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sequence = sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByFormatDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.generatedNoByFormatDate(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByFormatDateAndNum</span><span class="params">(<span class="keyword">int</span> digits)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.generatedNoByFormatDateAndNum(digits, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByFormatDateAndRandom</span><span class="params">(<span class="keyword">int</span> randomDigits)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.generatedNoByFormatDateAndRandom(randomDigits, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByPrefix</span><span class="params">(String prefix, <span class="keyword">int</span> digits)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.generatedNoByPrefix(prefix, digits, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByDateAndPrefix</span><span class="params">(String prefix)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.generatedNoByDateAndPrefix(prefix, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoBySuffix</span><span class="params">(String suffix, <span class="keyword">int</span> digits)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.generatedNoBySuffix(suffix, digits, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByDateAndSuffix</span><span class="params">(String suffix)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.generatedNoByDateAndSuffix(suffix, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   根据时间获取编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machine 机器码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByFormatDate</span><span class="params">(String machine)</span></span>&#123;</span><br><span class="line">        String formatDate = <span class="keyword">this</span>.sfd.format(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(machine))&#123;</span><br><span class="line">            <span class="keyword">return</span> formatDate + machine;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> formatDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   根据时间+机器码+后面累加的位数组成的编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machine 机器码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> digits 累加值的位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByFormatDateAndNum</span><span class="params">(<span class="keyword">int</span> digits, String machine)</span></span>&#123;</span><br><span class="line">        String no = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String formatDate = <span class="keyword">this</span>.sfd.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dateFlag.equals(formatDate))&#123;</span><br><span class="line">            <span class="keyword">this</span>.sequence ++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.sequence = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(machine))&#123;</span><br><span class="line">            no = formatDate + machine + String.format(<span class="string">&quot;%0&quot;</span>+digits+<span class="string">&quot;d&quot;</span>, <span class="keyword">this</span>.sequence);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            no = formatDate + String.format(<span class="string">&quot;%0&quot;</span>+digits+<span class="string">&quot;d&quot;</span>, <span class="keyword">this</span>.sequence);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   根据时间+机器码+后面随机数组成的编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machine 机器码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> randomDigits 随机数的位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByFormatDateAndRandom</span><span class="params">(<span class="keyword">int</span> randomDigits, String machine)</span></span>&#123;</span><br><span class="line">        String no = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String formatDate = <span class="keyword">this</span>.sfd.format(<span class="keyword">new</span> Date());</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; randomDigits; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是不是在同一个时间段  不是则修改时间标签和清空随机数Set</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.dateFlag.equals(formatDate))&#123;</span><br><span class="line">            <span class="keyword">this</span>.dateFlag = formatDate;</span><br><span class="line">            randomSet.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断生成的随机数是不是已经呗用过，如果是则重新生成</span></span><br><span class="line">        <span class="keyword">int</span> randomNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            randomNum = random.nextInt(Integer.valueOf(sb.toString()));</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="keyword">this</span>.randomSet.contains(randomNum));</span><br><span class="line">        randomSet.add(randomNum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(machine))&#123;</span><br><span class="line">            no = formatDate + machine + String.format(<span class="string">&quot;%0&quot;</span>+randomDigits+<span class="string">&quot;d&quot;</span>, randomNum);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            no = formatDate + String.format(<span class="string">&quot;%0&quot;</span>+randomDigits+<span class="string">&quot;d&quot;</span>, randomNum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   根据前缀+累加位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machine 机器码(可省略)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> digits 随机数的位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByPrefix</span><span class="params">(String prefix, <span class="keyword">int</span> digits, String machine)</span></span>&#123;</span><br><span class="line">        String no = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.sequence ++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(machine))&#123;</span><br><span class="line">            no = prefix + machine + String.format(<span class="string">&quot;%0&quot;</span>+digits+<span class="string">&quot;d&quot;</span>, <span class="keyword">this</span>.sequence);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            no = prefix + String.format(<span class="string">&quot;%0&quot;</span>+digits+<span class="string">&quot;d&quot;</span>, <span class="keyword">this</span>.sequence);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   根据前缀+时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machine 机器码(可省略) null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByDateAndPrefix</span><span class="params">(String prefix, String machine)</span></span>&#123;</span><br><span class="line">        String no = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String formatDate = <span class="keyword">this</span>.sfd.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(machine))&#123;</span><br><span class="line">            no = prefix + formatDate + machine;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            no = prefix + formatDate;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   根据后缀+累加位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> suffix 后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machine 机器码(可省略) null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> digits 随机数的位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoBySuffix</span><span class="params">(String suffix, <span class="keyword">int</span> digits, String machine)</span></span>&#123;</span><br><span class="line">        String no = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.sequence ++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(machine))&#123;</span><br><span class="line">            no = machine + String.format(<span class="string">&quot;%0&quot;</span>+digits+<span class="string">&quot;d&quot;</span>, <span class="keyword">this</span>.sequence) + suffix;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            no = String.format(<span class="string">&quot;%0&quot;</span>+digits+<span class="string">&quot;d&quot;</span>, <span class="keyword">this</span>.sequence) + suffix;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   根据后缀+时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> suffix 后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> machine 机器码(可省略) null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/6/15 16:46</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generatedNoByDateAndSuffix</span><span class="params">(String suffix, String machine)</span></span>&#123;</span><br><span class="line">        String no = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String formatDate = <span class="keyword">this</span>.sfd.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(machine))&#123;</span><br><span class="line">            no = formatDate + machine + suffix;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            no = formatDate + suffix;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录Quartz定时任务框架的学习过程(一)</title>
      <link href="/_post/quartz/"/>
      <url>/_post/quartz/</url>
      
        <content type="html"><![CDATA[<p>参考文档：</p><blockquote><p><a href="https://blog.csdn.net/noaman_wgs/article/details/80984873">https://blog.csdn.net/noaman_wgs/article/details/80984873</a></p><p><a href="https://www.w3cschool.cn/quartz_doc/quartz_doc-2put2clm.html">https://www.w3cschool.cn/quartz_doc/quartz_doc-2put2clm.html</a></p></blockquote><h1 id="Quartz定时框架"><a href="#Quartz定时框架" class="headerlink" title="Quartz定时框架"></a>Quartz定时框架</h1><blockquote><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，完全由Java开发，可以用来执行定时任务，类似于java.util.Timer。但是相较于Timer， Quartz增加了很多功能：</p><ul><li>持久性作业 - 就是保持调度定时的状态;</li><li>作业管理 - 对调度作业进行有效的管理;</li></ul></blockquote><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>拿火车票购票来说，当你下单后，后台就会插入一条待支付的task(job)，一般是30分钟，超过30min后就会执行这个job，去判断你是否支付，未支付就会取消此次订单；当你支付完成之后，后台拿到支付回调后就会再插入一条待消费的task（job），Job触发日期为火车票上的出发日期，超过这个时间就会执行这个job，判断是否使用等。</p><h2 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h2><ul><li>调度器（Scheduler）</li><li>触发器（Trigger）</li><li>任务（Job）</li></ul><h3 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h3><p>将触发器和任务组合加入到调度器中，调度器来决定该任务的执行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20210427110531.png" alt="调度器图例"></p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>Trigger有两个：</p><ul><li>SingleTrigger：可以方便的实现一系列的触发机制。</li><li>CronTrigger：和Cron表达式一块儿使用</li></ul><p>触发器用来指定什么时间开始触发，触发多少次，每隔多久触发一次.</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20210427110045.png" alt="触发器图例"></p><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>Job 其实是由 3 个部分组成：</p><ul><li>JobDetail: 用于描述这个Job是做什么的</li><li>实现Job的类: 具体干活的</li><li>JobDataMap: 给 Job 提供参数用的</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20210427104957.png" alt="任务图例"></p><p><font color=red>每个任务JobDetail可以绑定多个Trigger，但一个Trigger只能绑定一个任务。</font></p><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><p>创建一个Maven工程，添加坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个JobDetail</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailJob</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        JobDetail jobDetail = context.getJobDetail();</span><br><span class="line"></span><br><span class="line">        String email = jobDetail.getJobDataMap().getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;hh:mm:ss&quot;</span>);</span><br><span class="line">        String now = simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;给邮件地址 %s 发出了一封定时邮件, 当前时间是: %s%n&quot;</span>, email, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuartz</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建一个调度器</span></span><br><span class="line">            Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建触发器的触发规则</span></span><br><span class="line">            SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder</span><br><span class="line">                    .simpleSchedule()</span><br><span class="line">                    .withIntervalInSeconds(<span class="number">2</span>)</span><br><span class="line">                    .withRepeatCount(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建一个触发器</span></span><br><span class="line">            SimpleTrigger trigger = TriggerBuilder</span><br><span class="line">                    .newTrigger()</span><br><span class="line">                    .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)  <span class="comment">//标识区别唯一的一个触发器</span></span><br><span class="line">                    .startNow()</span><br><span class="line">                    .withSchedule(scheduleBuilder)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建job，指定JobDetail，datamap给jobdetail传值</span></span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob(MailJob.class)</span><br><span class="line">                    .withIdentity(<span class="string">&quot;mailjob1&quot;</span>, <span class="string">&quot;mailgroup&quot;</span>)  <span class="comment">//标识区别唯一的一个任务</span></span><br><span class="line">                    .usingJobData(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;admin@10086.com&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用jobdatamap修改email</span></span><br><span class="line">            jobDetail.getJobDataMap().put(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;admin@taobao.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调度加入这个job和触发器</span></span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调度启动  触发定时</span></span><br><span class="line">            scheduler.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//等待20秒，让前面的任务执行完成后，在关闭调度器</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span> * <span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            scheduler.shutdown(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行main函数打印如下结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20210427114232.png" alt="简单示例执行结果"></p><h2 id="任务（Job）"><a href="#任务（Job）" class="headerlink" title="任务（Job）"></a>任务（Job）</h2><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>默认情况下，无论上一次任务是否结束，只要设置的时间到了，下一次任务就会重新开启一个新的线程执行。</p><p>比如在备份文件的时候，我们当然不会让并行执行，那么添加注解 <code>@DisallowConcurrentExecution</code> 在任务的JobDetail类上，即可让任务单线程执行。</p><p>当任务的执行时间超过任务的时间间隔时，下一个任务会等待上一个任务结束，并非丢弃。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常的处理分为两种：</p><ol><li>当发生异常时，停止这个任务</li><li>当发生异常时，调整任务，重新运行</li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>创建JobException1（情况1）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionJob1</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="number">100</span>/i);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常，取消这个job对应的所有调度&quot;</span>);</span><br><span class="line">            JobExecutionException exception = <span class="keyword">new</span> JobExecutionException(e);</span><br><span class="line">            exception.setUnscheduleAllTriggers(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建JobException2（情况2）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionJob2</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="number">100</span>/i);   <span class="comment">//主动报错抛出异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生了异常，修改一下参数，立即重新执行&quot;</span>);</span><br><span class="line">            i = <span class="number">1</span>;</span><br><span class="line">            JobExecutionException exception = <span class="keyword">new</span> JobExecutionException(e);</span><br><span class="line">            exception.setRefireImmediately(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保留简单案例中Test类，修改 <code>JobDetail jobDetail = JobBuilder.newJob(MailJob.class)</code> 为JobException1，JobException2，分别运行看到结果如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20210427131752.png" alt="异常情况1"><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20210427131712.png" alt="异常情况2"></p><h3 id="Job中断"><a href="#Job中断" class="headerlink" title="Job中断"></a>Job中断</h3><p>在任务进行时，我们有时候需要在达到某个条件之后需要终端这个任务的进行，那么这个Job需要实现 <code>InterruptableJob</code> 接口，来实现对任务的中断。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>创建任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//必须实现InterruptableJob 而非 Job才能够被中断</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoppableJob</span> <span class="keyword">implements</span> <span class="title">InterruptableJob</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(stop)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;每隔1秒，进行一次检测，看看是否停止&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;持续工作中。。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> <span class="keyword">throws</span> UnableToInterruptJobException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;被调度叫停&quot;</span>);</span><br><span class="line">        stop = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">          </span><br><span class="line">        Trigger trigger = newTrigger().withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">            .startNow()</span><br><span class="line">            .build();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//定义一个JobDetail</span></span><br><span class="line">        JobDetail job = newJob(StoppableJob.class)</span><br><span class="line">            .withIdentity(<span class="string">&quot;exceptionJob1&quot;</span>, <span class="string">&quot;someJobGroup&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//调度加入这个job</span></span><br><span class="line">        scheduler.scheduleJob(job, trigger);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        scheduler.start();</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;过5秒，调度停止 job&quot;</span>);</span><br><span class="line">        <span class="comment">//key 就相当于这个Job的主键</span></span><br><span class="line">        scheduler.interrupt(job.getKey());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//等待20秒，让前面的任务都执行完了之后，再关闭调度器</span></span><br><span class="line">        Thread.sleep(<span class="number">20000</span>);</span><br><span class="line">        scheduler.shutdown(<span class="keyword">true</span>);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font color=red>说明：</font>实现 <code>InterruptableJob</code> 是为了让任务中有一个内置的 <code>interrupt</code> 来进行中断操作，并不是整整的中断，需要根据自身业务做标识进行实现，</p><h2 id="触发器（Trigger）"><a href="#触发器（Trigger）" class="headerlink" title="触发器（Trigger）"></a>触发器（Trigger）</h2><h3 id="SimpleTrigger"><a href="#SimpleTrigger" class="headerlink" title="SimpleTrigger"></a>SimpleTrigger</h3><p>简单案例中已经对触发器继续了一些应用，在这里对一些常用的定时进行举例：</p><ul><li><p>下一个8秒的倍数（只针对开始时间）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从当前开始，8的倍数秒开始执行</span></span><br><span class="line">Date startTime = DateBuilder.nextGivenSecondDate(<span class="keyword">null</span>, <span class="number">8</span>);</span><br><span class="line">SimpleTrigger trigger = (SimpleTrigger) newTrigger().withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>).startAt(startTime).build();</span><br></pre></td></tr></table></figure></li><li><p>10秒后开始执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date startTime = DateBuilder.futureDate(<span class="number">10</span>, IntervalUnit.SECOND);</span><br><span class="line">SimpleTrigger trigger = (SimpleTrigger) newTrigger().withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>).startAt(startTime).build();</span><br></pre></td></tr></table></figure></li><li><p>累计9次，间隔3秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SimpleScheduleBuilder scheduleBuilder =SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">    .withRepeatCount(<span class="number">8</span>)</span><br><span class="line">    .withIntervalInSeconds(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">SimpleTrigger trigger = (SimpleTrigger) newTrigger()</span><br><span class="line">    .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">    .withSchedule(scheduleBuilder)</span><br><span class="line">    .startNow()  <span class="comment">//立即开始</span></span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></li><li><p>永久执行，间隔1秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SimpleScheduleBuilder scheduleBuilder =SimpleScheduleBuilder.simpleSchedule().repeatForever().withIntervalInSeconds(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">SimpleTrigger trigger = (SimpleTrigger) newTrigger()</span><br><span class="line">                    .withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">                    .startAt(startTime)</span><br><span class="line">                    .withSchedule(scheduleBuilder)</span><br><span class="line">                    .build();</span><br></pre></td></tr></table></figure></li></ul><h3 id="CronTrigger"><a href="#CronTrigger" class="headerlink" title="CronTrigger"></a>CronTrigger</h3><p>和Cron表达式一起使用，推荐！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CronTrigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">.withIdentity(<span class="string">&quot;trigger1&quot;</span>,<span class="string">&quot;group1&quot;</span>)</span><br><span class="line">.withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/2 * * * * ?&quot;</span>))   <span class="comment">//重点是这一句</span></span><br><span class="line">.build();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="监听器（Listener）"><a href="#监听器（Listener）" class="headerlink" title="监听器（Listener）"></a>监听器（Listener）</h2><p>关于Listener，在quartz中有Job监听器，Trigger监听器，Scheduler监听器，监听器会对很多操作进行监控，开发人员也可以在此时进行一些操作，例如日志打印等。</p><h3 id="JobListener"><a href="#JobListener" class="headerlink" title="JobListener"></a>JobListener</h3><p>我们将简单案例中的MailJob进行监听，创建Listener实现类，里面有一些必要的重写方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailJobListener</span> <span class="keyword">implements</span> <span class="title">JobListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送邮件进行定时操作&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 准备执行时的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobToBeExecuted</span><span class="params">(JobExecutionContext jobExecutionContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备执行：\t&quot;</span> + jobExecutionContext.getJobDetail().getKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消操作时的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobExecutionVetoed</span><span class="params">(JobExecutionContext jobExecutionContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;取消操作：\t&quot;</span> + jobExecutionContext.getJobDetail().getKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行结束时的操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobExecutionContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jobWasExecuted</span><span class="params">(JobExecutionContext jobExecutionContext, JobExecutionException e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行结束：\t&quot;</span> + jobExecutionContext.getJobDetail().getKey());</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注册监听器到调度器中，监听器注册也分为三种：</p><ul><li>全局Job监听器</li><li>组Job监听器</li><li>唯一Job监听器</li></ul><p>全局监听器注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MailJobListener jobListener = <span class="keyword">new</span> MailJobListener();</span><br><span class="line">scheduler.getListenerManager().addJobListener(jobListener);</span><br></pre></td></tr></table></figure><p>组Job监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MailJobListener jobListener = <span class="keyword">new</span> MailJobListener();</span><br><span class="line">GroupMatcher&lt;JobKey&gt; groupMatcher = GroupMatcher.jobGroupEquals(job.getKey().getGroup());   <span class="comment">//组Job匹配</span></span><br><span class="line">scheduler.getListenerManager().addJobListener(jobListener, groupMatcher);  <span class="comment">//绑定</span></span><br></pre></td></tr></table></figure><p>唯一Job监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MailJobListener jobListener = <span class="keyword">new</span> MailJobListener();</span><br><span class="line">KeyMatcher&lt;JobKey&gt; keyMatcher = KeyMatcher.keyEquals(job.getKey());</span><br><span class="line">scheduler.getListenerManager().addJobListener(jobListener, keyMatcher);</span><br></pre></td></tr></table></figure><h3 id="TriggerListener和SchedulerListener"><a href="#TriggerListener和SchedulerListener" class="headerlink" title="TriggerListener和SchedulerListener"></a>TriggerListener和SchedulerListener</h3><p>这两个监听器的实现方式和JobListener的实现方式类似，这里不在赘述，近介绍监听器内方法的作用。</p><h4 id="TriggerListener"><a href="#TriggerListener" class="headerlink" title="TriggerListener"></a>TriggerListener</h4><table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td>triggerFired()</td><td>触发器被激发，job即将被运行时</td></tr><tr><td>vetoJobExecution()</td><td>触发器被激发，job即将被运行：triggerFired先执行，此方法后执行，如果返回true，则任务被终止</td></tr><tr><td>triggerMisfired()</td><td>当Trigger错过被激发时执行,比如当前时间有很多触发器都需要执行，但是线程池中的有效线程都在工作，那么有的触发器就有可能超时，错过这一轮的触发。</td></tr><tr><td>triggerComplete()</td><td>触发器完成后执行</td></tr><tr><td>getName()</td><td>返回一个字符串主要说明该监听器的名称等，一般用作日志记录</td></tr></tbody></table><h4 id="SchedulerListener"><a href="#SchedulerListener" class="headerlink" title="SchedulerListener"></a>SchedulerListener</h4><p>调度器监听器方法较多，这里选择几个常用的以做举例</p><table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td>jobScheduled()</td><td>在有新的 JobDetail 部署时调用此方法。</td></tr><tr><td>jobUnscheduled</td><td>在有新的 JobDetail卸载时调用此方法</td></tr><tr><td>triggersPaused()</td><td>在Trigger被挂起时调用此方法</td></tr><tr><td>triggerResumed()</td><td>在Trigger被重新激活时调用此方法</td></tr><tr><td>schedulerStarted()</td><td>调度器启动完成之后执行</td></tr><tr><td>schedulerShuttingdown()</td><td>调度器正在被终止之后执行</td></tr><tr><td>schedulerShutdown()</td><td>调度器终止完成之后执行</td></tr><tr><td>schedulerStarting()</td><td>调度器正在被启动时执行</td></tr></tbody></table><h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p>此篇主要介绍了Quartz定时任务框架的基本内容合大概用法，限于在main方法中测试是否有效。</p><p>包括定时任务三大基本组件：Job，Trigger，Scheduler和他们的监听器。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> Quartz </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Robo3T中批量操作数据</title>
      <link href="/_post/mongo-bulkModifyData/"/>
      <url>/_post/mongo-bulkModifyData/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>功能菜单列表中有导出功能，查询的是MongoDB，导出中做限制只能导出五万的数据条数，如果超过五万的数据则禁止导出，测试环境中为导出做假数据进行测试结界数据条数判断是否准确。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>Robo3T</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>MongoDB查询实例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;risk_case_data&#x27;).find(&#123;<span class="attr">&quot;caseNo&quot;</span>:<span class="string">&quot;123546&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>MongoDB统计条数示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;risk_case_data&#x27;).count();</span><br><span class="line">db.getCollection(&#x27;risk_case_data&#x27;).find(&#123;<span class="attr">&quot;caseNo&quot;</span>:<span class="string">&quot;123546&quot;</span>&#125;).count();</span><br></pre></td></tr></table></figure><p>MongoDB删除示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;risk_case_data&#x27;).remove();<span class="comment">//全删</span></span><br><span class="line">db.getCollection(&#x27;risk_case_data&#x27;).remove(&#123;<span class="attr">&quot;caseNo&quot;</span>:&#123;<span class="attr">&quot;$eq&quot;</span>: <span class="literal">null</span>&#125;&#125;)<span class="comment">//删除caseNo等于null的数据</span></span><br></pre></td></tr></table></figure><p>MongoDB新增示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;risk_case_data&#x27;).insert(&#123;<span class="attr">&quot;caseNo&quot;</span>:<span class="string">&quot;123546&quot;</span>&#125;)<span class="comment">//新增一条caseNo等于123546的数据</span></span><br></pre></td></tr></table></figure><p>MongoDB批量新增示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i = <span class="number">1</span>; i &lt;=<span class="number">5000</span>;i++)&#123;</span><br><span class="line">    db.getCollection(&#x27;risk_case_data&#x27;).insert(&#123;<span class="attr">&quot;code&quot;</span> : <span class="string">&quot;MPOS&quot;</span>,<span class="attr">&quot;mercNum&quot;</span> : &#x27;<span class="string">&quot;&#x27;+i+&#x27;&quot;</span>&#x27;&#125;)</span><br><span class="line">&#125;  <span class="comment">//新增五千条动态MercNum的数据</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Robo3T </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次让我懵逼的沟通</title>
      <link href="/_post/record-1/"/>
      <url>/_post/record-1/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>日常工作任务和其他部门进行对接联调，他们提供数据供我这里查询，使用的数据库是MongoDB（同步Mysql）</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>我的查询条件里面有手机号，但是MongoDB里面保存的手机号是脱敏字符串，类似于：132****0482，那么肯定是查不到的，通过沟通发现表中有对应的加密手机号（了解到之前设计不合理，在数据库中直接保存脱敏的数据，后面才加的加密字段），目前会出现两种情况：</p><ul><li>当加密串(PHONE_EN)为空的时候，脱敏串(PHONE)保存的是明文(正常手机号)</li><li>当加密串(PHONE_EN)不为空的时候，脱敏串(PHONE)则保存的脱敏手机号</li></ul><p>那么我一个手机号要查询两个字段还要分情况，当时我就是蒙蔽的，怎么想啊，MongoDB中有逻辑控制规范吗？啊，`(<del>_</del>)`。</p><p>脑子直接被这个问题限制了想了半天求助同事大哥，说明了遇到的问题，他的回答：为什么非要逻辑控制呢，我只要注重目的就行，我就只需要字段PHONE的明文和加密串PHONE_EN就行了呗，可以用 <code>or</code> 来查询噻，查询：加密串 or 明文，当我加密串为空时，肯定去看脱敏串是不是明文匹配了。</p><p>我恍然大悟，对啊，然后自己写了写查询语句，确实能实现查询，语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;risk_case_data&#x27;</span>).find(&#123;</span><br><span class="line">    $<span class="keyword">or</span>:[</span><br><span class="line">    &#123;&quot;merchant.PHONE&quot;: &quot;1860001&quot;&#125;,&#123;&quot;merchant.PHONE_EN&quot;: &quot;AGJAS;LKSJGA&quot;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里自己就受到了之前思路的影响，思维固化，没有变通，一直在想如何构造条件，还是遇到的问题太少，思路打不开，简单问题复杂化，还是要多看，多思考，多动手。</p><p>今天就到这里，纪念独自懵逼的我！！</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教你如何使用策略模式</title>
      <link href="/_post/Strategy-Pattern/"/>
      <url>/_post/Strategy-Pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>在策略模式中一个类的行为或者其算法在运行是可以进行改变，这种的类型也可以叫做行为型模式。</p><p>基本结构</p><ul><li>策略对象类（表示行为）</li><li>策略父类</li></ul><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>将多个行为进行封装，能够根据配置进行替换。</li><li>能够省略较多的判断语句 if…else…，便于维护。</li><li>实现一个公共接口。</li><li>符合开发的开闭原则。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>策略类会很多，一个行为一个策略类。</li><li>所有的策略类都需要对外暴漏。</li></ul><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ul><li><p>在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 </p></li><li><p>一个系统需要动态地在几种算法中选择一种。 </p></li><li><p>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p></li></ul><h1 id="实例场景"><a href="#实例场景" class="headerlink" title="实例场景"></a>实例场景</h1><p>今天和朋友要去公园玩儿，那么就要选择出行方式，那么创建一个出行的接口，创建自行车、公交、步行等行为类，并且都继承出行的接口，再创建我的选择类（Context）来选择出行方式。至此大体完成。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="出行方式接口"><a href="#出行方式接口" class="headerlink" title="出行方式接口"></a>出行方式接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 出行方式（工具）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/15 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">goOutTool</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出行方式实现类"><a href="#出行方式实现类" class="headerlink" title="出行方式实现类"></a>出行方式实现类</h2><h3 id="公交车"><a href="#公交车" class="headerlink" title="公交车"></a>公交车</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.strategy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 公交车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/15 16:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusWayStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goOutTool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天坐公交车出去玩儿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步行"><a href="#步行" class="headerlink" title="步行"></a>步行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.strategy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 步行方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/15 16:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WalkWayStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goOutTool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天要步行出去玩儿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自己开车"><a href="#自己开车" class="headerlink" title="自己开车"></a>自己开车</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.strategy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 开车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/15 16:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarWayStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goOutTool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天自己开车出去玩儿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="出行方式上下文"><a href="#出行方式上下文" class="headerlink" title="出行方式上下文"></a>出行方式上下文</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.strategy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 选择行为（上下文）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/15 16:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StrategyContext</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        strategy.goOutTool();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.strategy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 我和朋友准备出去玩儿</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/15 16:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 选择步行出去玩儿</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        StrategyContext walkWayStrategy = <span class="keyword">new</span> StrategyContext(<span class="keyword">new</span> WalkWayStrategy());</span><br><span class="line">        walkWayStrategy.goOutTool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 选择坐公交出去玩儿</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        StrategyContext busWayStrategy = <span class="keyword">new</span> StrategyContext(<span class="keyword">new</span> BusWayStrategy());</span><br><span class="line">        busWayStrategy.goOutTool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 选择自己开车出去玩儿</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        StrategyContext carWayStrategy = <span class="keyword">new</span> StrategyContext(<span class="keyword">new</span> CarWayStrategy());</span><br><span class="line">        carWayStrategy.goOutTool();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connected to the target VM, address: &#x27;127.0.0.1:11631&#x27;, transport: &#x27;socket&#x27;</span><br><span class="line">今天要步行出去玩儿</span><br><span class="line">今天坐公交车出去玩儿</span><br><span class="line">今天自己开车出去玩儿</span><br><span class="line">Disconnected from the target VM, address: &#x27;127.0.0.1:11631&#x27;, transport: &#x27;socket&#x27;</span><br></pre></td></tr></table></figure><p>这样一个简单的策略就是出来了，如果出现新增的策略，只需要实现公共的出行方式接口，然后写自己的逻辑就OK了。</p><h1 id="SpringBoot中应用"><a href="#SpringBoot中应用" class="headerlink" title="SpringBoot中应用"></a>SpringBoot中应用</h1><p>接了个需求，对接第三方接口进行数据的校验，每一个第三方都是一套规范，考虑到后续的可扩展性，和内部的统一，使用策略类进行实现。</p><ul><li>创建一个配置菜单对接入的第三方进行记录（标志 <code>channelCode</code>）。</li><li>创建校验接口。</li><li>创建第三方接口类实现校验接口，类中写校验逻辑代码。</li></ul><p>在这里我去掉了Context上下文，直接在逻辑代码中注入校验接口，根据配置中的第三方数据的 <code>channelCode</code> 判断走哪个第三方接口( <code>channelCode</code>的值就是该第三方接口类在Spring中的beanName)。</p><h2 id="校验接口"><a href="#校验接口" class="headerlink" title="校验接口"></a>校验接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BusinessAuthChannelService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   企业信息要素验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto 校验数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String , java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/1/7 15:56</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">auth</span><span class="params">(AuthChannelDto dto)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三方校验实现类-业务代码不便展示"><a href="#第三方校验实现类-业务代码不便展示" class="headerlink" title="第三方校验实现类(业务代码不便展示)"></a>第三方校验实现类(业务代码不便展示)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service(&quot;qcc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QccAuthChannelServiceImpl</span> <span class="keyword">implements</span> <span class="title">BusinessAuthChannelService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  鉴权查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String , java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/1/11 13:51</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">auth</span><span class="params">(AuthChannelDto dto)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="校验接口控制层"><a href="#校验接口控制层" class="headerlink" title="校验接口控制层"></a>校验接口控制层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/businessAuthChannel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessAuthChannelController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BusinessAuthChannelConfigService businessAuthChannelConfigService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BusinessAuthChannelOrderService businessAuthChannelOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   企业信息要素验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String , java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/1/7 15:38</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">auth</span><span class="params">(<span class="meta">@RequestBody</span> AuthChannelDto dto)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;企业信息要素验证,要素鉴权参数：&quot;</span>+gson.toJson(dto));</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        Map&lt;String, Object&gt; authResult = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//校验参数</span></span><br><span class="line">        <span class="keyword">boolean</span> validateParameter = <span class="keyword">this</span>.validateParameter(dto);</span><br><span class="line">        <span class="keyword">if</span> (!validateParameter)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;rspCode&quot;</span>, <span class="string">&quot;99&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;rspMsg&quot;</span>, <span class="string">&quot;参数校验失败&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;企业信息要素验证，返回数据：&quot;</span>+map);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询鉴权通道</span></span><br><span class="line">        BusinessAuthChannelConfig config = <span class="keyword">this</span>.getAuthChannelConfig(dto);</span><br><span class="line">        <span class="comment">//判断能够鉴权的标识</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (config != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//是否存在该通道编码的调用service实现类（spring bean中存在通道编码的bean）</span></span><br><span class="line">            <span class="keyword">boolean</span> existBean = SpringUtil.getApplicationContext().containsBean(config.getChannelCode());</span><br><span class="line">            <span class="keyword">if</span> (existBean)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;rspCode&quot;</span>, <span class="string">&quot;99&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;rspMsg&quot;</span>, <span class="string">&quot;找不到可用通道&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;企业信息要素验证，返回数据：&quot;</span>+map);</span><br><span class="line">            <span class="keyword">this</span>.saveBusinessAuthChannelOrder(dto, authResult, config);</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用鉴权通道</span></span><br><span class="line">        BusinessAuthChannelService authChannelService =</span><br><span class="line">                (BusinessAuthChannelService)SpringUtil.getBean(config.getChannelCode());</span><br><span class="line">        authResult = authChannelService.auth(dto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存信息记录</span></span><br><span class="line">        <span class="keyword">this</span>.saveBusinessAuthChannelOrder(dto, authResult, config);</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = (Map&lt;String, Object&gt;)authResult.get(<span class="string">&quot;resultMap&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;企业信息要素验证，返回数据：&quot;</span>+resultMap);</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   鉴权要素参数校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/1/12 15:32</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validateParameter</span><span class="params">(AuthChannelDto dto)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   根据参数条件查询可用的鉴权通道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.p4.risk.entity.BusinessAuthChannelConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/1/12 15:32</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BusinessAuthChannelConfig <span class="title">getAuthChannelConfig</span><span class="params">(AuthChannelDto dto)</span></span>&#123;</span><br><span class="line">        <span class="comment">//根据参数在配置表中查询第三方接口配置信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   保存操作记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto 企业信息鉴权信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authResult 鉴权结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config 企业鉴权通道配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2021/1/12 15:33</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveBusinessAuthChannelOrder</span><span class="params">(AuthChannelDto dto, Map&lt;String, Object&gt; authResult,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              BusinessAuthChannelConfig config)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释一下：主要是 <code>auth</code> 这个方法时主要流程，根据参数查询出来的第三方接口配置字段的  <code>channelCode</code> ,使用SpringUtil在Spring中查找是否存在有该值的beanName，如果不存在，则直接保存操作记录后返回。如果存在则使用 <code>SpringUtil.getBean(channelCode)</code>获得该编码的bean，然后调用 <code>authResult = authChannelService.auth(dto)</code> 就进入到第三方校验实现类中进行校验，校验完毕后保存操作记录，流程结束。</p><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>代码不全，但注释应该足够了，如果对上述代码有疑问的烦请留言，如果各位喜欢这篇文章，劳烦各位伸出小手点个赞，收个藏，关个注。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云搭建Easy-Mock对接Element-UI提供数据支持</title>
      <link href="/_post/easymock-to-eleUI/"/>
      <url>/_post/easymock-to-eleUI/</url>
      
        <content type="html"><![CDATA[<h1 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h1><blockquote><p>了解RESTful的基本概念，对Swagger接口API的语法有基本的认识，动手搭建Easy-Mock服务器，对接<br>Element-UI进行数据提供。</p></blockquote><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><p>RESTful架构，REST的名称”表现层状态转化”。就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易 于理解、扩展方便，所以正得到越来越多网站的采用。</p><p>资源（<strong>Resources</strong>） </p><p>   就是网络环境中的一个信息，比如：图像，视频，音乐，文字等存在的内容，都是可以使用URI去定位它们的位置然后得到它。这是一个独一无二的标识。</p><p>表现层（<strong>Representation</strong>）</p><p>   把上述“资源“进行展示的形式。比如JPG，MP4，MP3，TXT等。</p><p>状态转化（<strong>State Transfer</strong>）</p><p>   访问一个网站，就代表了客户端和服务器的一个互动过程。比如存在于数据库中的数据经过后台服务器的处理生成静态文件HTML呈现到浏览器中。</p><p>HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET</strong>用来获取资源，<strong>POST</strong>用来新建资源（也可以用于更新资源），<strong>PUT</strong>用来更新资源，<strong>DELETE</strong>用来删除资源。</p><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p>swagger是一个流行的API开发框架，这个框架以“开放API声明”（OpenAPI Specification，OAS）为基础，对整个API的开发周期都提供了相应的解决方案，是一个非常庞大的项目（包括设计、文档以及测试和部署，几乎支持所有语言）。</p><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。Swagger 让部署管理和使用功能强大的API从未如此简单。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><table><thead><tr><th align="left">字段名</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">swagger</td><td align="left">string</td><td align="left">必需的。使用指定的规范版本。</td></tr><tr><td align="left">info</td><td align="left">Info Object</td><td align="left">必需的。提供元数据API。</td></tr><tr><td align="left">host</td><td align="left">string</td><td align="left">主机名或ip服务API。</td></tr><tr><td align="left">basePath</td><td align="left">string</td><td align="left">API的基本路径</td></tr><tr><td align="left">schemes</td><td align="left">string</td><td align="left">API的传输协议。 值必须从列表中:”http”,”https”,”ws”,”wss”。</td></tr><tr><td align="left">consumes</td><td align="left">string</td><td align="left">一个MIME类型的api可以使用列表。值必须是所描述的Mime类型。</td></tr><tr><td align="left">produces</td><td align="left">string</td><td align="left">MIME类型的api可以产生的列表。  值必须是所描述的Mime类型。</td></tr><tr><td align="left">paths</td><td align="left">路径对象</td><td align="left">必需的。可用的路径和操作的API。</td></tr><tr><td align="left">definitions</td><td align="left">定义对象</td><td align="left">一个对象数据类型生产和使用操作。</td></tr><tr><td align="left">parameters</td><td align="left">参数定义对象</td><td align="left">一个对象来保存参数,可以使用在操作。 这个属性不为所有操作定义全局参数。</td></tr><tr><td align="left">responses</td><td align="left">反应定义对象</td><td align="left">一个对象响应,可以跨操作使用。 这个属性不为所有操作定义全球响应。</td></tr><tr><td align="left">externalDocs</td><td align="left">外部文档对象</td><td align="left">额外的外部文档。</td></tr><tr><td align="left">summary</td><td align="left">string</td><td align="left">什么操作的一个简短的总结。 最大swagger-ui可读性,这一领域应小于120个字符。</td></tr><tr><td align="left">description</td><td align="left">string</td><td align="left"><a href="https://help.github.com/articles/github-flavored-markdown">详细解释操作的行为。GFM语法可用于富文本表示。</a></td></tr><tr><td align="left">operationId</td><td align="left">string</td><td align="left">独特的字符串用于识别操作。 id必须是唯一的在所有业务中所描述的API。 工具和库可以使用operationId来唯一地标识一个操作,因此,建议遵循通用的编程的命名约定。</td></tr><tr><td align="left">deprecated</td><td align="left">boolean</td><td align="left">声明该操作被弃用。 使用声明的操作应该没有。 默认值是false。</td></tr></tbody></table><p>（2）字段类型与格式定义</p><table><thead><tr><th align="left">普通的名字</th><th align="left">type</th><th align="left">format</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">integer</td><td align="left">integer</td><td align="left">int32</td><td align="left">签署了32位</td></tr><tr><td align="left">long</td><td align="left">integer</td><td align="left">int64</td><td align="left">签署了64位</td></tr><tr><td align="left">float</td><td align="left">number</td><td align="left">float</td><td align="left"></td></tr><tr><td align="left">double</td><td align="left">number</td><td align="left">double</td><td align="left"></td></tr><tr><td align="left">string</td><td align="left">string</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">byte</td><td align="left">string</td><td align="left">byte</td><td align="left">base64编码的字符</td></tr><tr><td align="left">binary</td><td align="left">string</td><td align="left">binary</td><td align="left">任何的八位字节序列</td></tr><tr><td align="left">boolean</td><td align="left">boolean</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">date</td><td align="left">string</td><td align="left">date</td><td align="left">所定义的full-date- - - - - -RFC3339</td></tr><tr><td align="left">dateTime</td><td align="left">string</td><td align="left">date-time</td><td align="left">所定义的date-time- - - - - -RFC3339</td></tr><tr><td align="left">password</td><td align="left">string</td><td align="left">password</td><td align="left">用来提示用户界面输入需要模糊。</td></tr></tbody></table><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">API</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">/base</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">www.surpass.org.cn</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/city:</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">新增城市</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;body&quot;</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">&quot;body&quot;</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">城市实体类</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&#x27;#/definitions/City&#x27;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">成功</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&#x27;#/definitions/ApiResponse&#x27;</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">City:</span> </span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span> </span><br><span class="line">      <span class="attr">id:</span> </span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;ID&quot;</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;名称&quot;</span></span><br><span class="line">      <span class="attr">ishot:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">是否热门</span></span><br><span class="line">  <span class="attr">ApiResponse:</span> </span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span> </span><br><span class="line">      <span class="attr">flag:</span> </span><br><span class="line">        <span class="attr">type:</span> <span class="string">boolean</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">是否成功</span></span><br><span class="line">      <span class="attr">code:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">integer</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">int32</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">返回码</span></span><br><span class="line">      <span class="attr">message:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">返回信息</span></span><br></pre></td></tr></table></figure><h2 id="API预览"><a href="#API预览" class="headerlink" title="API预览"></a>API预览</h2><p>（1）在本地安装nginx  </p><p>（2）下载SwaggerUI源码   <a href="https://swagger.io/download-swagger-ui/">https://swagger.io/download-swagger-ui/</a></p><p>（3）解压，将dist文件夹下的全部文件拷贝至 nginx的html目录</p><p>（4）启动nginx</p><p>（5）浏览器打开页面  <a href="http://localhost:801即可看到文档页面">http://localhost:801即可看到文档页面</a> </p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20201221201026.png"></p><h1 id="Mock-js"><a href="#Mock-js" class="headerlink" title="Mock.js"></a>Mock.js</h1><p>Mock.js （官网<a href="http://mockjs.com/">http://mockjs.com/</a>）是一款模拟数据生成器，旨在帮助前端攻城师独立于后端进行开发，帮助编写单元测试，根据数据模板生成模拟数据模拟 Ajax 请求，生成并返回模拟数据基于 HTML 模板生成模拟数据。</p><p><strong>Mock.js具有以下特点：</strong></p><ol><li>前后端分离</li><li>让前端攻城师独立于后端进行开发。</li><li>增加单元测试的真实性</li><li>通过随机数据，模拟各种场景。</li><li>开发无侵入</li><li>不需要修改既有代码，就可以拦截 Ajax 请求，返回模拟的响应数据。</li><li>支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等。</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install mockjs</span><br></pre></td></tr></table></figure><h2 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h2><p>以前生成五条数据的集合只能写死。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;测试&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;测试&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;测试&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;测试&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;测试&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个js文件，填入内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock=<span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> data=Mock.mock(&#123;</span><br><span class="line">    <span class="string">&#x27;list|5&#x27;</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;测试&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span> ))</span><br></pre></td></tr></table></figure><p>命名m1.js,执行命令 <code>node m1</code>，查看运行结果。可以看出与上面写死的效果是一样的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20201221201049.png"></p><p>再来看一个比较复杂的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Mock=<span class="built_in">require</span>(<span class="string">&#x27;mockjs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> data= Mock.mock(&#123;</span><br><span class="line">    <span class="string">&#x27;list|3&#x27;</span>:[    <span class="comment">//生成三个实体数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;name|2-4&quot;</span>:<span class="string">&#x27;舟舟&#x27;</span>,     <span class="comment">//字符串重复次数</span></span><br><span class="line">            <span class="string">&quot;phone|11&quot;</span>:<span class="string">&quot;1&quot;</span>,        </span><br><span class="line">            <span class="string">&quot;point|120-150&quot;</span>:<span class="number">0</span>,    <span class="comment">//数字就随机120-150之内的数</span></span><br><span class="line">            <span class="string">&quot;money|1000-3000.2-4&quot;</span>:<span class="number">0</span>,   <span class="comment">//数字就随机1000-3000之内的数,并保留两到四位小数</span></span><br><span class="line">            <span class="string">&quot;status|1&quot;</span>:<span class="literal">true</span>,      <span class="comment">//随机生成布尔值   概率均等</span></span><br><span class="line">            <span class="string">&quot;default|1-3&quot;</span>:<span class="literal">true</span>,    <span class="comment">//随机生成布尔值    true为1/4</span></span><br><span class="line">            <span class="string">&quot;detail|1&quot;</span>:&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;ss&#x27;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;    <span class="comment">//随机去body内一个属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data,<span class="literal">null</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>命名m2.js,执行命令 <code>node m2</code>，查看运行结果，生成了不同的数据结果。这样就会更加真实的来模拟后端给我们发送的数据。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20201221201111.png"></p><h1 id="EasyMock"><a href="#EasyMock" class="headerlink" title="EasyMock"></a>EasyMock</h1><p>Easy Mock 是一个极其简单、高效、可视化、并且能快速生成模拟数据的在线 mock 服务。以项目管理的方式组织 Mock List，能帮助我们更好的管理 Mock 数据。</p><p>地址：<a href="https://www.easy-mock.com/">https://www.easy-mock.com</a></p><p>在线文档：<a href="https://www.easy-mock.com/docs">https://www.easy-mock.com/docs</a></p><h2 id="腾讯云安装EasyMock"><a href="#腾讯云安装EasyMock" class="headerlink" title="腾讯云安装EasyMock"></a>腾讯云安装EasyMock</h2><p>首先下载需要的node，mongoDB，redis</p><h3 id="yum方式安装nodejs"><a href="#yum方式安装nodejs" class="headerlink" title="yum方式安装nodejs"></a>yum方式安装nodejs</h3><p>(1) 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure><p>查看安装的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="yum方式安装mongoDb"><a href="#yum方式安装mongoDb" class="headerlink" title="yum方式安装mongoDb"></a>yum方式安装mongoDb</h3><p>(1)配置yum</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/mongodb-org-3.2.repo</span><br></pre></td></tr></table></figure><p>编辑以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.2]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.2/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc</span><br></pre></td></tr></table></figure><p>(2)安装MongoDB</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br></pre></td></tr></table></figure><p>(3)启动MongoD </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure><h3 id="yum方式安装redis"><a href="#yum方式安装redis" class="headerlink" title="yum方式安装redis"></a>yum方式安装redis</h3><p>(1)下载fedora的epel仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>(2)下载安装redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br></pre></td></tr></table></figure><p>(3)启动redis服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis</span><br></pre></td></tr></table></figure><h3 id="安装easy-mock"><a href="#安装easy-mock" class="headerlink" title="安装easy-mock"></a>安装easy-mock</h3><p>上传压缩文件：<a href="https://github.com/easy-mock/easy-mock">https://github.com/easy-mock/easy-mock</a></p><p>安装zip 和unzip </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zip unzip</span><br></pre></td></tr></table></figure><p>解压压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip easy-mock-dev.zip</span><br></pre></td></tr></table></figure><p>进入目录，安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd easy-mock-dev/</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>执行构建，运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>浏览器中访问地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&#123;ip&#125;:7300</span><br></pre></td></tr></table></figure><p>初始界面如下，不吹牛皮的说，这个页面确实好看。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201221203024508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzZGZhc2pmYWY=,size_16,color_FFFFFF,t_70#pic_center"></p><p>注册账户后进入首页</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20201221201138.png"></p><p>我们新创建一个项目，填入相关信息，选择上传文件按，上传我们上面的yml文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20201221201149.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20201221201207.png"></p><p>后续如果想要添加这个项目的api可以点击右上角设置导入。现在可以对这个接口api的 <code>/base/city</code> 进行预览，编辑和删除等操作。这里新建接口，左边填入数据，设置请求地址为 <code>city</code> ，请求方式为 <code>post</code> ,填下描述。确认。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;flag&quot;</span>: <span class="string">&quot;@boolean&quot;</span>,</span><br><span class="line">  <span class="string">&quot;code&quot;</span>: <span class="string">&quot;@integer(60, 100)&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;查询城市数据&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;list|2-5&quot;</span>: [&#123;   <span class="comment">//随机生成2-5条数据</span></span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="string">&quot;@id&quot;</span>,   <span class="comment">//随机ID号</span></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@city(true)&quot;</span>,<span class="comment">//随机城市名称</span></span><br><span class="line">      <span class="string">&quot;ishot&quot;</span>: <span class="string">&quot;@boolean&quot;</span>       <span class="comment">//随机true，false</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加完成后再postman中进行接口测试，接口请求地址为 <code>Base URL+/city</code> 类型为 <code>get</code> 。请求结果下图</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20201221201223.png"></p><h1 id="ElementUI对接Easy-mock"><a href="#ElementUI对接Easy-mock" class="headerlink" title="ElementUI对接Easy-mock"></a>ElementUI对接Easy-mock</h1><p>首先官网上提供了非常基础的脚手架，如果我们使用官网的脚手架需要自己写很多代码比如登陆界面、主界面菜单等内容。</p><ol><li><p>下载vue代码：<a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/">https://panjiachen.gitee.io/vue-element-admin-site/zh/</a> </p><p>解压后文件夹中下载依赖并运行，确认其能够正常运行。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><ol><li>在Easy-mock中新建接口 <code>/gather/gather</code> 的GET请求，填下以下内容</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">&quot;code&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">     <span class="attr">&quot;flag&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;查询成功&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;data|10&quot;</span>: [&#123;</span><br><span class="line">     <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;@id&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;@cword(8,12)&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;summary&quot;</span>: <span class="string">&quot;@cword(20,40)&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;@cword(20,40)&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;sponsor&quot;</span>: <span class="string">&quot;@string&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;@image&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;starttime&quot;</span>: <span class="string">&quot;@date&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;endtime&quot;</span>: <span class="string">&quot;@date&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;@county(true)&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;enrolltime&quot;</span>: <span class="string">&quot;@date&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;state&quot;</span>: <span class="string">&quot;@string&quot;</span>,</span><br><span class="line">     <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;@string&quot;</span></span><br><span class="line">     &#125;]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>修改config文件下的 <code>dev.env.js</code> 中的BASE_API为你的服务器API</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;</span><br><span class="line">const merge = require(&#x27;webpack-merge&#x27;)</span><br><span class="line">const prodEnv = require(&#x27;./prod.env&#x27;)</span><br><span class="line">   </span><br><span class="line">module.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: &#x27;&quot;development&quot;&#x27;,</span><br><span class="line">  BASE_API: &#x27;&quot;http://2**.***.***.**0:7300/mock/5fdc3ea***11ebb66f1f/demo&quot;&#x27;,</span><br><span class="line">  MOCK: &#x27;true&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>我们尝试修改一个表格来展示数据。找到路径 <code>src\views\table\index.vue</code> ，然后填入如下内容</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-container&quot;&gt;</span><br><span class="line">    &lt;el-table :data=&quot;list&quot; border style=&quot;width: 100%&quot;&gt;</span><br><span class="line">    &lt;el-table-column  prop=&quot;id&quot;  label=&quot;活动ID&quot;   width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column  prop=&quot;name&quot;  label=&quot;活动名称&quot;  width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column  prop=&quot;sponsor&quot;  label=&quot;主办方&quot;  width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column  prop=&quot;address&quot;  label=&quot;活动地址&quot;   width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column  prop=&quot;starttime&quot;  label=&quot;开始日期&quot;  width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column  prop=&quot;endtime&quot;   label=&quot;结束日期&quot;   width=&quot;180&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">  &lt;/el-table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import gatheringApi from &#x27;@/api/gather&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">          list:[]</span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">        this.fetchData();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        fetchData()&#123;</span><br><span class="line">           gatheringApi.getList().then(response =&gt; &#123;</span><br><span class="line">                this.list=response.data</span><br><span class="line">           &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>找到路径 <code>src\api\table.js</code> ，然后填入如下内容</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;/gather/gather&#x27;</span>,</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>重新运行项目，浏览器访问控制台打印的地址，找到相应的菜单就能看到结果了。我们不断刷新能够看到显示的数据是不同的，显然，这比之前的数据更加真实，能够模拟真实数据，进行数据填充。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/20201221201238.png">   </p><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>到此文章结束。这里主要介绍了如何在腾讯云中搭建自己的EasyMock并且在Element-UI中使用它来为我们提供更为真实的数据。以上RestFul、Swagger等皆为铺垫，对接口信息有一个基本的认识和使用。</p><p>如果您喜欢这篇文章，请点赞、评论、收藏，您的支持将是我前进的动力。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用反射对业务代码进行统一处理</title>
      <link href="/_post/usingReflection/"/>
      <url>/_post/usingReflection/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h1><blockquote><p>使用反射在SpringBoot中对多个校验接口进行统一操作</p></blockquote><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p><a href="https://www.jianshu.com/p/9be58ee20dee">Java反射机制</a>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>项目那个有多个校验接口：比如身份证校验，手机号校验等，如果每个都对该次校验写一个校验方法，如果后期又出现其他组合的校验，最后会很繁琐，代码冗余，难以维护。那么这里使用反射对每个校验方法进行统一的操作，根据请求操作来判断使用那几个组合的校验方法。后期如果有新的校验添加起来也就很方便，容易维护。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><h2 id="服务层校验类"><a href="#服务层校验类" class="headerlink" title="服务层校验类"></a>服务层校验类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlackValidateService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 根据手机号判断是否在黑名单中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.p4.risk.entity.RiskRetCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/2 13:56</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RiskRetCode <span class="title">getPhone</span><span class="params">(String phone)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 根据身份证号判断是否在黑名单中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idCardNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.p4.risk.entity.RiskRetCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/2 13:56</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RiskRetCode <span class="title">getIdCardNum</span><span class="params">(String idCardNum)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 根据终端号判断是否在黑名单中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> termNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.p4.risk.entity.RiskRetCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/2 13:56</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RiskRetCode <span class="title">getTermNo</span><span class="params">(String termNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 根据银行卡号判断是否在黑名单中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cardNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.p4.risk.entity.RiskRetCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/2 13:57</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RiskRetCode <span class="title">getCardNum</span><span class="params">(String cardNum)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 根据营业执照号判断是否在黑名单中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> busLicenseNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.p4.risk.entity.RiskRetCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/2 13:57</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RiskRetCode <span class="title">getBusLicenseNo</span><span class="params">(String busLicenseNo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 根据基站号，小区号判断是否在黑名单中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stationNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cellId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.p4.risk.entity.RiskRetCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/2 13:57</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RiskRetCode <span class="title">getBaseStation</span><span class="params">(String stationNo, String cellId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：返回值类型是一个枚举类，返回键值对数据像00、99之类的，实现类就是校验逻辑了，接口方法统一使用“get+请求参数(首字母大写)”。特殊的是最后一个有两个参数，在控制器中会特殊处理，后面接着看。</strong></p><h2 id="反射实现控制器"><a href="#反射实现控制器" class="headerlink" title="反射实现控制器"></a>反射实现控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mposDataValidate&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MposDataValidateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mpos黑名单校验方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BlackValidateService validate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 利用反射将黑名单方法和参数进行绑定，根据参数key不同来查询不同的黑名单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 需要校验的参数：idCardNum，termNo，cardNum，busLicenseNo，stationNo，cellId，phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String , java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/2 13:22</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/dataValidator&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">dataValidator</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,Object&gt; param)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;mpos外放接口调用，校验黑名单传入参数:&quot;</span>+gson.toJson(param));</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (param.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            resultMap.put(<span class="string">&quot;rspCode&quot;</span>,<span class="string">&quot;99&quot;</span>);</span><br><span class="line">            resultMap.put(<span class="string">&quot;rspMsg&quot;</span>,<span class="string">&quot;接口数据参数为空&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;接口数据参数为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//基站号参数key</span></span><br><span class="line">            String stationNo = <span class="string">&quot;stationNo&quot;</span>;</span><br><span class="line">            <span class="comment">//小区号参数key</span></span><br><span class="line">            String cellId = <span class="string">&quot;cellId&quot;</span>;</span><br><span class="line">            <span class="comment">//基站黑名单方法名</span></span><br><span class="line">            String baseStationMethodName = <span class="string">&quot;getBaseStation&quot;</span>;</span><br><span class="line">            <span class="comment">//基站号参数value</span></span><br><span class="line">            String stationNoVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//小区号参数value</span></span><br><span class="line">            String cellIdVal = <span class="keyword">null</span>;</span><br><span class="line">            RiskRetCode result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//获得接口校验的class类对象</span></span><br><span class="line">            Class&lt;BlackValidateService&gt; cls = BlackValidateService.class;</span><br><span class="line">            <span class="comment">//遍历参数</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : param.entrySet()) &#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                String value = (String) entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(value))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//基站信息特殊处理</span></span><br><span class="line">                <span class="keyword">if</span> ((stationNo).equals(key))&#123;</span><br><span class="line">                    stationNoVal = value;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ((cellId).equals(key))&#123;</span><br><span class="line">                    cellIdVal = value;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//根据参数key获取方法名   getPhone...</span></span><br><span class="line">                String methodsName = <span class="string">&quot;get&quot;</span>+key.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+key.substring(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//根据方法名和方法参数确定某一个方法</span></span><br><span class="line">                Method method = cls.getMethod(methodsName, String.class);</span><br><span class="line">                <span class="comment">//执行，对方法进行访问赋值</span></span><br><span class="line">                result = (RiskRetCode)method.invoke(validate, value);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(result.getValue(), RiskRetCode.R00.getValue()))&#123;</span><br><span class="line">                    <span class="comment">//校验通过，进行下一个  00通过</span></span><br><span class="line">                    resultMap.put(<span class="string">&quot;rspCode&quot;</span>,RiskRetCode.R00.getValue());</span><br><span class="line">                    resultMap.put(<span class="string">&quot;rspMsg&quot;</span>,result.getDesc());</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//在黑名单中，直接返回    99不通过</span></span><br><span class="line">                    resultMap.put(<span class="string">&quot;rspCode&quot;</span>,RiskRetCode.R99.getValue());</span><br><span class="line">                    resultMap.put(<span class="string">&quot;rspMsg&quot;</span>,result.getDesc());</span><br><span class="line">                    <span class="keyword">return</span> resultMap;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//基站需要基站号和小区号</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(stationNoVal) &amp;&amp; StringUtils.isNotEmpty(cellIdVal))&#123;</span><br><span class="line">                <span class="comment">//根据方法名和方法参数确定某一个方法</span></span><br><span class="line">                Method method = cls.getMethod(baseStationMethodName, String.class, String.class);</span><br><span class="line">                <span class="comment">//执行，对方法进行访问赋值</span></span><br><span class="line">                result = (RiskRetCode)method.invoke(validate, stationNoVal,cellIdVal);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(result.getValue(), RiskRetCode.R00.getValue()))&#123;</span><br><span class="line">                resultMap.put(<span class="string">&quot;rspCode&quot;</span>,RiskRetCode.R00.getValue());</span><br><span class="line">                resultMap.put(<span class="string">&quot;rspMsg&quot;</span>,result.getDesc());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                resultMap.put(<span class="string">&quot;rspCode&quot;</span>,RiskRetCode.R99.getValue());</span><br><span class="line">                resultMap.put(<span class="string">&quot;rspMsg&quot;</span>,result.getDesc());</span><br><span class="line">                <span class="keyword">return</span> resultMap;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;mpos外放接口黑名单校验异常&quot;</span>,e);</span><br><span class="line">            resultMap.put(<span class="string">&quot;rspCode&quot;</span>,RiskRetCode.R99.getValue());</span><br><span class="line">            resultMap.put(<span class="string">&quot;rspMsg&quot;</span>,<span class="string">&quot;mpos外放接口黑名单校验异常&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resultMap.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            resultMap.put(<span class="string">&quot;rspCode&quot;</span>, RiskRetCode.R99.getValue());</span><br><span class="line">            resultMap.put(<span class="string">&quot;rspMsg&quot;</span>, <span class="string">&quot;本次请求没有过任何黑名单接口&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;mpos外放接口调用，校验黑名单返回参数:&quot;</span>+gson.toJson(resultMap));</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:每一个接口校验都会通过参数来判断，特别的基站则需要基站小区两个都存在才会去校验，那么只需要单独判断一下就可以。代码注释还是比较详细的。</strong></p><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>其实当时博主是没有想到使用反射来做的，当收到任务时只想到了怎么if()if()的，哈哈哈，还是大佬告诉我，怎么轻巧，怎么统一，才想到能够这个样子做的，觉得眼光短浅，只注重了眼前，所以接到任务还是需要多思考思考，多回顾回顾，这样子才能成长，一起加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在SpringBoot项目中使用拦截器进行相关操作</title>
      <link href="/_post/springboot-make-interceptor/"/>
      <url>/_post/springboot-make-interceptor/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h1><blockquote><p>学习和记录SpringBoot项目中如何配置拦截器，以及如何使用拦截器机型权限控制。</p></blockquote><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>​    拦截器主要用来拦截各种请求并在拦截器中进行相应的处理，一般情况下用来进行权限校验，拦截登录转发，统一日志打印等操作。</p><p>​    拦截器有两种形式：</p><ol><li>实现HandlerInterceptor</li><li>继承HandlerInterceptorAdapter</li></ol><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>利用拦截器对多个菜单进行权限控制，只有勾选指定权限的人才能够查看该列表全部数据，其他的必须数据某限定条件才能够进行查询。</p><p>考虑到如果在每个菜单控制器中对参数和指定权限进行过滤和控制的话，改动文件太多并且重复代码太多，所以使用拦截器对指定路径的请求进行拦截，在拦截器中记性统一处理，那么只在新增加的类中操作就能实现所有指定菜单的权限控制。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><h2 id="自定义拦截器类"><a href="#自定义拦截器类" class="headerlink" title="自定义拦截器类"></a>自定义拦截器类</h2><h3 id="实现HandlerInterceptor"><a href="#实现HandlerInterceptor" class="headerlink" title="实现HandlerInterceptor"></a>实现HandlerInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交给Spring管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//日志打印</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryBlackControlInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 控制校验是否拥有查看全部的权限，没有则必须携带指定参数访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 在进入控制器前执行此操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/8 18:01</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;黑名单权限校验拦截器&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;request请求地址path[&#123;&#125;] uri[&#123;&#125;] url[&#123;&#125;]&quot;</span>, request.getServletPath(),</span><br><span class="line">                request.getRequestURI(),request.getRequestURL());</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//是否具有查看全部的权限</span></span><br><span class="line">        <span class="keyword">boolean</span> blacklistMenuControl = subject.isPermitted(<span class="string">&quot;queryALLBlack:view&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;是否存在查看全部的权限:&#123;&#125;&quot;</span>,blacklistMenuControl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!blacklistMenuControl)&#123;</span><br><span class="line">            <span class="comment">//没有权限判断是否存在指定的查询条件</span></span><br><span class="line">            <span class="comment">//返回路径</span></span><br><span class="line">            String url = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//提示语</span></span><br><span class="line">            String alert = <span class="keyword">null</span>;</span><br><span class="line">            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            Set&lt;Map.Entry&lt;String, String[]&gt;&gt; entries = parameterMap.entrySet();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//匹配黑名单菜单</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; entry : entries) &#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                String[] value = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, <span class="string">&quot;phone&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isBlank(value[<span class="number">0</span>]))&#123;</span><br><span class="line">                        url = <span class="string">&quot;/phoneBlack/getPhoneBlack&quot;</span>;</span><br><span class="line">                        alert = <span class="string">&quot;请输入手机号&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, <span class="string">&quot;idCardNum&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isBlank(value[<span class="number">0</span>]))&#123;</span><br><span class="line">                        url = <span class="string">&quot;/idCardNumBlack/getIdCardNumBlack&quot;</span>;</span><br><span class="line">                        alert = <span class="string">&quot;请输入身份证号&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//是否存在需要返回的内容</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(url) &amp;&amp; StringUtils.isNotBlank(alert)) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;黑名单查询校验不通过&quot;</span>);</span><br><span class="line">                response.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">                PrintWriter writer = response.getWriter();</span><br><span class="line">                writer.println(<span class="string">&quot;&lt;script language=&#x27;javascript&#x27;&gt;&quot;</span>);</span><br><span class="line">                writer.println(<span class="string">&quot;window.location.href = &#x27;&quot;</span>+url+<span class="string">&quot;&#x27;;&quot;</span>);</span><br><span class="line">                writer.println(<span class="string">&quot;alert(&#x27;&quot;</span>+alert+<span class="string">&quot;&#x27;);&quot;</span>);</span><br><span class="line">                writer.println(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;黑名单权限通过&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 在执行完控制器之后，视图渲染之前执行此操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 在试图渲染之后执行此操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                                Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承HandlerInterceptorAdapter"><a href="#继承HandlerInterceptorAdapter" class="headerlink" title="继承HandlerInterceptorAdapter"></a>继承HandlerInterceptorAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交给Spring管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//日志打印</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryBlackControlInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 控制校验是否拥有查看全部的权限，没有则必须携带指定参数访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 在进入控制器前执行此操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/8 18:01</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;黑名单权限校验拦截器&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;request请求地址path[&#123;&#125;] uri[&#123;&#125;] url[&#123;&#125;]&quot;</span>, request.getServletPath(),</span><br><span class="line">                request.getRequestURI(),request.getRequestURL());</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//是否具有查看全部的权限</span></span><br><span class="line">        <span class="keyword">boolean</span> blacklistMenuControl = subject.isPermitted(<span class="string">&quot;queryALLBlack:view&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;是否存在查看全部的权限:&#123;&#125;&quot;</span>,blacklistMenuControl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!blacklistMenuControl)&#123;</span><br><span class="line">            <span class="comment">//没有权限判断是否存在指定的查询条件</span></span><br><span class="line">            <span class="comment">//返回路径</span></span><br><span class="line">            String url = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//提示语</span></span><br><span class="line">            String alert = <span class="keyword">null</span>;</span><br><span class="line">            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            Set&lt;Map.Entry&lt;String, String[]&gt;&gt; entries = parameterMap.entrySet();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//匹配黑名单菜单（只需要在这里根据菜单返回不同的信息和路径就可以了）</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; entry : entries) &#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                String[] value = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, <span class="string">&quot;phone&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isBlank(value[<span class="number">0</span>]))&#123;</span><br><span class="line">                        url = <span class="string">&quot;/phoneBlack/getPhoneBlack&quot;</span>;</span><br><span class="line">                        alert = <span class="string">&quot;请输入手机号&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, <span class="string">&quot;idCardNum&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isBlank(value[<span class="number">0</span>]))&#123;</span><br><span class="line">                        url = <span class="string">&quot;/idCardNumBlack/getIdCardNumBlack&quot;</span>;</span><br><span class="line">                        alert = <span class="string">&quot;请输入身份证号&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//是否存在需要返回的内容</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(url) &amp;&amp; StringUtils.isNotBlank(alert)) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;黑名单查询校验不通过&quot;</span>);</span><br><span class="line">                response.setContentType(<span class="string">&quot;text/html; charset=utf-8&quot;</span>);</span><br><span class="line">                PrintWriter writer = response.getWriter();</span><br><span class="line">                writer.println(<span class="string">&quot;&lt;script language=&#x27;javascript&#x27;&gt;&quot;</span>);</span><br><span class="line">                writer.println(<span class="string">&quot;window.location.href = &#x27;&quot;</span>+url+<span class="string">&quot;&#x27;;&quot;</span>);</span><br><span class="line">                writer.println(<span class="string">&quot;alert(&#x27;&quot;</span>+alert+<span class="string">&quot;&#x27;);&quot;</span>);</span><br><span class="line">                writer.println(<span class="string">&quot;&lt;/script&gt;&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;黑名单权限通过&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明:这里对权限控制只需要用到 <code>preHandle</code> 就可以了，所以选择继承的方式完成。</strong></p><h2 id="自定义拦截器配置类"><a href="#自定义拦截器配置类" class="headerlink" title="自定义拦截器配置类"></a>自定义拦截器配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryBlackControlConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入拦截器类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryBlackControlInterceptor queryBlackControlInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 拦截菜单权限控制路径（拦截菜单很多，这里举两个例子）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/12/8 17:59</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可变参数长度（需要被拦截的请求路径）</span></span><br><span class="line">        <span class="comment">//将拦截器类注册到配置中</span></span><br><span class="line">        registry.addInterceptor(queryBlackControlInterceptor).addPathPatterns(</span><br><span class="line">                <span class="string">&quot;/phoneBlack/getPhoneBlackList&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/idCardNumBlack/getIdCardNumBlackList&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h1><p>本地测试进行三次请求（1.没有权限，没有参数、2.没有权限，有参数、3.有权限，没有参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8111/phoneBlack/getPhoneBlackList</span><br></pre></td></tr></table></figure><p>控制台打印结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INFO 2020-12-15 16:23:04.440 黑名单权限校验拦截器</span><br><span class="line">INFO 2020-12-15 16:23:04.440 request请求地址url[http://127.0.0.1:8111/phoneBlack/getPhoneBlackList]</span><br><span class="line">INFO 2020-12-15 16:23:04.451 是否存在查看全部的权限:false</span><br><span class="line">INFO 2020-12-15 16:23:40.440 黑名单查询校验不通过</span><br><span class="line"></span><br><span class="line">INFO 2020-12-15 16:25:10.922 黑名单权限校验拦截器</span><br><span class="line">INFO 2020-12-15 16:25:10.922 request请求地址url[http://127.0.0.1:8111/phoneBlack/getPhoneBlackList]</span><br><span class="line">INFO 2020-12-15 16:25:10.929 是否存在查看全部的权限:false</span><br><span class="line">INFO 2020-12-15 16:25:10.929 黑名单权限通过</span><br><span class="line"></span><br><span class="line">INFO 2020-12-15 16:27:20.964 黑名单权限校验拦截器</span><br><span class="line">INFO 2020-12-15 16:27:20.964 request请求地址url[http://127.0.0.1:8111/phoneBlack/getPhoneBlackList]</span><br><span class="line">INFO 2020-12-15 16:27:20.971 是否存在查看全部的权限:true</span><br><span class="line">INFO 2020-12-15 16:27:20.972 黑名单权限通过</span><br></pre></td></tr></table></figure><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>所有请求都会走拦截器，但是只会拦截配置的请求路径，一般拦截器做的最普遍的就是全部拦截，放开静态文件和登录也之类的操作。</p><p><strong>草色烟光残照里，无言谁会凭阑意</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/_post/hello-world/"/>
      <url>/_post/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客同步声明</title>
      <link href="/_post/statement/"/>
      <url>/_post/statement/</url>
      
        <content type="html"><![CDATA[<h1 id="博客同步声明"><a href="#博客同步声明" class="headerlink" title="博客同步声明"></a>博客同步声明</h1><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=1lp009lru0639">https://cloud.tencent.com/developer/support-plan?invite_code=1lp009lru0639</a></p>]]></content>
      
      
      <categories>
          
          <category> 声明 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 声明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教自己学Dubbo</title>
      <link href="/_post/teach-me-about-Dubbo/"/>
      <url>/_post/teach-me-about-Dubbo/</url>
      
        <content type="html"><![CDATA[<p>本文章中的Demo案例已经同步至gitee，供各位参考。</p><p>Demo地址：<a href="https://gitee.com/lemon_ant/dubbo-demo.git">https://gitee.com/lemon_ant/dubbo-demo.git</a></p><h1 id="zookeeper-amp-dubbo简介"><a href="#zookeeper-amp-dubbo简介" class="headerlink" title="zookeeper&amp;dubbo简介"></a>zookeeper&amp;dubbo简介</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/dubbo_20201203173725.png"></p><h2 id="节点角色说明"><a href="#节点角色说明" class="headerlink" title="节点角色说明"></a>节点角色说明</h2><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td><code>Provider</code></td><td>暴露服务的服务提供方</td></tr><tr><td><code>Consumer</code></td><td>调用远程服务的服务消费方</td></tr><tr><td><code>Registry</code></td><td>服务注册与发现的注册中心</td></tr><tr><td><code>Monitor</code></td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td><code>Container</code></td><td>服务运行容器</td></tr></tbody></table><h2 id="调用关系说明"><a href="#调用关系说明" class="headerlink" title="调用关系说明"></a>调用关系说明</h2><ol><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><p>Dubbo 架构具有以下几个特点，分别是连通性、健壮性、伸缩性、以及向未来架构的升级性。</p><h1 id="zookeeper安装"><a href="#zookeeper安装" class="headerlink" title="zookeeper安装"></a>zookeeper安装</h1><p>下载zookeeper.tar.gz  </p><p><a href="https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz">https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz</a></p><p>上传到centos上、</p><p>解压使用命令解压在/usr/local目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zookeeper.tar.gz  -C /usr/local   </span><br></pre></td></tr></table></figure><p>zookeeper目录下创建<code>data</code>文件夹存放数据，修改配置<code>conf</code>下的<code>zoo_sample.cfg</code>名为<code>zoo.cfg</code>（默认加载zoo.cfg）。   </p><p>修改<code>zoo.cfg</code>的<code>dataDir</code>参数为刚才创建的目录，保存退出。</p><h1 id="zookeeper启动"><a href="#zookeeper启动" class="headerlink" title="zookeeper启动"></a>zookeeper启动</h1><p>启动的前提是需要安装jdk</p><blockquote><p>作者：疯子加天才</p><p>标题：centos安装jdk1.8的三种方法</p><p>文章链接：<a href="https://www.cnblogs.com/telwanggs/p/11546751.html">https://www.cnblogs.com/telwanggs/p/11546751.html</a></p></blockquote><p>在zookeeper目录下使用   <code>./zkServer.sh start</code>  启动</p><p><code>./zkServer.sh status</code> 查看运行状态    <code>standalone</code> 代表单机版</p><p><code>./zkServer.sh stop</code>  停止</p><h1 id="dubbo-admin可视化界面"><a href="#dubbo-admin可视化界面" class="headerlink" title="dubbo-admin可视化界面"></a>dubbo-admin可视化界面</h1><p>dubbo-admin：<a href="https://github.com/apache/incubator-dubbo/releases/tag/dubbo-2.6.0">https://github.com/apache/incubator-dubbo/releases/tag/dubbo-2.6.0</a></p><p>安装<code>dubbo-admin.war</code>放在本机tomcat中的wabapps目录，启动tomcat，待<code>dubbo-admin.war</code>解压后，进入目录<code>dubbo-admin-2.6.0\WEB-INF\</code>找到<code>dubbo.properties</code>配置文件，修改配置为zookeeper的IP地址，重新启动tomcat。</p><p>浏览器访问地址：<a href="http://127.0.0.1:8080/dubbo-admin-2.6.0">http://127.0.0.1:8080/dubbo-admin-2.6.0</a>  账号信息：root   root  </p><p>里面就是所有信息<code>home &gt; governance &gt; applications</code>能够看到注册上去的接口信息。</p><h1 id="Dubbo服务提供方"><a href="#Dubbo服务提供方" class="headerlink" title="Dubbo服务提供方"></a>Dubbo服务提供方</h1><p>创建一个空的maven项目，新建modul作为服务提供方。dubbo_provider。</p><p>导入pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hkrt<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo_provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建service层接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="meta">@Service</span> <span class="comment">//发布服务必须使用Dubbo提供的service注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext-service.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--每个Dubbo应用（服务提供方和消费方）都需要指定一个唯一的名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbo_provider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定Dubbo的注册中心，部署zookeeper的地方--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://IP:2181&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定协议和端口,只在提供方配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dubbo:service interface=&quot;com.hkrt.service.HelloService&quot; ref=&quot;helloService&quot; protocol=&quot;dubbo&quot; /&gt;--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--1、注解形式：指定包扫描路径，用于发布dubbo服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.hkrt.service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:annotation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过maven插件启动服务provider，查看dubbo-admin发现已经存在HelloService的相关信息。</p><h1 id="Dubbo服务消费方"><a href="#Dubbo服务消费方" class="headerlink" title="Dubbo服务消费方"></a>Dubbo服务消费方</h1><p>新建modul作为服务提供方。dubbo_consumer</p><p>同样和provider相同的pom文件依赖。</p><p>创建一个和服务提供方相同的包package，创建controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>   <span class="comment">//订阅zookeeper，查找相关服务</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/say&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;响应成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloService.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，实现支持注解的IOC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支持mvc注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--每个Dubbo应用（服务提供方和消费方）都需要指定一个唯一的名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbo_customer&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定Dubbo的注册中心，部署zookeeper的地方--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span>  <span class="attr">address</span>=<span class="string">&quot;zookeeper://IP:2181&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1、注解形式：指定包扫描路径，用于发布dubbo服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.hkrt.controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过maven插件启动服务consumer，查看dubbo-admin发现已经存在HelloService的相关信息。</p><h1 id="案例回顾"><a href="#案例回顾" class="headerlink" title="案例回顾"></a>案例回顾</h1><p>需要在impl类上添加注解@service    </p><p>注意这里的service已经是 spring提供的  现在要使用Dubbo提供的service注解  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.dubbo.config.annotation.Service</span><br></pre></td></tr></table></figure><p><strong>问题</strong>：案例中服务提供方和服务消费方里面都会存在HelloService接口，这样做是否合理？有没有更好的方法？</p><p><strong><em>答</em></strong>：这种做法不好，同一个接口复制了两份，放于两个服务中，不利于维护，更好的方式是单独创建一个maven工程，将接口全部放到这个maven工程中，需要依赖此接口的工程只需要在自己的pom.xml中引入坐标即可。</p><p><strong>问题</strong>：在服务的消费方里面只是引用了HelloService接口，并没有实现类，那么Dubbo是如何实现远程调用的？</p><p><strong><em>答</em></strong>：Dubbo底层是基于代理技术为HelloService接口创建代理对象，远程调用时通过此代理对象完成的，可以通过开发工具的Debug功能查看此代理对象的内部结构，另外，Dubbo实现网络传输是基于Netty框架完成的。</p><p><strong>问题</strong>：使用zookeeper作为服务的注册中心，默认单机版运行，如何防止zookeeper单点故障呢？</p><p><strong><em>答</em></strong>：zookeeper支持集群模式，可以配置zookeeper集群来达到zookeeper服务的高可用，防止单点故障的发生。</p><h1 id="加入log4j日志"><a href="#加入log4j日志" class="headerlink" title="加入log4j日志"></a>加入log4j日志</h1><p>创建log4j.properties文件放于resources下，spring自动加载</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 设置###</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug, stdout</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出信息到控制抬 ###</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Threshold</span> = <span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span> = <span class="string">System.err</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出DEBUG 级别以上的日志到=E://logs/error.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.D</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.D.File</span> = <span class="string">C:/Users/Surpass/Desktop/log.log</span></span><br><span class="line"><span class="meta">log4j.appender.D.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.D.Threshold</span> = <span class="string">DEBUG </span></span><br><span class="line"><span class="meta">log4j.appender.D.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.D.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出ERROR 级别以上的日志到=E://logs/error.log ###</span></span><br><span class="line"><span class="meta">log4j.appender.E</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.E.File</span> =<span class="string">E://logs/error.log </span></span><br><span class="line"><span class="meta">log4j.appender.E.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.E.Threshold</span> = <span class="string">ERROR </span></span><br><span class="line"><span class="meta">log4j.appender.E.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.E.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br></pre></td></tr></table></figure><h1 id="Dubbo相关配置"><a href="#Dubbo相关配置" class="headerlink" title="Dubbo相关配置"></a>Dubbo相关配置</h1><h2 id="包扫描"><a href="#包扫描" class="headerlink" title="包扫描"></a>包扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.hkrt.service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:annotation</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表示包扫描，作用是扫描改包下的所有了类，存在相关的注解。</p><p>如果不使用包扫描，可以通过配置的方式进行注册发布服务。</p><p>服务提供方：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--推荐注解开发，二者选其一--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1、注解形式：指定包扫描路径，用于发布dubbo服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.hkrt.service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:annotation</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2、配置形式：通过bean的方式进行服务的注册（这是服务提供方）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.hkrt.service.impl.HelloServiceImpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.hkrt.service.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>服务消费方：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--推荐注解开发，两者只存在其一--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1、注解形式：指定包扫描路径，用于发布dubbo服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.hkrt.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2、配置形式：配置reference进行实例，相当于&lt;bean/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.hkrt.service.HelloService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>配置的方式只能进行单一的接口配置，如果有多个服务，那么就很繁琐了。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相关协议的介绍请移步博客</p><blockquote><p>作者：xiaojin21cen</p><p>名称：dubbo 支持的9种协议</p><p>文章地址：<a href="https://blog.csdn.net/xiaojin21cen/article/details/79834222">https://blog.csdn.net/xiaojin21cen/article/details/79834222</a></p></blockquote><h2 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这个配置主要是用在服务的消费端，如果不配置则默认为true，Dubbo缺省会在启动的时候检查依赖的服务是否可用，不可用是会抛出异常，阻止Spring进行初始化完成，以便上线时，及时发现问题，可以通过将check的值修改为false关闭检查。</p><p>待上线时设置为true</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>Dubbo内置了4种负载均衡策略:</p><ol><li>RandomLoadBalance:随机负载均衡。随机的选择一个。是Dubbo的<strong>默认</strong>负载均衡策略。</li><li>RoundRobinLoadBalance:轮询负载均衡。轮询选择一个。</li><li>LeastActiveLoadBalance:最少活跃调用数，相同活跃数的随机。活跃数指调用前后计数差。使慢的 Provider 收到更少请求，因为越慢的 Provider 的调用前后计数差会越大。</li><li>ConsistentHashLoadBalance:一致性哈希负载均衡。相同参数的请求总是落在同一台机器上。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在服务消费方配置负载均衡</span></span><br><span class="line"><span class="meta">@Reference(check=false,loadbalance=&quot;random&quot;)</span></span><br><span class="line"><span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/say&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;响应成功&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> helloService.sayHello(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在服务提供者配置负载均衡</span></span><br><span class="line"><span class="meta">@Service(loadbalance = &quot;random&quot;)</span>   <span class="comment">//发布服务必须使用Dubbo提供的service注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多负载均衡，请移步Dubbo官方文档：</p><p><a href="http://dubbo.apache.org/zh-cn/blog/dubbo-loadbalance.html">http://dubbo.apache.org/zh-cn/blog/dubbo-loadbalance.html</a></p><p>这个案例里面，修改端口号来模拟多台并行的服务提供方，启动服务provider和consumer，访问consumer。</p><h1 id="解决Dubbo无法发布被事务代理的service问题"><a href="#解决Dubbo无法发布被事务代理的service问题" class="headerlink" title="解决Dubbo无法发布被事务代理的service问题"></a>解决Dubbo无法发布被事务代理的service问题</h1><p>如果在服务提供者注册的类上面添加事务注解@Transactinal事务控制后，发现服务就发布不成功了，原因是因为事务控制的底层原理是为服务提供者类创建代理对象，而默认情况下Spring是基于JDK动态代理方式创建代理对象，而代理对象的完成类名为com.sunproxy.$Proxy–(后面是数字)，导致Dubbo在发布服务的时候进行包匹配匹配不到。</p><h2 id="问题展示"><a href="#问题展示" class="headerlink" title="问题展示"></a>问题展示</h2><p>使用dubbo坐标版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在applicationContext-service.xml中添加事务管理器和连接池相关配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--连接数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/dow_jones&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后在HelloServiceImpl类添加@Transactinal,完成后启动provider，在dubbo-admin中发现并没有服务提供者进行注册，只有一个服务消费者。</p><p>如果修改成cglib动态代理，回事什么样子？</p><p>修改配置applicationContext-service.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这样子就使用的是cglib代理。那么启动provider看到有注册信息。</p><p>但是它的注册信息是这样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.aop.SpringProxy</span><br></pre></td></tr></table></figure><p>这样子还是访问不到的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在之前的基础上，需要在注册服务类上添加注解参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(interfaceClass = HelloService.class)</span>   <span class="comment">//发布服务必须使用Dubbo提供的service注解</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明确该服务实现的是HelloService.class的这个类，然后启动，查看dubbo-admin看结果，这时候发现provider注册的就是正确的接口服务了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务</span></span><br><span class="line">com.hkrt.service.HelloService</span><br><span class="line">    </span><br><span class="line"><span class="comment">//服务地址</span></span><br><span class="line">dubbo:<span class="comment">//ip:20880/com.hkrt.service.HelloService?anyhost=true&amp;application=dubbo_provider&amp;dubbo=2.6.0&amp;generic=false&amp;interface=com.hkrt.service.HelloService&amp;methods=sayHello&amp;pid=24892&amp;side=provider×tamp=1603959532358</span></span><br></pre></td></tr></table></figure><h2 id="另述"><a href="#另述" class="headerlink" title="另述"></a>另述</h2><p>前面到在问题展示那里，我指定了dubbo坐标的版本号是2.6.0，博主在这个案例中发现，2.6.0以上的版本，即使使用jdk动态代理，也是能够将被事务管理的服务接口注册到zookeeper上去，并且能够成功访问。</p><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>您的支持和鼓励是我最大的动力，麻烦动动您高贵的小手，点赞，评论和收藏，感谢！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Dubbo </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java对压缩包的操作(解压缩)</title>
      <link href="/_post/processing-package/"/>
      <url>/_post/processing-package/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >如何用Java对文件进行加压和压缩</font></p><p>上篇文章说了项目中对根据URL提供的HTML代码中的文件URL进行下载，将下载后的文件存放在服务器上，但是文件下载下来都是ZIP压缩包。那么这篇就来看Java如何多文件进行解压缩操作。</p><h1 id="一、正文"><a href="#一、正文" class="headerlink" title="一、正文"></a>一、正文</h1><p>这里没有使用其他的jar包，利用Java中的IO流直接对文件进行操作，为了方便将文件放入桌面，路径为：<code>C:\Users\Surpass\Desktop</code>。</p><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><p>博主尽量在代码中添加明确的注释，以便于理解，所以直接贴代码了。</p><h2 id="1-单文件压缩"><a href="#1-单文件压缩" class="headerlink" title="1.单文件压缩"></a>1.单文件压缩</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.zip</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 单文件压缩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/16 10:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleZipCompression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InputStream inputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ZipOutputStream zipOutputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OutputStream outputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String filePath = <span class="string">&quot;C:\\Users\\Surpass\\Desktop\\Linux就该这么学 高清晰PDF.pdf&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//文件输入流</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//压缩输出路径的流   压缩文件路径+压缩文件名前缀（Linux就该这么学 高清晰PDF）+.zip</span></span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(file.getParent()+<span class="string">&quot;\\&quot;</span>+file.getName().substring(<span class="number">0</span>,file.getName().lastIndexOf(<span class="string">&quot;.&quot;</span>))+<span class="string">&quot;.zip&quot;</span>);</span><br><span class="line">            zipOutputStream = <span class="keyword">new</span> ZipOutputStream(outputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//压缩包内文件的名字   Linux就该这么学 高清晰PDF.pdf</span></span><br><span class="line">            zipOutputStream.putNextEntry(<span class="keyword">new</span> ZipEntry(file.getName()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出文件</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                zipOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (zipOutputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    zipOutputStream.closeEntry();</span><br><span class="line">                    zipOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-单文件解压"><a href="#2-单文件解压" class="headerlink" title="2.单文件解压"></a>2.单文件解压</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.zip</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 压缩包解压</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/16 10:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleZipUnpackThe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InputStream inputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ZipInputStream bi;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OutputStream fileOutputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String zipPath = <span class="string">&quot;C:\\Users\\Surpass\\Desktop\\Bypass_1.14.2\\Bypass\\使用须知.zip&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//对中文名字进行了处理</span></span><br><span class="line">            ZipFile zipFile = <span class="keyword">new</span> ZipFile(zipPath, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">            String zipFileParentPath = zipFile.getName().substring(<span class="number">0</span>,zipFile.getName().lastIndexOf(<span class="string">&quot;\\&quot;</span>));</span><br><span class="line">            System.out.println(zipFileParentPath);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获得压缩包内文件</span></span><br><span class="line">            Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</span><br><span class="line">                ZipEntry zipEntry = entries.nextElement();</span><br><span class="line">                <span class="comment">//输出文件流   压缩包路径+文件</span></span><br><span class="line">                fileOutputStream = <span class="keyword">new</span> FileOutputStream(zipFileParentPath+<span class="string">&quot;\\&quot;</span> + zipEntry.getName());</span><br><span class="line">                <span class="comment">//写文件</span></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((len = bi.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    fileOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bi!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    bi.closeEntry();</span><br><span class="line">                    bi.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fileOutputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    fileOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-多文件压缩（保留原有结构）"><a href="#3-多文件压缩（保留原有结构）" class="headerlink" title="3.多文件压缩（保留原有结构）"></a>3.多文件压缩（保留原有结构）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.zip</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 多文件根据目录结构压缩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/17 10:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleFilesCompression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InputStream inputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ZipOutputStream zipOutputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OutputStream outputStream;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String filePath = <span class="string">&quot;C:\\Users\\Surpass\\Desktop\\Bypass_1.14.25&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//需要压缩的文件夹</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">            String dirName = file.getName();</span><br><span class="line">            String fileParentPath = file.getParent();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//需要生成的压缩包名称和生成路径</span></span><br><span class="line">            outputStream = <span class="keyword">new</span> FileOutputStream(fileParentPath+<span class="string">&quot;\\&quot;</span>+dirName+<span class="string">&quot;.zip&quot;</span>);</span><br><span class="line">            zipOutputStream = <span class="keyword">new</span> ZipOutputStream(outputStream);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取目录结构</span></span><br><span class="line">            Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map = getFile(file, map);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过key遍历map</span></span><br><span class="line">            Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">            Iterator&lt;String&gt; iterator = keySet.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                <span class="comment">//key(当是空文件夹的时候key为目录，当文件夹有文件的时候key为文件名)</span></span><br><span class="line">                String fileName = iterator.next();</span><br><span class="line">                <span class="comment">//value(当是空文件夹的时候value为&quot;&quot;，当文件夹有文件的时候value为目录)</span></span><br><span class="line">                String path = map.get(fileName);</span><br><span class="line">                <span class="keyword">if</span> (path.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//空文件夹</span></span><br><span class="line">                    <span class="comment">//这里获取从压缩包开始的路径   \Bypass\Logs&gt;&gt;&gt;&gt;&gt;&gt;2020-09-12.txt  \Bypass\Music</span></span><br><span class="line">                    String[] basePath = fileName.split(dirName);</span><br><span class="line">                    String parent = basePath[<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//压入压缩包流文件的存放路径  \Bypass\Music</span></span><br><span class="line">                    zipOutputStream.putNextEntry(<span class="keyword">new</span> ZipEntry(parent+<span class="string">&quot;/&quot;</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//正常文件</span></span><br><span class="line">                    <span class="comment">//文件转输入流</span></span><br><span class="line">                    inputStream = <span class="keyword">new</span> FileInputStream(path+<span class="string">&quot;\\&quot;</span>+fileName);</span><br><span class="line">                    <span class="comment">//这里获取从压缩包开始的路径   \Bypass\Logs&gt;&gt;&gt;&gt;&gt;&gt;2020-09-12.txt  \Bypass&gt;&gt;&gt;&gt;&gt;&gt;使用须知.txt</span></span><br><span class="line">                    String[] basePath = path.split(dirName);</span><br><span class="line">                    String parent = basePath[<span class="number">1</span>];</span><br><span class="line">                    zipOutputStream.putNextEntry(<span class="keyword">new</span> ZipEntry(parent +<span class="string">&quot;\\&quot;</span>+fileName));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//写文件</span></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((len = inputStream.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    zipOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (zipOutputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    zipOutputStream.closeEntry();</span><br><span class="line">                    zipOutputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 使用递归的方式向map中存入目录结构</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file, 需要压缩的文件</span></span><br><span class="line"><span class="comment">     *        map 存放目录结构</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.Map&lt;java.lang.String,java.lang.String&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/10/17 11:26</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">getFile</span><span class="params">(File file,Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="comment">//如果是空文件夹的时候使用路径作为key</span></span><br><span class="line">        <span class="keyword">if</span> (files.length==<span class="number">0</span>)&#123;</span><br><span class="line">            map.put(file.getAbsolutePath(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file1.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                getFile(file1,map);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (file1.isFile())&#123;</span><br><span class="line">                <span class="comment">//文件作为key，路径作为value</span></span><br><span class="line">                map.put(file1.getName(),file1.getParent());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-多文件解压（保留原有结构）"><a href="#4-多文件解压（保留原有结构）" class="headerlink" title="4.多文件解压（保留原有结构）"></a>4.多文件解压（保留原有结构）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Package</span> com.hkrt.demo.zip</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 压缩包解压保持原有的目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/17 11:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleFilesUnpackThe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OutputStream outputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InputStream inputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ZipInputStream bi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String ZipPath = <span class="string">&quot;C:\\Users\\Surpass\\Desktop\\Bypass.zip&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//对中文名字进行了处理</span></span><br><span class="line">            ZipFile zipFile = <span class="keyword">new</span> ZipFile(ZipPath, Charset.forName(<span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">            <span class="comment">//压缩包的名字，不包含后缀  .zip</span></span><br><span class="line">            String zipName = zipFile.getName().substring(<span class="number">0</span>, zipFile.getName().indexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            <span class="comment">//压缩包所在的路径</span></span><br><span class="line">            String zipFileParentPath = zipFile.getName().substring(<span class="number">0</span>,zipFile.getName().lastIndexOf(<span class="string">&quot;\\&quot;</span>));</span><br><span class="line"></span><br><span class="line">            Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</span><br><span class="line">                ZipEntry entry = entries.nextElement();</span><br><span class="line">                <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//空文件夹，直接创建  压缩包路径+压缩包名字+空文件夹路径</span></span><br><span class="line">                    File file = <span class="keyword">new</span> File(zipFileParentPath+<span class="string">&quot;\\&quot;</span>+zipName+<span class="string">&quot;\\&quot;</span>+entry);</span><br><span class="line">                    file.mkdirs();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//获取文件在压缩包内的路径</span></span><br><span class="line">                    String entryPath = entry.getName().substring(<span class="number">0</span>,entry.getName().lastIndexOf(<span class="string">&quot;\\&quot;</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//为存放的路径创建文件夹</span></span><br><span class="line">                    File file = <span class="keyword">new</span> File(zipFileParentPath+<span class="string">&quot;\\&quot;</span>+zipName+<span class="string">&quot;\\&quot;</span>+entryPath);</span><br><span class="line">                    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                        file.mkdirs();</span><br><span class="line">                    &#125;</span><br><span class="line">                    outputStream = <span class="keyword">new</span> FileOutputStream(zipFileParentPath+<span class="string">&quot;\\&quot;</span>+zipName+<span class="string">&quot;\\&quot;</span>+ entry.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//写文件</span></span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((len = bi.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bi!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    bi.closeEntry();</span><br><span class="line">                    bi.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看网上的例子说有什么jar能简单一下，博主这里没有尝试去看，既然这样写了，也算是一个不错的练习。当然，博主道行较浅，代码不规范是一方面，如果有什么不足之处，还望各位大牛批评指正。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据URL解析网页并保存相应文件</title>
      <link href="/_post/url-parse-and-save/"/>
      <url>/_post/url-parse-and-save/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><font color=#999AAA >根据URL解析HTML获取文件URL并下载存储</font></p><p>最近公司接入了一个平台的数据，给了一个连接，存放每天定时推的文件列表。我这里需要做的就是我要把这些文件下载下来，保存到服务器上，其他人那它去用。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h1 id="一、URL内容"><a href="#一、URL内容" class="headerlink" title="一、URL内容"></a>一、URL内容</h1><p>提供的URL使用用户名和密码登录进去长这个样子。这个是<code>&lt;body&gt;&lt;/body&gt;</code>部分，我主要处理这个部分。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/url_parse_20201203195432.png"></p><p>事实上他这个标签实在是不规律。只有后面的文件名使用<code>&lt;a&gt;&lt;/a&gt;</code>包括。所以只能对这个文件名做文章。</p><h1 id="二、需求"><a href="#二、需求" class="headerlink" title="二、需求"></a>二、需求</h1><p>每次定时访问这个URL，需要下载自己服务器上的存放位置没有的最新文件，那么需要一个记录值来记录最后下载的一个位置。</p><p>当是首次下载，那么没有这个记录值的时候，我只需要下载最新文件中后缀是“f”的压缩包，然后记录这个值。</p><p>当是后续下载，需要根据记录值下载它后面的所有文件，然后记录这个值。</p><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p>URL访问和解析使用dom4j的相关东西。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxen<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jcraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-贴代码（长代码警告）"><a href="#2-贴代码（长代码警告）" class="headerlink" title="2.贴代码（长代码警告）"></a>2.贴代码（长代码警告）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DowJonesFileUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InputStream inputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BufferedInputStream bi;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpURLConnection conn;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> URL httpUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OutputStream outputStream;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BufferedOutputStream bo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要登录的网站</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String baseURL = <span class="string">&quot;https://*******.com&quot;</span>;</span><br><span class="line">    <span class="comment">//记录值文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String recordFile = <span class="string">&quot;record.txt&quot;</span>;</span><br><span class="line">    <span class="comment">//文件存放位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String dirPath = <span class="string">&quot;/data/******&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定时任务每四个小时执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0/4 * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;文件下载开始&quot;</span>);</span><br><span class="line">        <span class="comment">//登录</span></span><br><span class="line">        FileUtils jones = <span class="keyword">new</span> FileUtils();</span><br><span class="line">        Connection.Response login = jones.login();</span><br><span class="line">        logger.info(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        Elements pre_a = jones.parse(login);</span><br><span class="line">        <span class="keyword">if</span> (pre_a ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取记录的文件信息，确定下载位置</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(dirPath+<span class="string">&quot;/&quot;</span>+recordFile);</span><br><span class="line">        <span class="comment">//把记录位置以后的文件，作为要下载的文件，集合</span></span><br><span class="line">        List&lt;String&gt; downURL = jones.getDownURL(pre_a, file);</span><br><span class="line">        <span class="keyword">if</span> (downURL.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;没有需要下载的文件&quot;</span>);</span><br><span class="line">            logger.info(<span class="string">&quot;文件下载结束&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;开始下载，剩余文件数量：&quot;</span>+downURL.size());</span><br><span class="line">        <span class="comment">//下载文件</span></span><br><span class="line">        downFile(downURL);</span><br><span class="line">        logger.info(<span class="string">&quot;文件下载结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.jsoup.Connection.Response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/10/15 11:11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Connection.<span class="function">Response <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection.Response login = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            login = Jsoup.connect(<span class="string">&quot;https://***************/XML/1815&quot;</span>)</span><br><span class="line">                    .data(<span class="string">&quot;Username&quot;</span>,<span class="string">&quot;****&quot;</span>)  <span class="comment">//账号</span></span><br><span class="line">                    .data(<span class="string">&quot;Password&quot;</span>,<span class="string">&quot;********&quot;</span>)  <span class="comment">//密码</span></span><br><span class="line">                    .header(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;*******&quot;</span>)  <span class="comment">//url网站访问权限 请求头里</span></span><br><span class="line">                    .method(Connection.Method.GET)</span><br><span class="line">                    .execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;登录异常：&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> login;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 登录解析html获取文件主体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> login</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.jsoup.select.Elements</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/10/15 11:09</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Elements <span class="title">parse</span><span class="params">(Connection.Response login)</span></span>&#123;</span><br><span class="line">        Document document = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (login ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            document = login.parse();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;解析异常：&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据html代码选择获取了所有的链接标签</span></span><br><span class="line">        Elements pre_a = document.select(<span class="string">&quot;pre a&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pre_a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 根据标签ELe获取需要加载的URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pre_a, 标签ELes</span></span><br><span class="line"><span class="comment">     *        baseURL, url前缀</span></span><br><span class="line"><span class="comment">     *        file 记录文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/10/14 18:40</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getDownURL</span><span class="params">(Elements pre_a,File file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取记录文件中的记录时间和全、增量标识</span></span><br><span class="line">        Double recordData = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">char</span> recordType = <span class="number">0</span>;</span><br><span class="line">        String record = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取记录文件中的记录值</span></span><br><span class="line">            Reader reader = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">            record = br.readLine();</span><br><span class="line">            <span class="keyword">if</span> (record!=<span class="keyword">null</span>&amp;&amp;record.trim()!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                String[] split = record.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                recordData = Double.valueOf(split[<span class="number">0</span>]);</span><br><span class="line">                recordType = split[<span class="number">1</span>].charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (br!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reader!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//标签中的text</span></span><br><span class="line">        List&lt;String&gt; textList = pre_a.eachText();</span><br><span class="line">        <span class="comment">//标签中的属性</span></span><br><span class="line">        List&lt;String&gt; hrefList = pre_a.eachAttr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">        <span class="comment">//获取记录值之后的文件URL，存入集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hrefList.size(); i++) &#123;</span><br><span class="line">            String href = hrefList.get(i);</span><br><span class="line">            String downURL = baseURL+href;</span><br><span class="line"></span><br><span class="line">            String text = textList.get(i);</span><br><span class="line">            <span class="comment">//URL过滤</span></span><br><span class="line">            <span class="keyword">if</span> (!text.endsWith(<span class="string">&quot;.zip&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当有记录值的时候，下载记录值以后的所有文件</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(record))&#123;</span><br><span class="line">                String[] textArr = text.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                Double fileData = Double.valueOf(textArr[<span class="number">4</span>]);</span><br><span class="line">                <span class="comment">//当前值和记录值相同</span></span><br><span class="line">                <span class="keyword">if</span> (fileData.equals(recordData))&#123;</span><br><span class="line">                    <span class="keyword">if</span> ( recordType==<span class="string">&#x27;f&#x27;</span> &amp;&amp; textArr[<span class="number">5</span>].charAt(<span class="number">0</span>)==<span class="string">&#x27;i&#x27;</span> )&#123;</span><br><span class="line">                        list.add(downURL);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fileData&gt;recordData)&#123;</span><br><span class="line">                    list.add(downURL);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当没有记录值的时候，只下载最新的全量(当倒数第二个是全量，那么直接跳出循环)</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(record))&#123;</span><br><span class="line">                <span class="keyword">char</span> flag = textList.get(i).charAt(textList.get(i).length() - <span class="number">5</span>);</span><br><span class="line">                <span class="keyword">if</span> (i==hrefList.size()-<span class="number">2</span>&amp;&amp;flag==<span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">                    list.add(downURL);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i==hrefList.size()-<span class="number">1</span>&amp;&amp;flag==<span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">                    list.add(downURL);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;需要下载的URL数量：&quot;</span>+list.size());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 这里是重点了，拿到了需要获取的URL，请求下载并保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> downURL, 需要下载的文件url</span></span><br><span class="line"><span class="comment">     *        dirPath, 保存文件路径</span></span><br><span class="line"><span class="comment">     *        recordPath 记录文件的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Surpass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/10/15 11:09</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">downFile</span><span class="params">(List&lt;String&gt; downURL)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> urlFlag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String url : downURL) &#123;</span><br><span class="line">                <span class="comment">//文件下载登录</span></span><br><span class="line">                httpUrl=<span class="keyword">new</span> URL(url);</span><br><span class="line">                conn=(HttpURLConnection) httpUrl.openConnection();</span><br><span class="line">                conn.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                conn.setRequestProperty(<span class="string">&quot;Authorization&quot;</span>,<span class="string">&quot;*******&quot;</span>);</span><br><span class="line">                conn.connect();</span><br><span class="line">                logger.info(url+<span class="string">&quot;:连接成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取输入流</span></span><br><span class="line">                inputStream = conn.getInputStream();</span><br><span class="line">                bi = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">                String fileName = url.substring(url.lastIndexOf(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">                <span class="comment">//获取输出流</span></span><br><span class="line">                outputStream = <span class="keyword">new</span> FileOutputStream(dirPath+fileName);</span><br><span class="line">                bo = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">10</span>];</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ( (len = bi.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    bo.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                &#125;</span><br><span class="line">                logger.info(<span class="string">&quot;上传URL文件到服务器成功:&quot;</span>+url);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录当前下载位置</span></span><br><span class="line">                String record = url.substring(<span class="number">69</span>, <span class="number">83</span>);</span><br><span class="line">                Writer recordWriter = <span class="keyword">new</span> FileWriter(dirPath+<span class="string">&quot;/&quot;</span>+recordFile);</span><br><span class="line">                BufferedWriter recordBf = <span class="keyword">new</span> BufferedWriter(recordWriter);</span><br><span class="line">                recordBf.write(record);</span><br><span class="line">                logger.info(<span class="string">&quot;上传记录文件record.txt成功&quot;</span>);</span><br><span class="line">                <span class="comment">//关闭</span></span><br><span class="line">                recordBf.flush();</span><br><span class="line">                recordBf.close();</span><br><span class="line">                recordWriter.close();</span><br><span class="line"></span><br><span class="line">                ++urlFlag;</span><br><span class="line">                logger.info(<span class="string">&quot;下载完成，剩余文件数量：&quot;</span>+(downURL.size()-urlFlag));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.info(<span class="string">&quot;下载失败&quot;</span>,e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bo!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    bo.flush();</span><br><span class="line">                    bo.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (bi!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    bi.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (outputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    conn.disconnect();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;输入流关闭异常&quot;</span>,e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-下载的文件"><a href="#3-下载的文件" class="headerlink" title="3.下载的文件"></a>3.下载的文件</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/url_parse_20201203195432.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一次这个任务结合了网页的解析，用Java下载文件，输入输出流等一些东西，本来文件是存放在sftp服务器的，后来需求改了。这是第一次在项目中使用网页解析，博主会在代码中加很多注释。这里记录下，可作为参考。</p><p>当然，代码还存在很多需要完善的地方，还请各位大佬指出不足，后续加倍努力。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> HTML </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批处理bat实现常用软件一键开启</title>
      <link href="/_post/task-bat/"/>
      <url>/_post/task-bat/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平时下班是发现大家都有一个习惯，就是下班都不喜欢关电脑，其中原因基本也都知道大同小异。</p><ul><li>如果线上出现问题，可以在家里远程公司的电脑，而不用火急火燎去公司。</li><li>每次开机都要打开N多个软件，费心，一天的好心情没了。</li><li>是一个大懒虫。</li></ul><p>那么，自己写一个批处理文件自动打开经常用到的软件岂不是很舒服？那么就是这里就写了个基本的批处理命令供大家参考，也希望各位提出意见来使这个更加完善。</p><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><p><font color=#999AAA >代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">:one</span><br><span class="line">rem IDEA</span><br><span class="line"><span class="built_in">cd</span> /d E:\IDEA\IntelliJ IDEA 2018.3.2\bin</span><br><span class="line">start idea64.exe</span><br><span class="line"><span class="built_in">set</span> aps=<span class="string">&quot;idea64.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 正在打开%aps%</span><br><span class="line">:IDEA</span><br><span class="line">tasklist | find /i <span class="string">&quot;idea64.exe&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%errorlevel%&quot;</span>==<span class="string">&quot;1&quot;</span> ( <span class="built_in">echo</span> 正在打开%aps% &amp;&amp; goto one ) <span class="keyword">else</span> ( <span class="built_in">echo</span> 已经成功打开%aps% &amp;&amp; goto two )</span><br><span class="line">@ping -n 2  127.0&gt;nul</span><br><span class="line">goto IDEA</span><br><span class="line"></span><br><span class="line">rem 进行下一个程序</span><br><span class="line">:two</span><br><span class="line">rem SQLyog.exe</span><br><span class="line"><span class="built_in">cd</span> /d E:\SQLyog12.5（2018）</span><br><span class="line">start SQLyog.exe</span><br><span class="line"><span class="built_in">set</span> aps=<span class="string">&quot;SQLyog.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 正在打开%aps%</span><br><span class="line">:SQLyog</span><br><span class="line">tasklist | find /i <span class="string">&quot;%aps%&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%errorlevel%&quot;</span>==<span class="string">&quot;1&quot;</span> ( <span class="built_in">echo</span> 正在打开%aps% &amp;&amp; goto two ) <span class="keyword">else</span> ( <span class="built_in">echo</span> 已经成功打开%aps% &amp;&amp; goto endline )</span><br><span class="line">@ping -n 2  127.0&gt;nul</span><br><span class="line">goto SQLyog</span><br><span class="line"></span><br><span class="line">:endline</span><br><span class="line"><span class="built_in">echo</span> 所有的程序已经打开</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>修改后缀<code>.bat</code>后执行的结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/task_bat_20201203195226.png"></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>代码中的<code>:two</code>通常作为最后一个程序，里面会跳转到<code>:endline</code>，如果添加相关常用程序可以在<code>:two</code>前面添加从<code>:one···goto IDEA</code>代码，然后根据自己的相应路径进行更改。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>基本上这种的一次设定后面基本不会再变了，所以只有第一次麻烦，后面就轻松了，如果需要开机自动执行这个bat文件的话，请把批处理文件放在路径<code>C:\Users\登录名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>，开机后登录就会自动执行这个文件啦。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot多文件配置根据环境加载不同配置</title>
      <link href="/_post/Springboot-profiles/"/>
      <url>/_post/Springboot-profiles/</url>
      
        <content type="html"><![CDATA[<p>在平时开发时，会发现公司的项目会不同的环境使用到不同的配置。如本地，测试，预发布，发布等环境，像数据库这些都要使用到不同的配置。如果只有一个配置文件，发布到不同环境的时候都要去修改一遍那简直就是遭罪，那么，如何实现SpringBoot根据需要去加载不同的配置文件？</p><h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><p>SpringBoot提供简单配置能够让我们进行不同配置文件的加载。</p><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p>这里简单的常见一个用户类和控制器模仿一般的逻辑，获取用户的信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.68<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.address = <span class="string">&quot;亚历山大&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.email = <span class="string">&quot;sing@example.com&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;custom.value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String customValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/userInfo/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSON <span class="title">getUserInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>String id)</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(id);</span><br><span class="line">        user.setMessage(customValue);</span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseObject(JSON.toJSONString(user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：这里利用Restful风格的请求方式，获取用户的个人信息，从配置文件中获取message复制给用户，然后以JSON的形式返回给页面。</p><p>这里来看配置配置文件</p><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span>  <span class="comment">#指定端口号</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">custom:</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">This</span> <span class="string">Is</span> <span class="string">Application</span>   <span class="comment">#自定义的value值（message）</span></span><br></pre></td></tr></table></figure><p>利用postman请求发现没有问题，<font color=red>注意看属性message的值</font>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/profiles_20201203182714.png" alt="1"></p><h2 id="进行多文件配置"><a href="#进行多文件配置" class="headerlink" title="进行多文件配置"></a>进行多文件配置</h2><p>application-dev.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span> <span class="comment">#指定端口号</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">custom:</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">This</span> <span class="string">Is</span> <span class="string">Application-dev</span>  <span class="comment">##自定义的value值（message）</span></span><br></pre></td></tr></table></figure><p>application-uat.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span>  <span class="comment">#指定端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">custom:</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">This</span> <span class="string">Is</span> <span class="string">Application-uat</span>  <span class="comment">#自定义的value值（message）</span></span><br></pre></td></tr></table></figure><p>application-pro.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8003</span> <span class="comment">#指定端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">custom:</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">This</span> <span class="string">Is</span> <span class="string">Application-pro</span>  <span class="comment">#自定义的value值（message）</span></span><br></pre></td></tr></table></figure><p>如果要启动使用不同的配置配置文件name就需要在<code>application.yml</code>中添加额外的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring：</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">uat</span></span><br></pre></td></tr></table></figure><p>这样在启动的时候就使用的是uat的配置了，启动查看message信息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/profiles_20201203182810.png" alt="2"></p><p>我们可以看到message的信息就是<code>application-uat.yml</code>里面配置的，同时还能注意到<font color=red>当我们<code>application.yml</code>和<code>application-uat.yml</code>进行相同的配置是，SpringBoot会优先使用指定配置profiles的值。如果没有才会去<code>application.yml</code>里面找。</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="Maven打包"><a href="#Maven打包" class="headerlink" title="Maven打包"></a>Maven打包</h2><p>那么说到了SpringBoot加载不同的配置文件启动，那么不妨说一下Maven根据不同环境用不同的配置文件打包。</p><p>在pom.xml中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    <span class="comment">&lt;!--为env起一个名字--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>uat<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">env</span>&gt;</span>uat<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>  <span class="comment">&lt;!--默认加载uat，实际根据环境需求--&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">env</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;！--build标签中添加如下的配置&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span>   <span class="comment">&lt;!--指定文件下--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span>      <span class="comment">&lt;!--动态配置--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">excludes</span>&gt;</span>       <span class="comment">&lt;!--去除多余的文件--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-dev.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-pro.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application-uat.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span>    <span class="comment">&lt;!--动态配置  $&#123;env&#125;--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span>     <span class="comment">&lt;!--包含加载的文件（env  默认加载uat 具体看配置）--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>application-$&#123;env&#125;.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>application.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后依次执行命令<code>mvn clean  ;  mvn package</code>进行打包，maven会根据你的配置去打包相应的文件，打包完成后如图包含的配置文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/profiles_20201203182748.png" alt="3"></p><p>使用postman去请求得到的结果，如图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/profiles_20201203182810.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章解决SpingMVC的创建和简单配置</title>
      <link href="/_post/SpringMVC/"/>
      <url>/_post/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="图解SpringMVC执行流程"><a href="#图解SpringMVC执行流程" class="headerlink" title="图解SpringMVC执行流程:"></a><strong>图解SpringMVC执行流程:</strong></h1><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/SpringMVC_20201203194831.png"></p><h1 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程:"></a><strong>SpringMVC执行流程:</strong></h1><ol><li><p>用户发送请求至前端控制器DispatcherServlet</p></li><li><p>DispatcherServlet收到请求调用处理器映射器HandlerMapping。</p></li><li><p>处理器映射器根据请求url找到具体的处理器，生成处理器执行链HandlerExecutionChain(包括处理器对象和处理器拦截器)一并返回给DispatcherServlet。</p></li><li><p>DispatcherServlet根据处理器Handler获取处理器适配器HandlerAdapter执行HandlerAdapter处理一系列的操作，如：参数封装，数据格式转换，数据验证等操作</p></li><li><p>执行处理器Handler(Controller，也叫页面控制器)。</p></li><li><p>Handler执行完成返回ModelAndView</p></li><li><p>HandlerAdapter将Handler执行结果ModelAndView返回到DispatcherServlet</p></li><li><p>DispatcherServlet将ModelAndView传给ViewReslover视图解析器</p></li><li><p>ViewReslover解析后返回具体View</p></li><li><p>DispatcherServlet对View进行渲染视图（即将模型数据model填充至视图中）。</p></li><li><p>DispatcherServlet响应用户。</p></li></ol><blockquote><p>摘自：<br>作者：CoderZS<br>链接：<a href="https://www.jianshu.com/p/8a20c547e245">https://www.jianshu.com/p/8a20c547e245</a></p></blockquote><h1 id="SpringMVC项目创建"><a href="#SpringMVC项目创建" class="headerlink" title="SpringMVC项目创建"></a>SpringMVC项目创建</h1><h2 id="使用maven模板webapp"><a href="#使用maven模板webapp" class="headerlink" title="使用maven模板webapp"></a>使用maven模板webapp</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/SpringMVC_20201203194857.png"></p><h2 id="创建后补充项目结构"><a href="#创建后补充项目结构" class="headerlink" title="创建后补充项目结构"></a>创建后补充项目结构</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/SpringMVC_20201203194910.png"></p><h2 id="Java包结构："><a href="#Java包结构：" class="headerlink" title="Java包结构："></a>Java包结构：</h2><p>​    <code>com.springmvc.surpass.controller</code></p><h2 id="添加pom坐标"><a href="#添加pom坐标" class="headerlink" title="添加pom坐标"></a>添加pom坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/servlet-api --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="SpringMVC配置"><a href="#SpringMVC配置" class="headerlink" title="SpringMVC配置"></a>SpringMVC配置</h1><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><h3 id="创建IndexController"><a href="#创建IndexController" class="headerlink" title="创建IndexController"></a>创建IndexController</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class IndexController implements Controller &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">        ModelAndView mv = new ModelAndView(&quot;index.jsp&quot;);</span><br><span class="line">        mv.addObject(&quot;message&quot;,&quot;跳转成功&quot;);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springmvc配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--加载springmvc-servlet.xml控制器映射，如果不添加此配置，也会默认加载名为springmvc-servlet.xml  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>WEB-INF/springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--应用启动是初始化servlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    配置<code>springmvc-servlet.xml</code> ,  <code>web.xml</code>默认记载此名称的配置文件，如果不是这个名字就需要在web.xml中默认加载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-servlet这个名字是因为上面web.xml中&lt;servlet-name&gt;标签配的值为spring（&lt;servlet-name&gt;spring&lt;/servlet-name&gt;），再加上“-servlet”后缀而形成的spring-servlet.xml文件名，如果改为springMVC，对应的文件名则为springMVC-servlet.xml。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span> <span class="attr">id</span>=<span class="string">&quot;simpleUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>indexController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;indexController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.springmvc.surpass.controller.IndexController&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    以上的工作流程是用户通过浏览器请求 <code>127.0.0.1:8080/index</code> ，<code>servlet</code>拦截当前所有的请求，然后交给<code>SpringMVC</code>控制器（C），控制器根据请求后缀（这里指<code>/index</code>）指向其对应的bean,然后执行<code>handlerequest</code>方法逻辑代码（M），执行后返回视图jsp页面（V），跳转页面后显示<code>ModelAndView</code>中携带的信息。</p><h3 id="如何在控制器中跳转到另一个控制器呢？这里看"><a href="#如何在控制器中跳转到另一个控制器呢？这里看" class="headerlink" title="如何在控制器中跳转到另一个控制器呢？这里看"></a>如何在控制器中跳转到另一个控制器呢？这里看</h3><p>根据需要再创建一个控制器<code>UserController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;user.jsp&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;跳转成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改IndexController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;redirect:/user&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-servlet这个名字是因为上面web.xml中&lt;servlet-name&gt;标签配的值为spring（&lt;servlet-name&gt;spring&lt;/servlet-name&gt;），再加上“-servlet”后缀而形成的spring-servlet.xml文件名，如果改为springMVC，对应的文件名则为springMVC-servlet.xml。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span> <span class="attr">id</span>=<span class="string">&quot;simpleUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappings&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>indexController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>userController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;indexController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.springmvc.surpass.controller.IndexController&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.springmvc.surpass.controller.UserController&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    ·用户通过浏览器请求 <code>127.0.0.1:8080/index</code>，页面显示将显示 “跳转成功”！</p><h2 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h2><h3 id="修改springmvc-servlet-xml"><a href="#修改springmvc-servlet-xml" class="headerlink" title="修改springmvc-servlet.xml"></a>修改springmvc-servlet.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定需要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 如何把handler 方法返回值解析为实际的物理视图  根据控制器返回的字符串拼接成jsp路径：xx.jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改IndexController"><a href="#修改IndexController" class="headerlink" title="修改IndexController"></a>修改IndexController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//视图解析器回根据model中的视图名进行解析即 /index.jsp</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        mv.addObject(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;this is a main&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Controller</code> 注解：<br>     很明显，这个注解是用来声明控制器的，可以用 <code>@Component</code> 注解代替。相当于bean配置</p><p><code>@RequestMapping</code> 注解：<br>     表示路径 <code>/hello</code> 会映射到该方法上，根据后面的<code>/index</code>来判断请求哪一个方法。</p><h3 id="重启tomcat"><a href="#重启tomcat" class="headerlink" title="重启tomcat"></a>重启tomcat</h3><p>访问 <code>localhost/index</code> 路径，能够看到message的信息</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>这里只说了SpringMVC最简单的配置，但它本身并不限于这些，适合刚接触框架的同学了解。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 表达式语言(Spring Expression Language) SpEL</title>
      <link href="/_post/SpEL-expression/"/>
      <url>/_post/SpEL-expression/</url>
      
        <content type="html"><![CDATA[<p>Spring 3.0  创建了一种新的方式用以配置对象的注入（set 注入或者构造参数注入），它便是 SpEL (Spring Expression Language)下面我们一一做一介绍。</p><h1 id="基础特性"><a href="#基础特性" class="headerlink" title="基础特性"></a>基础特性</h1><p>SpEL 使用#{…}作为定界符，所有在大框号中的字符都将被认为是 SpEL.</p><h2 id="1、-自变量的表示"><a href="#1、-自变量的表示" class="headerlink" title="1、 自变量的表示"></a>1、 自变量的表示</h2><h3 id="1、整数"><a href="#1、整数" class="headerlink" title="1、整数"></a>1、整数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;name=&quot;count&quot; value=&quot;#&#123;5&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="2、小数"><a href="#2、小数" class="headerlink" title="2、小数"></a>2、小数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;name=&quot;frequency&quot; value=&quot;#&#123;89.7&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="3、科学计数法"><a href="#3、科学计数法" class="headerlink" title="3、科学计数法"></a>3、科学计数法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;name=&quot;capacity&quot; value=&quot;#&#123;1e4&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="4、String-可以使用单引号或者双引号作为字符串的定界符号。"><a href="#4、String-可以使用单引号或者双引号作为字符串的定界符号。" class="headerlink" title="4、String 可以使用单引号或者双引号作为字符串的定界符号。"></a>4、String 可以使用单引号或者双引号作为字符串的定界符号。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;name=&quot;name&quot; value=&quot;#&#123;&#x27;Chuck&#x27;&#125;&quot;/&gt; </span><br><span class="line">&lt;name=&#x27;name&#x27; value=&#x27;#&#123;&quot;Chuck&quot;&#125;&#x27;/&gt; </span><br></pre></td></tr></table></figure><h3 id="5、Boolean"><a href="#5、Boolean" class="headerlink" title="5、Boolean"></a>5、Boolean</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;name=&quot;enabled&quot; value=&quot;#&#123;false&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h2 id="2、-引用-Bean，属性和方法"><a href="#2、-引用-Bean，属性和方法" class="headerlink" title="2、 引用 Bean，属性和方法"></a>2、 引用 Bean，属性和方法</h2><h3 id="1、引用其他对象"><a href="#1、引用其他对象" class="headerlink" title="1、引用其他对象"></a>1、引用其他对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;id=”saxophone” value=”com.xxx.xxx.Xxx”/&gt; </span><br><span class="line">&lt;bean ..&gt;</span><br><span class="line">&lt;property name=&quot;instrument&quot; value=&quot;#&#123;saxophone&#125;&quot;/&gt;</span><br><span class="line">&lt;bean/&gt;   </span><br></pre></td></tr></table></figure><p>​    通过id：“saxophone”将对象注入到instrument 属性中，这与下面的配置是一样的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;name=&quot;instrument&quot; ref=&quot;saxophone&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="2、引用其他对象的属性"><a href="#2、引用其他对象的属性" class="headerlink" title="2、引用其他对象的属性"></a>2、引用其他对象的属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;carl&quot; class=&quot;com.springinaction.springidol.Instrumentalist&quot;&gt;</span><br><span class="line">&lt;property name=&quot;song&quot; value=&quot;#&#123;kenny.song&#125;&quot; /&gt; </span><br><span class="line">&lt;/bean&gt;  </span><br></pre></td></tr></table></figure><p>​    kenny 是Bean Id 而 song 是属性的名字，这样配置就如同我们写了如下的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Instrumentalist carl = new Instrumentalist(); </span><br><span class="line">carl.setSong(kenny.getSong());  </span><br></pre></td></tr></table></figure><h3 id="3、调用其他方法"><a href="#3、调用其他方法" class="headerlink" title="3、调用其他方法"></a>3、调用其他方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;song&quot; value=&quot;songSelector.selectSong()&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    调用了 BeanId 为“songSelector”的对象的selectSong()方法，并将返回值注入到 song 属性</p><p>​    中。或者还可以链式操作。如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;song&quot; value=&quot;songSelector.selectSong().toUpperCase()&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    如果 songSelector.selectSong()返回 null 的还会抛出异常，为了避免我们要使用?.表达式。</p><p>​    这样如果 songSelector.selectSong()为null 就不会再调用后面的方法了。如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;song&quot; value=&quot;songSelector.selectSong()?.toUpperCase()&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="4、调用静态方法"><a href="#4、调用静态方法" class="headerlink" title="4、调用静态方法"></a>4、调用静态方法</h3><p>我们已经知道如何通过一个对象调用它的方法了，但是如何调用一个静态方法呢？用T()。它将返回一个 Class object</p><p>然后我们再调用相应的方法即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;multiplier&quot; value=&quot;T(java.lang.Math).PI&quot;/&gt; </span><br></pre></td></tr></table></figure><h2 id="3、SpEL-支持的运算符号"><a href="#3、SpEL-支持的运算符号" class="headerlink" title="3、SpEL 支持的运算符号"></a>3、SpEL 支持的运算符号</h2><h3 id="1、算数运算符："><a href="#1、算数运算符：" class="headerlink" title="1、算数运算符：+, -, *, /, %, ^"></a>1、算数运算符：+, -, *, /, %, ^</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;adjustedAmount&quot; value=&quot;#&#123;counter.total + 42&#125;&quot;/&gt; </span><br><span class="line">&lt;property name=&quot;adjustedAmount&quot; value=&quot;#&#123;counter.total - 20&#125;&quot;/&gt; </span><br><span class="line">&lt;property name=&quot;circumference&quot; value=&quot;#&#123;2 * T(java.lang.Math).PI * circle.radius&#125;&quot;/&gt; </span><br><span class="line">&lt;property name=&quot;average&quot; value=&quot;#&#123;counter.total / counter.count&#125;&quot;/&gt; </span><br><span class="line">&lt;property name=&quot;remainder&quot; value=&quot;#&#123;counter.total % counter.count&#125;&quot;/&gt; </span><br><span class="line">&lt;property name=&quot;area&quot; value=&quot;#&#123;T(java.lang.Math).PI * circle.radius ^ 2&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    加号还可以用作字符串连接</p><blockquote><ol><li><property name="fullName" value="#{performer.firstName + ' ' + performer.lastName}"/></li></ol></blockquote><h3 id="2、比较运算符：-lt-gt-lt-gt-lt-gt-eq-le-ge"><a href="#2、比较运算符：-lt-gt-lt-gt-lt-gt-eq-le-ge" class="headerlink" title="2、比较运算符： &lt;, &gt;, ==, &lt;=, &gt;=, lt, gt, eq, le, ge"></a>2、比较运算符： &lt;, &gt;, ==, &lt;=, &gt;=, lt, gt, eq, le, ge</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;equal&quot; value=&quot;#&#123;counter.total == 100&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    不可以使用&lt;和&gt;号，应为在 xml 中它有特殊的含义，我们使用 lt 和 gt 代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;hasCapacity&quot; value=&quot;#&#123;counter.total le 100000&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="3、-逻辑运算符号：-and-or-not"><a href="#3、-逻辑运算符号：-and-or-not" class="headerlink" title="3、 逻辑运算符号： and, or, not, |"></a>3、 逻辑运算符号： and, or, not, |</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;largeCircle&quot; value=&quot;#&#123;shape.kind == &#x27;circle&#x27; and shape.perimeter gt 10000&#125;&quot;/&gt; </span><br><span class="line">&lt;property name=&quot;outOfStock&quot; value=&quot;#&#123;!product.available&#125;&quot;/&gt; </span><br><span class="line">&lt;property name=&quot;outOfStock&quot; value=&quot;#&#123;not product.available&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="4、-If-else-运算符：-ternary-Elvis"><a href="#4、-If-else-运算符：-ternary-Elvis" class="headerlink" title="4、 If-else 运算符：?: (ternary), ?: (Elvis)"></a>4、 If-else 运算符：?: (ternary), ?: (Elvis)</h3><p>​    〇最基本的 ?:（这如同我们在使用EL 表达式语言）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;instrument&quot; value=&quot;#&#123;songSelector.selectSong() == &#x27;Jingle Bells&#x27; ? piano : &#x27; Jingle Bells &#x27;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    〇变体的 ?:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;song&quot; value=&quot;#&#123;kenny.song != null ? kenny.song : &#x27;Greensleeves&#x27;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    上下两种是同一语义，但下面的明显简洁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;song&quot; value=&quot;#&#123;kenny.song ?: &#x27;Greensleeves&#x27;&#125;&quot;/&gt; </span><br></pre></td></tr></table></figure><h3 id="5、-正则表达式：matches"><a href="#5、-正则表达式：matches" class="headerlink" title="5、 正则表达式：matches"></a>5、 正则表达式：matches</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;validEmail&quot; value=&quot;#&#123;admin.email matches &#x27;[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]&#123;2,4&#125;&#x27;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    表达式返回逻辑值，如果匹配返回 true,否则返回false</p><h2 id="4、SpEL-对集合的支持"><a href="#4、SpEL-对集合的支持" class="headerlink" title="4、SpEL 对集合的支持"></a>4、SpEL 对集合的支持</h2><p>环境</p><p>​    有实体 City 定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.habuma.spel.cities; </span><br><span class="line">public class City &#123; </span><br><span class="line">private String name; </span><br><span class="line">private String state; </span><br><span class="line">private int population; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​    Xml 中有如下定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;util:list id=&quot;cities&quot;&gt; </span><br><span class="line">&lt;bean class=&quot;com.habuma.spel.cities.City&quot; p:name=&quot;Chicago&quot; p:state=&quot;IL&quot; p:population=&quot;2853114&quot;/&gt;</span><br><span class="line">&lt;bean class=&quot;com.habuma.spel.cities.City&quot; p:name=&quot;Atlanta&quot; p:state=&quot;GA&quot; p:population=&quot;537958&quot;/&gt;</span><br><span class="line">&lt;bean class=&quot;com.habuma.spel.cities.City&quot; p:name=&quot;Dallas&quot; p:state=&quot;TX&quot; p:population=&quot;1279910&quot;/&gt;</span><br><span class="line">&lt;bean class=&quot;com.habuma.spel.cities.City&quot; p:name=&quot;Houston&quot; p:state=&quot;TX&quot; p:population=&quot;2242193&quot;/&gt;</span><br><span class="line">&lt;bean class=&quot;com.habuma.spel.cities.City&quot; p:name=&quot;Odessa&quot; p:state=&quot;TX&quot; p:population=&quot;90943&quot;/&gt;</span><br><span class="line">&lt;bean class=&quot;com.habuma.spel.cities.City&quot; p:name=&quot;El Paso&quot; p:state=&quot;TX&quot; p:population=&quot;613190&quot;/&gt;</span><br><span class="line">&lt;bean class=&quot;com.habuma.spel.cities.City&quot; p:name=&quot;Jal&quot; p:state=&quot;NM&quot; p:population=&quot;1996&quot;/&gt;</span><br><span class="line">&lt;bean class=&quot;com.habuma.spel.cities.City&quot; p:name=&quot;Las Cruces&quot; p:state=&quot;NM&quot; p:population=&quot;91865&quot;/&gt;</span><br><span class="line">&lt;util:list&gt;</span><br></pre></td></tr></table></figure><h3 id="1、-获取-Collection-中的某个对象〇通过下标访问，如下："><a href="#1、-获取-Collection-中的某个对象〇通过下标访问，如下：" class="headerlink" title="1、 获取 Collection 中的某个对象〇通过下标访问，如下："></a>1、 获取 Collection 中的某个对象〇通过下标访问，如下：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;chosenCity&quot; value=&quot;#&#123;cities[2]&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    我们就会获得 population 为”1279910”的city（记住下标从 0 开始） 〇下标可以通过变量指定，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;chosenCity&quot; value=&quot;#&#123;cities[T(java.lang.Math).random() * cities.size()]&#125;&quot;/&gt; </span><br></pre></td></tr></table></figure><p>​    〇如果是从 Map 中获得，可指定 key 值，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;chosenCity&quot; value=&quot;#&#123;cities[&#x27;Dallas&#x27;]&#125;&quot;/&gt; </span><br></pre></td></tr></table></figure><p>​    〇也可以通过 key 访问 properties 的值，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;util:properties id=&quot;settings&quot; location=&quot;classpath:settings.properties&quot;/&gt; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;accessToken&quot; value=&quot;#&#123;settings[&#x27;twitter.accessToken&#x27;]&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    〇可以通过下标访问 systemEnvironment 和 SystemProperties 中的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;homePath&quot; value=&quot;#&#123;systemEnvironment[&#x27;HOME&#x27;]&#125;&quot;/&gt; </span><br></pre></td></tr></table></figure><p>​    〇如果在 jre 运行时配置了-Dapplication.home=/etc/myapp，我们可以通过如下方式访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;homePath&quot; value=&quot;#&#123;systemProperties[&#x27;application.home&#x27;]&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    〇通过下标获取 String 串中的某个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a test&#x27;[3]</span><br></pre></td></tr></table></figure><h3 id="2、获取-Collection-中的子集-通过条件筛选（注意新对象是一个新的-Collection）"><a href="#2、获取-Collection-中的子集-通过条件筛选（注意新对象是一个新的-Collection）" class="headerlink" title="2、获取 Collection 中的子集-通过条件筛选（注意新对象是一个新的 Collection）"></a>2、获取 Collection 中的子集-通过条件筛选（注意新对象是一个新的 Collection）</h3><h4 id="1、筛选子集"><a href="#1、筛选子集" class="headerlink" title="1、筛选子集(.?[])"></a>1、筛选子集(.?[])</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;bigCities&quot; value=&quot;#&#123;cities.?[population gt 100000]&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="2、获取第一个（-）"><a href="#2、获取第一个（-）" class="headerlink" title="2、获取第一个（.^[]）"></a>2、获取第一个（.^[]）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;aBigCity&quot; value=&quot;#&#123;cities.^[population gt 100000]&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="3、获取最后一个（-）"><a href="#3、获取最后一个（-）" class="headerlink" title="3、获取最后一个（.$[]）"></a>3、获取最后一个（.$[]）</h4><p><code>&lt;property name=&quot;aBigCity&quot; value=&quot;#&#123;cities.$[population gt 100000]&#125;&quot;/&gt;</code></p><h3 id="3、集合的投影（-）"><a href="#3、集合的投影（-）" class="headerlink" title="3、集合的投影（.![]）"></a>3、集合的投影（.![]）</h3><p>如果想获得所有城市的名称组成的列表，可用如下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;cityNames&quot; value=&quot;#&#123;cities.![name]&#125;&quot;/&gt; </span><br></pre></td></tr></table></figure><p>​    将返回”Chicago”, “Atlanta”, “Dallas” </p><p>​    也可以组合两个列，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;cityNames&quot; value=&quot;#&#123;cities.![name + &#x27;, &#x27; + state]&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​    将返回”Chicago, IL”, “Atlanta, GA”, and “Dallas, TX”. </p><h3 id="4、将投影和筛选结合"><a href="#4、将投影和筛选结合" class="headerlink" title="4、将投影和筛选结合"></a>4、将投影和筛选结合</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;cityNames&quot; value=&quot;#&#123;cities.?[population gt 100000].![name + &#x27;, &#x27; + state]&#125;&quot;/&gt; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpEl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpEL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Layui实现日期选择器限定</title>
      <link href="/_post/laydate/"/>
      <url>/_post/laydate/</url>
      
        <content type="html"><![CDATA[<p>说明：根据时间片（天，月，季度等）来限定开始时间和结束时间的区间范围落在该时间片内。</p><p>举例：开始时间选择十月五号，时间片选择月，那么结束时间只能选择十月五号到十月三十一号之间的任何时间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px&quot;</span>&gt;</span></span><br><span class="line">试跑日期：</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;required&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;runTimeStart&quot;</span> <span class="attr">name</span>=<span class="string">&quot;runTimeStart&quot;</span> <span class="attr">readonly</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>---<span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;required&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;runTimeEnd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;runTimeEnd&quot;</span>  <span class="attr">readonly</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-label&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;we-red&quot;</span>&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span>时间片：</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-inline&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">lay-filter</span>=<span class="string">&quot;slotSelect&quot;</span> <span class="attr">id</span>=<span class="string">&quot;slotSelect&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;day&quot;</span>&gt;</span>天<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;week&quot;</span>&gt;</span>周<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;month&quot;</span>&gt;</span>月<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;season&quot;</span>  &gt;</span>季度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>选择时间片后进行改变时间限定,主要区分季度和当月，原因时数据库根据月份数据分表，需要根据月份查不同的表。layui的时间选择器使用方法可以看看官方文档。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">layui.use([<span class="string">&#x27;laydate&#x27;</span>, <span class="string">&#x27;jquery&#x27;</span>, <span class="string">&#x27;form&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> laydate = layui.laydate,</span><br><span class="line">            $ = layui.jquery,</span><br><span class="line">            admin = layui.admin;</span><br><span class="line">            <span class="keyword">var</span> form = layui.form;</span><br><span class="line">        <span class="keyword">var</span> startTime;</span><br><span class="line">        <span class="keyword">var</span> endTime;</span><br><span class="line">        <span class="comment">//执行一个laydate实例</span></span><br><span class="line">        startTime = laydate.render(&#123;</span><br><span class="line">            <span class="attr">elem</span>: <span class="string">&#x27;#runTimeStart&#x27;</span>,<span class="comment">//指定元素</span></span><br><span class="line">            <span class="attr">showBottom</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">done</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value,date</span>)</span>&#123;   <span class="comment">//指定开始时间时限定结束时间最大最小日期</span></span><br><span class="line">                <span class="keyword">if</span> (date.year != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> solotSelect = $(<span class="string">&quot;#slotSelect&quot;</span>).val();</span><br><span class="line">                    <span class="keyword">if</span> (solotSelect != <span class="string">&quot;season&quot;</span>)&#123;</span><br><span class="line">                        endTime.config.min=&#123;</span><br><span class="line">                            <span class="attr">year</span>:date.year,</span><br><span class="line">                            <span class="attr">month</span>:date.month-<span class="number">1</span>,</span><br><span class="line">                            <span class="attr">date</span>:date.date</span><br><span class="line">                        &#125;;</span><br><span class="line">                        endTime.config.max=&#123;</span><br><span class="line">                            <span class="attr">year</span>:date.year,</span><br><span class="line">                            <span class="attr">month</span>:date.month-<span class="number">1</span>,</span><br><span class="line">                            <span class="attr">date</span>:laydate.getEndDate()</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        endTime.config.min=&#123;</span><br><span class="line">                            <span class="attr">year</span>:date.year,</span><br><span class="line">                            <span class="attr">month</span>:date.month-<span class="number">1</span>,</span><br><span class="line">                            <span class="attr">date</span>:date.date</span><br><span class="line">                        &#125;;</span><br><span class="line">                        endTime.config.max=&#123;</span><br><span class="line">                            <span class="attr">year</span>:date.year,</span><br><span class="line">                            <span class="attr">month</span>:date.month+<span class="number">1</span>,</span><br><span class="line">                            <span class="attr">date</span>:laydate.getEndDate()-<span class="number">1</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        endTime = laydate.render(&#123;</span><br><span class="line">            <span class="attr">elem</span>: <span class="string">&#x27;#runTimeEnd&#x27;</span>,<span class="comment">//指定元素</span></span><br><span class="line">            <span class="attr">showBottom</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">done</span>:<span class="function"><span class="keyword">function</span>(<span class="params">value,date</span>)</span>&#123;   <span class="comment">//指定结束时间时限定开始时间最大最小日期</span></span><br><span class="line">                <span class="keyword">if</span> (date.year != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> solotSelect = $(<span class="string">&quot;#slotSelect&quot;</span>).val();</span><br><span class="line">                    <span class="keyword">if</span> (solotSelect != <span class="string">&quot;season&quot;</span>)&#123;</span><br><span class="line">                        startTime.config.min=&#123;</span><br><span class="line">                            <span class="attr">year</span>:date.year,</span><br><span class="line">                            <span class="attr">month</span>:date.month-<span class="number">1</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                        startTime.config.max=&#123;</span><br><span class="line">                            <span class="attr">year</span>:date.year,</span><br><span class="line">                            <span class="attr">month</span>:date.month-<span class="number">1</span>,</span><br><span class="line">                            <span class="attr">date</span>:date.date</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        startTime.config.min=&#123;</span><br><span class="line">                            <span class="attr">year</span>:date.year,</span><br><span class="line">                            <span class="attr">month</span>:date.month-<span class="number">3</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                        startTime.config.max=&#123;</span><br><span class="line">                            <span class="attr">year</span>:date.year,</span><br><span class="line">                            <span class="attr">month</span>:date.month-<span class="number">1</span>,</span><br><span class="line">                            <span class="attr">date</span>:date.date</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LayUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LayUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron表达式如何在SpringBoot中应用</title>
      <link href="/_post/cron/"/>
      <url>/_post/cron/</url>
      
        <content type="html"><![CDATA[<h1 id="Cron"><a href="#Cron" class="headerlink" title="Cron"></a>Cron</h1><p>计划任务，是任务在约定的时间执行已经计划好的工作，这是表面的意思。在Linux中，我们经常用到 cron 服务器来完成这项工作。cron服务器可以根据配置文件约定的时间来执行特定的任务。</p><p>自动生成cron表达式 : <a href="http://qqe2.com/cron">http://qqe2.com/cron</a></p><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义。</p><table><thead><tr><th align="center">形式</th><th align="center">*</th><th align="center">*</th><th align="center">*</th><th align="center">*</th><th align="center">*</th><th align="center">*</th><th align="center">*</th></tr></thead><tbody><tr><td align="center">字段</td><td align="center">Seconds</td><td align="center">Minutes</td><td align="center">Hours</td><td align="center">DayofMonth</td><td align="center">Month</td><td align="center">DayofWeek</td><td align="center">Year</td></tr><tr><td align="center">含义</td><td align="center">秒</td><td align="center">分</td><td align="center">时</td><td align="center">日</td><td align="center">月</td><td align="center">星期</td><td align="center">年(可选)</td></tr><tr><td align="center">范围</td><td align="center">0-59</td><td align="center">0-59</td><td align="center">0-23</td><td align="center">1-31</td><td align="center">1-12<br/>JAN-DEC</td><td align="center">1-7<br/>SUN-SAT</td><td align="center"></td></tr><tr><td align="center">符号</td><td align="center">, - * /</td><td align="center">, - * /</td><td align="center">, - * /</td><td align="center">, - * /<br/> ? L W X C</td><td align="center">, - * /<br/></td><td align="center">, - * /<br/>? L C #</td><td align="center"></td></tr></tbody></table><h2 id="通用符号"><a href="#通用符号" class="headerlink" title="通用符号"></a>通用符号</h2><ul><li>, - * /<ul><li>,：表示列出枚举值，例如在Minutes域使用5,20，表示在时间的分钟数为5，20时触发事件。</li><li>-：表示范围，例如在Minutes域使用5-20，表示在时间的分钟数为5到20时每分钟都触发事件。</li><li><em>：表示不做限制，任意值，例如在Minutes域使用 \</em> ，表示每分钟都触发时间。</li><li>/：表示起始时间开始执行，然后每隔固定时间触发一次，例如在Minutes域使用5/20，表示时间分钟数为5开始触发，之后每隔20分钟执行一次。</li></ul></li></ul><h2 id="专有符号"><a href="#专有符号" class="headerlink" title="专有符号"></a>专有符号</h2><ul><li>?：只能在DayofMonth和DayofWeek两个域使用，由于DayofMonth和DayofWeek互斥，需要对其中一个设置？</li><li>L：表示最后，只能在DayofMonth和DayofWeek域中使用，如果在DayofWeek域使用5L，意味着在最后的一个星期四触发（第一天是周日）</li><li>W：表示有效工作日（周一到周五），只能出现在DayofMonth域中，系统将在指定日期的最近的有效有效工作日触发时间</li><li>LW：这两个字符可以用，表示在某个月最后一个工作日</li><li>#：用于确定每个月第几个星期几，只能出现在DayofWeek域中，例如在4#2，表示某月的第二个星期三</li><li>C：只能在DayofMonth和DayofWeek域中，需要关联日历，如果没有关联则可以忽略</li></ul><p><font color=red>Spring不支持除 ？外的其他专有符号</font></p><h1 id="SpringBoot定时任务"><a href="#SpringBoot定时任务" class="headerlink" title="SpringBoot定时任务"></a>SpringBoot定时任务</h1><p>使用IDEA创建SpingBoot脚手架，我们可以看到有SpingBoot的启动类。只需要在启动类下面写自己的定时任务，其他地方写也可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span>    <span class="comment">//开启定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ScheduleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 九点到二十二点半小时提醒一次,单线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0/30 9-22 * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;多喝热水,时间:&quot;</span>+ <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy 年 MM 月 dd 日 E HH 点 mm 分 ss 秒&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 间隔五秒,单线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 9-22/4 * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注意保暖,时间:&quot;</span>+ <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy 年 MM 月 dd 日 E HH 点 mm 分 ss 秒&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果因为定时任务执行时间较长，可能会影响其他定时任务的执行，因为他们是单线程的，那么我们可以使用多线程异步执行它，SpringBoot提供简便的配置注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span>   <span class="comment">//开启异步</span></span><br><span class="line"><span class="meta">@EnableScheduling</span>    <span class="comment">//开启定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ScheduleApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果定时任务阻塞,则会影响其他定时任务执行,需要开启异步多线程注解,定时任务添加异步注解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 九点到二十二点半小时提醒一次,单线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span>    <span class="comment">//异步</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0/30 9-22 * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;多喝热水,时间:&quot;</span>+ <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy 年 MM 月 dd 日 E HH 点 mm 分 ss 秒&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 间隔五秒,单线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span>   <span class="comment">//异步</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 9-22/4 * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;注意保暖,时间:&quot;</span>+ <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy 年 MM 月 dd 日 E HH 点 mm 分 ss 秒&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/Cron_20201203170100.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
          <category> Cron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习搭建SpringCloud</title>
      <link href="/_post/learn-SpringCloud/"/>
      <url>/_post/learn-SpringCloud/</url>
      
        <content type="html"><![CDATA[<p>学无止境，继续前进</p><p>今天开始学习SpringCloud的相关知识，作为初学者不想过多的深究原理和底层，把学会使用作为本节的目标。</p><h1 id="什么是微服务架构"><a href="#什么是微服务架构" class="headerlink" title="什么是微服务架构"></a>什么是微服务架构</h1><p>简单地说，微服务是系统架构上的一种设计风格，它的主旨是将一个原本独立的系统<br>拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间通过基于HTTP<br>的RESTful API进行通信协作。被拆分成的每一个小型服务都围绕着系统中的某一项或一<br>些羁合度较高的业务功能进行构建，并且每个服务都维护着自身的数据存储、业务开发、<br>自动化测试案例以及独立部署机制。由于有了轻量级的通信协作基础，所以这些微服务可<br>以使用不同的语言来编写。</p><h1 id="单体架构和分布式微服务的区别"><a href="#单体架构和分布式微服务的区别" class="headerlink" title="单体架构和分布式微服务的区别"></a>单体架构和分布式微服务的区别</h1><p>单体架构的优点：</p><ul><li><p>易于开发：开发人员使用当前开发工具在短时间内就可以开发出单体应用。</p></li><li><p>易于测试：因为不需要依赖其他接口，测试可以节约很多时间。</p></li><li><p>易于部署：你只需要将目录部署在运行环境中即可。</p></li></ul><p>单体架构的缺点：</p><ul><li>灵活度不够：如果程序有任何修改，修改的不只是一个点，而是自上而下地去修改，<br>测试时必须等到整个程序部署完后才能看出效果。在开发过程可能需要等待其他开发<br>人员开发完成后才能完成部署，降低了团队的灵活性。</li><li>降低系统的性能：原本可以直接访问数据库但是现在多了一层。即使只包含一个功能<br>点，也需要在各个层写上代码。</li><li>系统启动慢：一个进程包含了所有业务逻辑，涉及的启动模块过多，导致系统的启动<br>时间延长。</li><li>系统扩展性比较差：增加新东西的时候不能针对单个点增加，要全局性地增加。牵一<br>发而动全身。</li></ul><p>SOA架构的优点：</p><ul><li><p>把模块拆分，使用接口通信，降低模块之间的藕合度。</p></li><li><p>把项目拆分成若干个子项目，不同的团队负责不同的子项目。</p></li><li><p>增加功能时只需要增加一个子项目，调用其他系统的接口即可。</p></li><li><p>可以灵活地进行分布式部署。</p></li></ul><p>SOA架构的缺点：</p><ul><li>系统之间的交互需要使用远程通信，接口开发增加工作量。</li></ul><p>SpringCloud五大组件</p><ol><li>Eureka：注册中心</li><li>Zuul、Gateway：网关</li><li>Ribbon：负载均衡</li><li>Feign：服务调用</li><li>Hystrix或Resilience4j：熔断器</li></ol><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="注册中心的服务端和客户端"><a href="#注册中心的服务端和客户端" class="headerlink" title="注册中心的服务端和客户端"></a>注册中心的服务端和客户端</h2><h3 id="版本说明："><a href="#版本说明：" class="headerlink" title="版本说明："></a>版本说明：</h3><table><thead><tr><th>Spring Boot</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>1.2.x</td><td>Angel版本</td></tr><tr><td>1.3.x</td><td>Brixton版本</td></tr><tr><td>1.4.x stripes</td><td>Camden版本</td></tr><tr><td>1.5.x</td><td>Dalston版本、Edgware版本</td></tr><tr><td>2.0.x</td><td>Finchley版本</td></tr><tr><td>2.1.x</td><td>Greenwich.SR2</td></tr></tbody></table><p>SpringBoot和SpringCloud的版本必须对应。详细请查看官方对应数据：<a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a>，也许你会看着很乱，不要着急，找一个JSON转换就OK啦。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/learn_SpringCloud_20201203180435.png" alt="1"></p><p>创建Maven父工程，添加pom配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建Eureka Server子工程，配置pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在server启动类添加注解<code>@EnableEurekaServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建application.yml文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8001</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">#服务端server禁止自己注册自己</span><br><span class="line">    register-with-eureka: <span class="literal">false</span></span><br><span class="line">#此客户端是否获取eureka服务器注册表上的注册信息，默认为<span class="literal">true</span></span><br><span class="line">    fetch-registry: <span class="literal">false</span></span><br><span class="line">    service-url: #指定交互和通信的url</span><br><span class="line">      default-zone: http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">  server:</span><br><span class="line">#当eureka server启动的时候，不能从对等节点获取instance注册信息的情况，应等待多长时间。</span><br><span class="line">    wait-time-in-ms-when-sync-empty: <span class="number">0</span></span><br><span class="line">#服务端开启自我保护模式。无论什么情况，服务端都会保持一定数量的服务。避免client与server的网络问题，而出现大量的服务被清除。</span><br><span class="line">    enable-self-preservation: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>创建Eureka Client子工程，配置pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加web，不添加启动时自动停止--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>client启动类添加注解<code>@EnableDiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建application.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="comment">#客户端必须起名字，否则注册为unknow</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#填入server通信url</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure><p>先后启动Server和Client，访问<a href="http://localhost:8001/">http://localhost:8001</a>，可以看到如图的界面：</p><ul><li>界面为Eureka Server的服务。</li><li>箭头指的名字为Eureka Client的服务。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/learn_SpringCloud_20201203180513.png" alt="2"></p><p>访问 <a href="http://127.0.0.1:8001/eureka/apps">http://127.0.0.1:8001/eureka/apps</a> 能够看到所有注册到Eureka Server的Client信息。</p><p>访问 <a href="http://127.0.0.1:8001/eureka/apps/$%7BapplicationName%7D">http://127.0.0.1:8001/eureka/apps/${applicationName}</a> 能够看到对应Client注册到Eureka Server的信息。</p><p>注册中心到这里了，后面继续！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot使用RabbitMQ看这几篇就够了(模式案例篇)！</title>
      <link href="/_post/SpringBoot-rabbitmq3/"/>
      <url>/_post/SpringBoot-rabbitmq3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上篇我们说到了消息队列RabbitMQ的模式概念，那么这里将会针对模式使用SpringBoot联合RabbitMQ做一个案例，实现消息的生产和消费。</p><p>这一篇也是这个主题的最后一篇了，建议配合着看。助于理解。</p><p>博主会将Demo工程放在Gitee上，有兴趣的可以拉下来自己试试。</p><p>Gitee地址：<a href="https://gitee.com/lemon_ant/os.git">https://gitee.com/lemon_ant/os.git</a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>新建SpringBoot项目</p><p>添加配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">8080</span></span><br><span class="line"></span><br><span class="line">spring.application.name=cl</span><br><span class="line">#RabbitMq所在服务器IP</span><br><span class="line">spring.rabbitmq.host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">#连接端口号</span><br><span class="line">spring.rabbitmq.port=<span class="number">5672</span></span><br><span class="line">#用户名</span><br><span class="line">spring.rabbitmq.username=root</span><br><span class="line">#用户密码</span><br><span class="line">spring.rabbitmq.password=<span class="number">123456</span></span><br><span class="line"># 开启发送确认</span><br><span class="line">spring.rabbitmq.publisher-confirm-type=correlated</span><br><span class="line"># 开启发送失败退回</span><br><span class="line">spring.rabbitmq.publisher-returns=<span class="literal">true</span></span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br></pre></td></tr></table></figure><p>添加pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OsApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OsApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h2><ol><li><p>队列初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当没有这个队列的时候会自动创建</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointInitialization</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">toPoint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;point.to.point&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        String sendMsg = <span class="string">&quot;点对点队列:&quot;</span> + name + <span class="string">&quot;   &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//指定队列</span></span><br><span class="line">      <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;point.to.point&quot;</span>,sendMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointConsumer</span> </span>&#123;</span><br><span class="line"><span class="comment">//监听的队列名</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;point.to.point&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processOne</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;point.to.point：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类(模仿控制层)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/Point&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PointProducer sayProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/point/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span></span>&#123;</span><br><span class="line">        sayProducer.send(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用postman模拟请求</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_1.png" alt="1"></p></li><li><p>控制台结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_2.png" alt="2"></p></li></ol><h2 id="work模式"><a href="#work模式" class="headerlink" title="work模式"></a>work模式</h2><ol><li><p>队列初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkInitialization</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当没有这个队列的时候会自动创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;WorkingMode&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        String sendMsg = <span class="string">&quot;工作模式:&quot;</span> + name + <span class="string">&quot;   &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//指定队列</span></span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;WorkingMode&quot;</span>,sendMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三个队列同时监听</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;WorkingMode&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processOne</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WorkingMode1：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;WorkingMode&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processTwo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WorkingMode2：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;WorkingMode&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processThree</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;WorkingMode3：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类(模仿控制层)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/work&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WorkProducer sayProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/work/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span></span>&#123;</span><br><span class="line">        sayProducer.send(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用postman模拟请求</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_3.png" alt="3"></p></li><li><p>控制台结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_4.png" alt="4"></p><p><font color=red>注意看时间，说明消息是轮询分发的，一个消息只由一个消费者消费。</font></p></li></ol><h2 id="发布-订阅者模式（Publish-Subscribe）"><a href="#发布-订阅者模式（Publish-Subscribe）" class="headerlink" title="发布/订阅者模式（Publish/Subscribe）"></a>发布/订阅者模式（Publish/Subscribe）</h2><ol><li><p>队列初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型为fanout</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishInitialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当没有这个队列的时候会自动创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">publishOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.publish.one&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">publishTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.publish.two&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">publishThree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.publish.three&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建交换器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">FanoutExchange <span class="title">pulishExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FanoutExchange directExchange = <span class="keyword">new</span> FanoutExchange(<span class="string">&quot;publishExchange&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> directExchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定队列(不用指定routing key),参数名字要和bean名字一致</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingPublishOne</span><span class="params">(Queue publishOne,FanoutExchange pulishExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(publishOne).to(pulishExchange);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingPublishTwo</span><span class="params">(Queue publishTwo,FanoutExchange pulishExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(publishTwo).to(pulishExchange);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingPublishThree</span><span class="params">(Queue publishThree,FanoutExchange pulishExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(publishThree).to(pulishExchange);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        String sendMsg = <span class="string">&quot;发布订阅模式:&quot;</span> + name + <span class="string">&quot;   &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//指定队列</span></span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;publishExchange&quot;</span>,<span class="string">&quot;&quot;</span>,sendMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.publish.one&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processOne</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.publish.one：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.publish.two&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processTwo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.publish.two：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.publish.three&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processThree</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.publish.three：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类(模仿控制层)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/Publish&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PublishProducer sayProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/publish/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span></span>&#123;</span><br><span class="line">        sayProducer.send(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用postman模拟请求</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_5.png" alt="5"></p></li><li><p>控制台结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_6.png" alt="6"></p><p><font color=red>注意看时间，交换机会将消息推送到所有绑定到它的队列。</font></p></li></ol><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><ol><li><p>队列初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型为direct</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingInitialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当没有这个队列的时候会自动创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">routingOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.routing.one&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">routingTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.routing.two&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">routingThree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.routing.three&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建交换器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DirectExchange <span class="title">routingExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DirectExchange directExchange = <span class="keyword">new</span> DirectExchange(<span class="string">&quot;routingExchange&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> directExchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingRoutingOne</span><span class="params">(Queue routingOne,DirectExchange routingExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(routingOne).to(routingExchange).with(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingRoutingTwo</span><span class="params">(Queue routingTwo,DirectExchange routingExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(routingTwo).to(routingExchange).with(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingRoutingThree</span><span class="params">(Queue routingThree,DirectExchange routingExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(routingThree).to(routingExchange).with(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        String sendMsg = <span class="string">&quot;路由模式:&quot;</span> + type + <span class="string">&quot;   &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//指定队列</span></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;routingExchange&quot;</span>,<span class="string">&quot;1&quot;</span>,sendMsg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;2&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;routingExchange&quot;</span>,<span class="string">&quot;2&quot;</span>,sendMsg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;3&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;routingExchange&quot;</span>,<span class="string">&quot;3&quot;</span>,sendMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.routing.one&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processOne</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.routing.one：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.routing.two&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processTwo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.routing.two：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.routing.three&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processThree</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.routing.three：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类(模仿控制层)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/Routing&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoutingProducer sayProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/routing/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span></span>&#123;</span><br><span class="line">        sayProducer.send(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用postman模拟请求</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_7.png" alt="7"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_8.png" alt="8"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_9.png" alt="9"></p><p><font color=red>我这里测试传的就是routing key，方便看。</font></p></li><li><p>控制台结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_10.png" alt="10"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_11.png" alt="11"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_12.png" alt="12"></p><p><font color=red>这里用时间来区别。</font></p></li></ol><h2 id="主题模式-Topic"><a href="#主题模式-Topic" class="headerlink" title="主题模式(Topic)"></a>主题模式(Topic)</h2><ol><li><p>队列初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型为topic</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicInitialization</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当没有这个队列的时候会自动创建</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">topicOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.topic.one&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">topicTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.topic.two&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Queue <span class="title">topicThree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;queue.topic.three&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建交换器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TopicExchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TopicExchange directExchange = <span class="keyword">new</span> TopicExchange(<span class="string">&quot;topicExchange&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> directExchange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingTopicOne</span><span class="params">(Queue topicOne,TopicExchange topicExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(topicOne).to(topicExchange).with(<span class="string">&quot;#.error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingTopicTwo</span><span class="params">(Queue topicTwo,TopicExchange topicExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(topicTwo).to(topicExchange).with(<span class="string">&quot;#.log&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingTopicThree</span><span class="params">(Queue topicThree,TopicExchange topicExchange)</span></span>&#123;</span><br><span class="line">        Binding binding = BindingBuilder.bind(topicThree).to(topicExchange).with(<span class="string">&quot;good.#.timer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> binding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String routing)</span></span>&#123;</span><br><span class="line">        String sendMsg = <span class="string">&quot;主题模式:&quot;</span> + routing + <span class="string">&quot;   &quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//指定队列</span></span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;topicExchange&quot;</span>,routing,sendMsg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.topic.one&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processOne</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.topic.one：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.topic.two&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processTwo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.topic.two：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue.topic.three&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processThree</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue.topic.three：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类(模仿控制层)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/Topic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TopicProducer sayProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/topic/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(<span class="meta">@PathVariable</span> String type)</span></span>&#123;</span><br><span class="line">        sayProducer.send(type);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请求以及对应结果</p><ul><li><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_13.png" alt="13"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_14.png" alt="14"></p></li><li><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_15.png" alt="15"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_16.png" alt="16"></p></li><li><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_17.png" alt="17"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq3_18.png" alt="18"></p><p><font color=red>注意看请求的key和打印日志的对应关系。</font></p></li></ul></li></ol><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>消息队列在这里基本就结束了，结合前面两篇基本就能够了解队列的基本概念和用法了。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot使用RabbitMQ看这几篇就够了(模式详解篇)！</title>
      <link href="/_post/SpringBoot-rabbitmq2/"/>
      <url>/_post/SpringBoot-rabbitmq2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面说到在Windows主机上安装RabbitMQ,和三种大类模式，那么这里就比较详细的解释模式中的情况。这里只涉及概念，不展示测试Demo。</p><h1 id="RabbitMQ模式"><a href="#RabbitMQ模式" class="headerlink" title="RabbitMQ模式"></a>RabbitMQ模式</h1><h2 id="点对点的队列"><a href="#点对点的队列" class="headerlink" title="点对点的队列"></a>点对点的队列</h2><p>图例</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq2_20201203191756.png"></p><p>模式描述</p><p>一个生产者P对应一个队列Q，一个队列Q由一个消费者C监听。</p><p>消费者确认模式有自动确认消息和手动确认消息两种模式。</p><ul><li><p>true:表示自动确认，只要消息从队列中获取，无论消费者获取到消息后是否成功消费，都会认为消息已经成功消费。</p></li><li><p>false:表示手动确认，消费者获取消息后，服务器会将该消息标记为不可用状态，等待消费者的反馈，如果消费者一直没有反馈，那么该消息将一直处于不可用状态，并且服务器会认为该消费者已经挂掉，不会再给其发送消息，直到该消费者反馈。</p></li></ul><h2 id="work模式"><a href="#work模式" class="headerlink" title="work模式"></a>work模式</h2><p>图例</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq2_20201203191824.png"></p><p>模式描述</p><p>一个生产者P对应一个队列Q，一个队列被多个消费者监听消费。一条消息只能被一个消费这消费。</p><p>这里有两种方式：</p><ul><li>轮询方式：队列通过循环的方式将消息对消费者进行分发，总体来说，各个消费者消费的消息是均等的。比如说，当有 C<sub>1</sub> 和 C<sub>2</sub> 两个消费者，C<sub>1</sub> 只会消费奇数消息，C<sub>2</sub> 只会消费偶数消息。平均每个消费者获得相同数量的消息。</li><li>公平分发：出现一种现象就是当奇数消息被消费者 C<sub>1</sub> 消费时间过长，且偶数消息被消费者 C<sub>2</sub> 消费时间过短时，那么 C<sub>1</sub> 就会显得很烦忙，而 C<sub>2</sub> 就会显得很悠闲，很显然这很影响工作效率。那么这种方式就用来解决这个问题，当任何一个消费者消费完周都会应答，而后队列直接分发该消费者信息进行消费。那么在相同时间内 C<sub>1</sub> 消费的消息肯定没有 C<sub>2</sub> 多。也叫做”能者多劳”。</li></ul><p><font color=red>注：使用basicQos( prefetchCount = 1)方法，来限制RabbitMQ只发不超过1条的消息给同一个消费者。当消息处理完毕后，有了反馈，才会进行第二次发送。<br>还有一点需要注意，使用公平分发，必须关闭自动应答，改为手动应答。</font></p><h2 id="发布-订阅者模式（Publish-Subscribe）"><a href="#发布-订阅者模式（Publish-Subscribe）" class="headerlink" title="发布/订阅者模式（Publish/Subscribe）"></a>发布/订阅者模式（Publish/Subscribe）</h2><p>图例</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq2_20201203191849.png"></p><p>模式描述</p><ol><li>1个生产者，多个消费者</li><li>每一个消费者都有自己的一个队列</li><li>生产者没有将消息直接发送到队列，而是发送到了交换机</li><li>每个队列都要绑定到交换机(不指定Routing Key)</li><li>生产者发送的消息，通过交换机发送到绑定交换机队列，实现一个消息被多个消费者获取的目的。</li></ol><p><font color=red>注：交换机没有储存数据的能力，如果该交换机没有绑定任何队列时，这条消息就会被抛弃。</font></p><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><p>图例</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq2_20201203191909.png"></p><p>模式描述</p><p>根据上述订阅模式类似，跟交换机绑定的队列指定了Routing Key，消息进入交换机后会根据Routing Key，判断将该条消息分发到哪些队列中。</p><p>如图举例，当Routing Key为error时，交换机会将消息分发到两条队列中，当Routing Key为info时，交换机只会将消息分发给下方的队列。</p><h2 id="主题模式-Topic"><a href="#主题模式-Topic" class="headerlink" title="主题模式(Topic)"></a>主题模式(Topic)</h2><p>图例</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq2_20201203191933.png"></p><p>模式描述</p><p>符号 # 匹配一个或多个词，符号 * 匹配不多不少一个词。任何发送到Topic Exchange的消息都会被转发到所有关心Routing Key中指定话题的Queue上。<code>usa.#</code> 能够匹配到 <code>usa.news.XXX </code>，但是 <code>usa.*</code> 只会匹配到 <code>usa.XXX</code> 。 如果Exchange没有发现能够与RouteKey匹配的Queue，则会抛弃此消息 。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot使用RabbitMQ看这几篇就够了(配置篇)！</title>
      <link href="/_post/SpringBoot-rabbitmq/"/>
      <url>/_post/SpringBoot-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主最近有一个任务需要用到消息队列RabbitMQ，那么今天我们就来看下在Windows本地下如何安装消息队列并使用SpringBoot结合消息队列做一个小的Demo。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="需要准备的东西（附链接地址）"><a href="#需要准备的东西（附链接地址）" class="headerlink" title="需要准备的东西（附链接地址）"></a>需要准备的东西（附链接地址）</h2><ul><li><a href="https://erlang.org/download/otp_win64_22.1.exe"><font color=green>otp_win64_22.1.exe</font></a></li><li><a href="https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.4/rabbitmq-server-3.8.4.exe"><font color=green>rabbitmq-server-3.8.4.exe</font></a></li></ul><p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。 所以需要Erlang语言环境（类似于jdk环境）。</p><p>这里注意下Erlang包要和rabbitmq包的版本应该对应，这里使用固定版本举例。</p><h2 id="什么是RabbitMQ"><a href="#什么是RabbitMQ" class="headerlink" title="什么是RabbitMQ"></a>什么是RabbitMQ</h2><p>RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展 </p><p>性、高可用性等方面表现不俗。具体特点包括： </p><ol><li><p>可靠性（Reliability） </p><p>RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。 </p></li><li><p>灵活的路由（Flexible Routing）</p><p>在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。 </p></li><li><p>消息集群（Clustering） </p><p>多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。 </p></li><li><p>高可用（Highly Available Queues） </p><p>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。 </p></li><li><p>多种协议（Multi-protocol） </p><p>RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。 </p></li><li><p>多语言客户端（Many Clients） </p><p>RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。 </p></li><li><p>管理界面（Management UI） </p><p>RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方 面。</p></li><li><p>跟踪机制（Tracing） </p><p>如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。 </p></li><li><p>插件机制（Plugin System） </p><p>RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。</p></li></ol><h2 id="架构图与主要概念"><a href="#架构图与主要概念" class="headerlink" title="架构图与主要概念"></a>架构图与主要概念</h2><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203183612.png"></p><h3 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h3><p><strong>RabbitMQ Server</strong>： 也叫broker server，它是一种传输服务。 他的角色就是维护一条 从Producer到Consumer的路线，保证数据能够按照指定的方式进行传输。 </p><p><strong>Producer</strong>： 消息生产者，如图A、B、C，数据的发送方。消息生产者连接RabbitMQ服 务器然后将消息投递到Exchange。 </p><p><strong>Consumer</strong>：消息消费者，如图1、2、3，数据的接收方。消息消费者订阅队列， RabbitMQ将Queue中的消息发送到消息消费者。 </p><p><strong>Exchange</strong>：生产者将消息发送到Exchange（交换器），由Exchange将消息路由到一个 或多个Queue中（或者丢弃）。Exchange并不存储消息。RabbitMQ中的Exchange有 direct、fanout、topic、headers四种类型，每种类型对应不同的路由规则。 </p><p><strong>Queue</strong>：（队列）是RabbitMQ的内部对象，用于存储消息。消息消费者就是通过订阅 队列来获取消息的，RabbitMQ中的消息都只能存储在Queue中，生产者生产消息并最终 投递到Queue中，消费者可以从Queue中获取消息并消费。多个消费者可以订阅同一个 Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者 都收到所有的消息并处理。 </p><p><strong>RoutingKey</strong>：生产者在将消息发送给Exchange的时候，一般会指定一个routing key， 来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联 合使用才能最终生效。在Exchange Type与binding key固定的情况下（在正常使用时一 般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过 指定routing key来决定消息流向哪里。RabbitMQ为routing key设定的长度限制为255 bytes。</p><p><strong>Connection</strong>： （连接）：Producer和Consumer都是通过TCP连接到RabbitMQ Server 的。以后我们可以看到，程序的起始处就是建立这个TCP连接。 </p><p><strong>Channels</strong>： （信道）：它建立在上述的TCP连接中。数据流动都是在Channel中进行 的。也就是说，一般情况是程序起始建立TCP连接，第二步就是建立这个Channel。 </p><p><strong>VirtualHost</strong>：权限控制的基本单位，一个VirtualHost里面有若干Exchange和 MessageQueue，以及指定被哪些user使用 </p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装 otp_win64_22.1.exe（以管理员身份运行安装） </p><p>配置环境变量：<code>ERLANG_HOME：C:\Program Files\erl10.5</code></p><p>安装rabbitmq-server-3.8.4.exe（以管理员身份运行安装） </p><p>配置环境变量：<code>RABBITMQ_HOME：C:\Program Files\RabbitMQ Server\rabbitmq_server-3.8.4</code></p><p><font color=red>注：博主这里全为默认路径,注意不要安装在包含中文和空格的目录下。</font></p><p>配置Path变量</p><p>添加上述变量名***_HOME到Path</p><p><code>%RABBITMQ_HOME%\sbin</code>,<code>%ERLANG_HOME%\bin</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>进入控制台管理员界面，进入rabbitMQ安装目录的sbin目录，输入命令 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装管理界面</span><br><span class="line">rabbitmq‐plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><p>重新启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rabbitmq-server</span><br></pre></td></tr></table></figure><p>为了方便将RabbitMQ安装到Windows服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-service install</span><br></pre></td></tr></table></figure><p>之后就能在windows服务中看到</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203183528.png"></p><p>浏览器访问url：<a href="http://127.0.0.1:15672/">http://127.0.0.1:15672</a>  即可看到界面，使用账号<code>Username：guest，Password：guest</code>登录</p><p><font color=red>注：RabbitMQ默认授权给系统管理员，应提前更换登录用户或将用户提升为管理员，否则无法启动。</font></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203183735.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203183801.png"></p><p>最上侧的导航以此是：概览、连接、信道、交换器、队列、用户管理</p><h3 id="Docker环境下的安装"><a href="#Docker环境下的安装" class="headerlink" title="Docker环境下的安装"></a>Docker环境下的安装</h3><p>下载镜像：（此步省略） </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management </span><br></pre></td></tr></table></figure><p>创建容器，rabbitmq需要有映射以下端口: 5671,5672,4369,15671,15672,25672</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ‐di ‐‐name=rabbitmq ‐p 5671:5617 ‐p 5672:5672 ‐p 4369:4369 ‐p 15671:15671 ‐p 15672:15672 ‐p 25672:25672 rabbitmq:management</span><br></pre></td></tr></table></figure><p>重启Docker镜像<code>docker restart rabbitmq</code></p><p>访问Linux    IP:15672</p><h2 id="模式详解"><a href="#模式详解" class="headerlink" title="模式详解"></a>模式详解</h2><h3 id="直接模式（Direct）"><a href="#直接模式（Direct）" class="headerlink" title="直接模式（Direct）"></a>直接模式（Direct）</h3><p>将消息发给唯一一个节点时使用这种模式，这是最简单的一种形式。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203183849.png"></p><p>任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue。 </p><ol><li><p>一般情况可以使用rabbitMQ自带的Exchange：””(该Exchange的名字为空字符串，下文称其为default Exchange)。 </p></li><li><p>这种模式下不需要将Exchange进行任何绑定(binding)操作 </p></li><li><p>消息传递时需要一个“RouteKey”，可以简单的理解为要发送到的队列名字。 </p></li><li><p>如果vhost中不存在RouteKey中指定的队列名，则该消息会被抛弃。 </p></li></ol><h4 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq20201203183914.png"></p><h3 id="分列模式"><a href="#分列模式" class="headerlink" title="分列模式"></a>分列模式</h3><p>将消息一次发给多个队列时，需要使用这种模式。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203183950.png"></p><p>任何发送到Fanout Exchange的消息都会被转发到与该Exchange绑定(Binding)的所有 </p><p>Queue上。 </p><ol><li><p>可以理解为路由表的模式 </p></li><li><p>这种模式不需要RouteKey </p></li><li><p>这种模式需要提前将Exchange与Queue进行绑定，一个Exchange可以绑定多个 </p><p>Queue，一个Queue可以同多个Exchange进行绑定。 </p></li><li><p>如果接受到消息的Exchange没有与任何Queue绑定，则消息会被抛弃。 </p></li></ol><h4 id="创建队列及绑定"><a href="#创建队列及绑定" class="headerlink" title="创建队列及绑定"></a>创建队列及绑定</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203184027.png"></p><h3 id="主题模式"><a href="#主题模式" class="headerlink" title="主题模式"></a>主题模式</h3><p>任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue 上。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203184056.png"></p><p>此类交换器使得来自不同的源头的消息可以到达一个对列，其实说的更明白一点就是模 糊匹配的意思，例如：上图中红色对列的routekey为usa.#，#代表匹配任意字符，但是 要想消息能到达此对列，usa.必须匹配后面的#好可以随意。图中usa.news usa.weather,都能找到红色队列，符号 # 匹配一个或多个词，符号 * 匹配不多不少一个 词。因此 usa.# 能够匹配到 usa.news.XXX ，但是 usa.* 只会匹配到 usa.XXX 。 </p><p><font color=red>注：交换器说到底是一个名称与队列绑定的列表。当消息发布到交换器时，实际上是由你所 连接的信道，将消息路由键同交换器上绑定的列表进行比较，最后路由消息。 任何发送到<strong>Topic Exchange</strong>的消息都会被转发到所有关心<strong>RouteKey</strong>中指定话题Queue上。</font></p><ol><li><p>这种模式较为复杂，简单来说，就是每个队列都有其关心的主题，所有的消息都带有一 个“标题”(RouteKey)，Exchange会将消息转发到所有关注主题能与RouteKey模糊匹配的队列。 </p></li><li><p>这种模式需要RouteKey，也许要提前绑定Exchange与Queue。 </p></li><li><p>在进行绑定时，要提供一个该队列关心的主题，如“#.log.#”表示该队列关心所有涉及 log的消息(一个RouteKey为”MQ.log.error”的消息会被转发到该队列)。</p></li><li><p>“#”表示0个或若干个关键字，“<em>”</em>表示一个关键字。如*“log.*”能与“log.warn”匹配，无法 与“log.warn.timeout”匹配；但是“log.#”能与上述两者匹配。 </p></li><li><p>同样，如果Exchange没有发现能够与RouteKey匹配的Queue，则会抛弃此消息。 </p></li></ol><h4 id="创建队列及绑定-1"><a href="#创建队列及绑定-1" class="headerlink" title="创建队列及绑定"></a>创建队列及绑定</h4><p>新建一个交换器，类型为to’pic</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203184140.png"></p><p>新建一个队列，queue.topic</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/rabbitmq_20201203184206.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用正则汇总</title>
      <link href="/_post/regular-Expressions/"/>
      <url>/_post/regular-Expressions/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源：微信公众号：编程无界（ID：qianshic）</p><p>如果出处标注有误或侵犯到原著作者权益，请联系删除，联系博主邮箱：<a href="mailto:&#x73;&#105;&#x6e;&#103;&#x6c;&#101;&#115;&#x69;&#109;&#112;&#108;&#x65;&#122;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;">&#x73;&#105;&#x6e;&#103;&#x6c;&#101;&#115;&#x69;&#109;&#112;&#108;&#x65;&#122;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a></p></blockquote><p>今天做东西需要用到正则来校验数据，作为一个渣渣，博主到处找。所以这里罗列了平时常用的正则表达式，以后要是能用到就来这里找啦！</p><h1 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h1><blockquote><ol><li>数字：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">0</span>-<span class="number">9</span>]\*$</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>n位的数字：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;n&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>至少n位的数字：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;n,&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>m-n位的数字：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;m,n&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>零和非零开头的数字：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(<span class="number">0</span>|[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*)$</span><br></pre></td></tr></table></figure><blockquote><ol start="6"><li>非零开头的最多带两位小数的数字：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*)+(\.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?$</span><br></pre></td></tr></table></figure><blockquote><ol start="7"><li>带1-2位小数的正数或负数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\-)?\d+(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)$</span><br></pre></td></tr></table></figure><blockquote><ol start="8"><li>正数、负数、和小数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(\-|\+)?\d+(\.\d+)?$</span><br></pre></td></tr></table></figure><blockquote><ol start="9"><li>有两位小数的正实数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">0</span>-<span class="number">9</span>]+(\.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br></pre></td></tr></table></figure><blockquote><ol start="10"><li>有1~3位小数的正实数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">0</span>-<span class="number">9</span>]+(\.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)?$</span><br></pre></td></tr></table></figure><blockquote><ol start="11"><li>非零的正整数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">1</span>-<span class="number">9</span>]\d\*$ 或 ^([<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;$ 或 ^\+?[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*$</span><br></pre></td></tr></table></figure><blockquote><ol start="12"><li>非零的负整数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\-[<span class="number">1</span>-<span class="number">9</span>][]<span class="number">0</span>-<span class="number">9</span><span class="string">&quot;\*$ 或 ^-[1-9]\d\*$</span></span><br></pre></td></tr></table></figure><blockquote><ol start="13"><li>非负整数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+$ 或 ^[<span class="number">1</span>-<span class="number">9</span>]\d\*|<span class="number">0</span>$</span><br></pre></td></tr></table></figure><blockquote><ol start="14"><li>非正整数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^-[<span class="number">1</span>-<span class="number">9</span>]\d\*|<span class="number">0</span>$ 或 ^((-\d+)|(<span class="number">0</span>+))$</span><br></pre></td></tr></table></figure><blockquote><ol start="15"><li>非负浮点数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d+(\.\d+)?$ 或 ^[<span class="number">1</span>-<span class="number">9</span>]\d\*\.\d\*|<span class="number">0</span>\.\d\*[<span class="number">1</span>-<span class="number">9</span>]\d\*|<span class="number">0</span>?\<span class="number">.0</span>+|<span class="number">0</span>$</span><br></pre></td></tr></table></figure><blockquote><ol start="16"><li>非正浮点数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((-\d+(\.\d+)?)|(<span class="number">0</span>+(\<span class="number">.0</span>+)?))$ 或 ^(-([<span class="number">1</span>-<span class="number">9</span>]\d\*\.\d\*|<span class="number">0</span>\.\d\*[<span class="number">1</span>-<span class="number">9</span>]\d\*))|<span class="number">0</span>?\<span class="number">.0</span>+|<span class="number">0</span>$</span><br></pre></td></tr></table></figure><blockquote><ol start="17"><li>正浮点数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">1</span>-<span class="number">9</span>]\d\*\.\d\*|<span class="number">0</span>\.\d\*[<span class="number">1</span>-<span class="number">9</span>]\d\*$ 或 ^(([<span class="number">0</span>-<span class="number">9</span>]+\.[<span class="number">0</span>-<span class="number">9</span>]\*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*)|([<span class="number">0</span>-<span class="number">9</span>]\*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*\.[<span class="number">0</span>-<span class="number">9</span>]+)|([<span class="number">0</span>-<span class="number">9</span>]\*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*))$</span><br></pre></td></tr></table></figure><blockquote><ol start="18"><li>负浮点数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^-([<span class="number">1</span>-<span class="number">9</span>]\d\*\.\d\*|<span class="number">0</span>\.\d\*[<span class="number">1</span>-<span class="number">9</span>]\d\*)$ 或 ^(-(([<span class="number">0</span>-<span class="number">9</span>]+\.[<span class="number">0</span>-<span class="number">9</span>]\*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*)|([<span class="number">0</span>-<span class="number">9</span>]\*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*\.[<span class="number">0</span>-<span class="number">9</span>]+)|([<span class="number">0</span>-<span class="number">9</span>]\*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]\*)))$</span><br></pre></td></tr></table></figure><blockquote><ol start="19"><li>浮点数：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(-?\d+)(\.\d+)?$ 或 ^-?([<span class="number">1</span>-<span class="number">9</span>]\d\*\.\d\*|<span class="number">0</span>\.\d\*[<span class="number">1</span>-<span class="number">9</span>]\d\*|<span class="number">0</span>?\<span class="number">.0</span>+|<span class="number">0</span>)$</span><br></pre></td></tr></table></figure><h1 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h1><blockquote><ol><li>汉字：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>英文和数字：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z0-<span class="number">9</span>]+$ 或 ^[A-Za-z0-<span class="number">9</span>]&#123;<span class="number">4</span>,<span class="number">40</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>长度为3-20的所有字符：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>由26个英文字母组成的字符串：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z]+$</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>由26个大写英文字母组成的字符串：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Z]+$</span><br></pre></td></tr></table></figure><blockquote><ol start="6"><li>由26个小写英文字母组成的字符串：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-z]+$</span><br></pre></td></tr></table></figure><blockquote><ol start="7"><li>由数字和26个英文字母组成的字符串：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Za-z0-<span class="number">9</span>]+$</span><br></pre></td></tr></table></figure><blockquote><ol start="8"><li>由数字、26个英文字母或者下划线组成的字符串：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\w+$ 或 ^\w&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="9"><li>中文、英文、数字包括下划线：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\u4E00-\u9FA5A-Za-z0-9_]+$</span><br></pre></td></tr></table></figure><blockquote><ol start="10"><li>中文、英文、数字但不包括下划线等符号：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="11"><li>禁止输入含有~的字符：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^~\x22]+</span><br></pre></td></tr></table></figure><h1 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h1><blockquote><ol><li>Email地址：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\w+([-+.]\w+)\*@\w+([-.]\w+)\*\.\w+([-.]\w+)\*$</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>域名：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-Z0-<span class="number">9</span>][-a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">0</span>,<span class="number">62</span>&#125;(/.[a-zA-Z0-<span class="number">9</span>][-a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">0</span>,<span class="number">62</span>&#125;)+/.?</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>InternetURL：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-z]+:<span class="comment">//[^\s]\* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]\*)?$</span></span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>手机号码：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(<span class="number">13</span>[<span class="number">0</span>-<span class="number">9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>])\d&#123;<span class="number">8</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>国内电话号码(0511-4405222、021-87888822)：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="6"><li>电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）:</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((\d&#123;<span class="number">11</span>&#125;)|^((\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;)|(\d&#123;<span class="number">4</span>&#125;|\d&#123;<span class="number">3</span>&#125;)-(\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;)|(\d&#123;<span class="number">4</span>&#125;|\d&#123;<span class="number">3</span>&#125;)-(\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;)-(\d&#123;<span class="number">4</span>&#125;|\d&#123;<span class="number">3</span>&#125;|\d&#123;<span class="number">2</span>&#125;|\d&#123;<span class="number">1</span>&#125;)|(\d&#123;<span class="number">7</span>,<span class="number">8</span>&#125;)-(\d&#123;<span class="number">4</span>&#125;|\d&#123;<span class="number">3</span>&#125;|\d&#123;<span class="number">2</span>&#125;|\d&#123;<span class="number">1</span>&#125;))$)</span><br></pre></td></tr></table></figure><blockquote><ol start="7"><li>身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(^\d&#123;<span class="number">15</span>&#125;$)|(^\d&#123;<span class="number">18</span>&#125;$)|(^\d&#123;<span class="number">17</span>&#125;(\d|X|x)$)</span><br></pre></td></tr></table></figure><blockquote><ol start="8"><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z][a-zA-Z0-9_]&#123;<span class="number">4</span>,<span class="number">15</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="9"><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[a-zA-Z]\w&#123;<span class="number">5</span>,<span class="number">17</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="10"><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?=.\*\d)(?=.\*[a-z])(?=.\*[A-Z])[a-zA-Z0-<span class="number">9</span>]&#123;<span class="number">8</span>,<span class="number">10</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="11"><li>强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(?=.\*\d)(?=.\*[a-z])(?=.\*[A-Z]).&#123;<span class="number">8</span>,<span class="number">10</span>&#125;$</span><br></pre></td></tr></table></figure><blockquote><ol start="12"><li>日期格式：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;-\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="13"><li>一年的12个月(01～09和1～12)：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(<span class="number">0</span>?[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])$</span><br></pre></td></tr></table></figure><blockquote><ol start="14"><li>一个月的31天(01～09和1～31)：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^((<span class="number">0</span>?[<span class="number">1</span>-<span class="number">9</span>])|((<span class="number">1</span>|<span class="number">2</span>)[<span class="number">0</span>-<span class="number">9</span>])|<span class="number">30</span>|<span class="number">31</span>)$</span><br></pre></td></tr></table></figure><blockquote><ol start="15"><li>xml文件：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([a-zA-Z]+-?)+[a-zA-Z0-<span class="number">9</span>]+\\.[x|X][m|M][l|L]$</span><br></pre></td></tr></table></figure><blockquote><ol start="16"><li>中文字符的正则表达式：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\u4e00-\u9fa5]</span><br></pre></td></tr></table></figure><blockquote><ol start="17"><li>空白行的正则表达式：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\n\s\*\r (可以用来删除空白行)</span><br></pre></td></tr></table></figure><blockquote><ol start="18"><li>HTML标记的正则表达式：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;(\S\*?)[^&gt;]\*&gt;.\*?|&lt;.\*? /&gt; ( 首尾空白字符的正则表达式：^\s\*|\s\*$或(^\s\*)|(\s\*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br></pre></td></tr></table></figure><blockquote><ol start="19"><li>腾讯QQ号：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">4</span>,&#125; (腾讯QQ号从<span class="number">10000</span>开始)</span><br></pre></td></tr></table></figure><blockquote><ol start="20"><li>中国邮政编码：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125;(?!\d) (中国邮政编码为<span class="number">6</span>位数字)</span><br></pre></td></tr></table></figure><blockquote><ol start="21"><li>IP地址：</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((?:(?:<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]\\d|[<span class="number">01</span>]?\\d?\\d)\\.)&#123;<span class="number">3</span>&#125;(?:<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]\\d|[<span class="number">01</span>]?\\d?\\d))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现一个实时更新的进度条</title>
      <link href="/_post/real-time-progress-bar/"/>
      <url>/_post/real-time-progress-bar/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主近期接到一个任务，大概内容是：导入excel表格批量修改状态，期间如果发生错误则所有数据不成功，为了防止重复提交，做一个类似进度条的东东。</p><p>那么下面我会结合实际业务对这个功能进行分析和记录。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>前端使用bootstrap，后端使用SpringBoot分布式到注册中心，原先的想法是导入表格后异步调用修改数据状态的方法，然后每次计算修改的进度然后存放在session中，前台jquery写定时任务访问获取session中的进度，更新进度条进度和百分比。但是这存在session在服务间不共享，跨域问题。那么换一个方式存放，存放在redis中，前台定时任务直接操作获取redis的数据。</p><h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><h3 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h3><p>先来看一下bootstrap的进度条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress progress-striped active&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar progress-bar-success&quot;</span> <span class="attr">role</span>=<span class="string">&quot;progressbar&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">aria-valuenow</span>=<span class="string">&quot;60&quot;</span> <span class="attr">aria-valuemin</span>=<span class="string">&quot;0&quot;</span> <span class="attr">aria-valuemax</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">style</span>=<span class="string">&quot;width: 40%;&quot;</span>&gt;</span></span><br><span class="line">        40%</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进度条更新主要更新<code>style=&quot;width: 40%;&quot;</code>的值即可，<code>div</code>里面的40%可以省略，无非时看着明确。</p><p>可以考虑将进度条放入弹出层。</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击确认导入执行此方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bulkImportChanges</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取批量操作状态文件</span></span><br><span class="line">    <span class="keyword">var</span> files = $(<span class="string">&quot;#importChanges&quot;</span>).prop(<span class="string">&quot;files&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> changesFile = files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">    formData.append(<span class="string">&quot;importFile&quot;</span>,changesFile);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&quot;/risk/bulk***es&quot;</span>,</span><br><span class="line">        <span class="attr">data</span> : formData,</span><br><span class="line">        <span class="attr">processData</span> : <span class="literal">false</span>,      <span class="comment">//文件ajax上传要加这两个的，要不然上传不了</span></span><br><span class="line">        <span class="attr">contentType</span> : <span class="literal">false</span>,      <span class="comment">//</span></span><br><span class="line">        <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//导入成功</span></span><br><span class="line">            <span class="keyword">if</span> (obj.rspCode == <span class="string">&quot;00&quot;</span>) &#123;</span><br><span class="line">                <span class="comment">//定时任务获取redis导入修改进度</span></span><br><span class="line">                <span class="keyword">var</span> progress = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">var</span> timingTask = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    $.ajax(&#123;</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                        <span class="attr">url</span>: <span class="string">&quot;/risk/t***k&quot;</span>,</span><br><span class="line">                        <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">                        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                            progress = result.value;</span><br><span class="line">                            <span class="keyword">if</span> (progress != <span class="string">&quot;error&quot;</span>)&#123;</span><br><span class="line">                                <span class="keyword">var</span> date = progress.substring(<span class="number">0</span>,<span class="number">6</span>);</span><br><span class="line">                                <span class="comment">//这里更新进度条的进度和数据</span></span><br><span class="line">                                $(<span class="string">&quot;.progress-bar&quot;</span>).width(<span class="built_in">parseFloat</span>(date)+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">                                $(<span class="string">&quot;.progress-bar&quot;</span>).text(<span class="built_in">parseFloat</span>(date)+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="comment">//导入修改完成或异常（停止定时任务）</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">parseInt</span>(progress)==<span class="number">100</span> || progress == <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line">                        <span class="comment">//清除定时执行</span></span><br><span class="line">                        <span class="built_in">clearInterval</span>(timingTask);</span><br><span class="line">                        $.ajax(&#123;</span><br><span class="line">                            <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                            <span class="attr">url</span>: <span class="string">&quot;/risk/de***ess&quot;</span>,</span><br><span class="line">                            <span class="attr">dataType</span> : <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">                            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                                $(<span class="string">&quot;#bulkImportChangesProcessor&quot;</span>).hide();</span><br><span class="line">                                <span class="keyword">if</span> (<span class="built_in">parseInt</span>(progress) == <span class="number">100</span>) &#123;</span><br><span class="line">                                    alert(<span class="string">&quot;批量导入修改状态成功&quot;</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (progress == <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line">                                    alert(<span class="string">&quot;批量导入修改状态失败&quot;</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="comment">//获取最新数据</span></span><br><span class="line">                                <span class="built_in">window</span>.location.href=<span class="string">&quot;/risk/re***ByParam&quot;</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">1000</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">&quot;#bulkImportChangesProcessor&quot;</span>).hide();</span><br><span class="line">                alert(obj.rspMsg);</span><br><span class="line">                <span class="built_in">window</span>.location.href=<span class="string">&quot;/risk/re***ByParam&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：点击确认导入文件后成功后开启定时任务每一秒(一千毫秒)访问一次后台获取redis存放的进度，返回更新进度条，如果更新完成或者更新失败（根据后台返回的数据决定）则停止定时任务显示相应的信息并刷新页面。获取最新数据。</p><h3 id="后台控制层"><a href="#后台控制层" class="headerlink" title="后台控制层"></a>后台控制层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退单管理批量修改状态导入文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> importFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/bulk***es&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,Object&gt; bulk***es(MultipartFile importFile)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;退单管理批量修改状态导入文件，传入参数：&quot;</span>+importFile);</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">List&lt;Bulk***esEntity&gt; fromExcel = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//使用工具类导入转成list</span></span><br><span class="line">String[] header = &#123;<span class="string">&quot;sy***um&quot;</span>,<span class="string">&quot;t***mt&quot;</span>,<span class="string">&quot;ha***ult&quot;</span>,<span class="string">&quot;re***nd&quot;</span>,<span class="string">&quot;sy***nd&quot;</span>,<span class="string">&quot;r**k&quot;</span>&#125;;</span><br><span class="line">fromExcel = importExcelUtil.importDataFromExcel(importFile, header, BulkImportChangesEntity.class);</span><br><span class="line"><span class="keyword">if</span> (fromExcel.size()==<span class="number">0</span>)&#123;</span><br><span class="line">map.put(<span class="string">&quot;rspCode&quot;</span>,<span class="string">&quot;99&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;rspMsg&quot;</span>,<span class="string">&quot;导入数据不能为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">map.put(<span class="string">&quot;rspCode&quot;</span>,<span class="string">&quot;99&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;rspMsg&quot;</span>,<span class="string">&quot;导入操作表失败,请注意数据列格式&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//这里会对list集合中的数据进行处理</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;调用服务开始，参数：&quot;</span>+JSON.toJSONString(fromExcel));</span><br><span class="line"><span class="comment">//String url = p4_zuul_url+&quot;/***/ri***eat/bu***nges&quot;;</span></span><br><span class="line">String url = p4_zuul_url+<span class="string">&quot;/***-surpass/ri***eat/bu***nges&quot;</span>;</span><br><span class="line">String result = HttpClientUtil.doPost(url,JSON.toJSONString(fromExcel));</span><br><span class="line">log.info(<span class="string">&quot;调用服务结束，返回数据：&quot;</span>+result);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>)&#123;</span><br><span class="line">map = JSONObject.parseObject(result, Map.class);</span><br><span class="line">log.info(<span class="string">&quot;批量修改状态导入：&quot;</span>+JSON.toJSONString(map));</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">map.put(<span class="string">&quot;rspCode&quot;</span>,<span class="string">&quot;99&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;rspMsg&quot;</span>,<span class="string">&quot;导入操作表失败&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;bu***es exception&quot;</span>,e);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取退单管理批量修改状态导入文件进度条进度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/t***sk&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,Object&gt; t***sk()&#123;</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取redis值</span></span><br><span class="line">String progress = HttpClientUtil.doGet(</span><br><span class="line">p4_zuul_url + <span class="string">&quot;/&quot;</span> + p4_redis + <span class="string">&quot;/redis***ler/get?key=progressSchedule&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (progress != <span class="keyword">null</span>)&#123;</span><br><span class="line">map = JSONObject.parseObject(progress, Map.class);</span><br><span class="line">log.info(<span class="string">&quot;进度条进度：&quot;</span>+JSON.toJSONString(map));</span><br><span class="line">map.put(<span class="string">&quot;progressSchedule&quot;</span>,progress);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">HttpClientUtil.doGet(</span><br><span class="line">p4_zuul_url + <span class="string">&quot;/&quot;</span> + p4_redis + <span class="string">&quot;/redis***ler/del?key=progressSchedule&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清除redis进度条进度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/de***ess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String,Object&gt; de***ess()&#123;</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">String progress = HttpClientUtil.doGet(</span><br><span class="line">p4_zuul_url + <span class="string">&quot;/&quot;</span> + p4_redis + <span class="string">&quot;/redis***ler/del?key=progressSchedule&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (progress != <span class="keyword">null</span>)&#123;</span><br><span class="line">map = JSONObject.parseObject(progress, Map.class);</span><br><span class="line">log.info(<span class="string">&quot;返回数据：&quot;</span>+JSON.toJSONString(map));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入时调用第一个<code>bulk***es</code>方法，定时任务调用<code>t***sk</code>方法，导入完成或发生错误调用<code>de***ess</code>方法删除redis数据，避免占用资源。</p><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span><span class="comment">//开启异步</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span><span class="comment">//事务回滚级别</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulkImportChanges</span><span class="params">(List&lt;BulkImportChangesParam&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//初始化进度</span></span><br><span class="line">Double progressBarSchedule = <span class="number">0.0</span>;</span><br><span class="line">redisClient.set(<span class="string">&quot;progressSchedule&quot;</span>, progressBarSchedule + <span class="string">&quot;&quot;</span>);<span class="comment">//存redis</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= list.size(); i++) &#123;</span><br><span class="line">RiskRetreatEntity entity = riskRetreatMapper.selectRetreatListBySysRefNum(list.get(i-<span class="number">1</span>).getSysRefNum());</span><br><span class="line"><span class="keyword">if</span> (entity == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//查询结果为空直接进行下次循环不抛出</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体封装</span></span><br><span class="line">                ···</span><br><span class="line">                <span class="comment">//更新</span></span><br><span class="line">riskRetreatMapper.updateRetreatByImport(entity);</span><br><span class="line"><span class="comment">//计算修改进度并存放redis保存(1.0 / list.size())为一条数据进度</span></span><br><span class="line">progressBarSchedule = (<span class="number">1.0</span> / list.size()) * i*<span class="number">100</span>;</span><br><span class="line">redisClient.set(<span class="string">&quot;progressSchedule&quot;</span>, progressBarSchedule+<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (i==list.size())&#123;</span><br><span class="line">redisClient.set(<span class="string">&quot;progressSchedule&quot;</span>, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"><span class="comment">//当发生错误则清除缓存直接抛出回滚</span></span><br><span class="line">redisClient.set(<span class="string">&quot;progressSchedule&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;导入更新错误，回滚&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;bulkImportChanges exception:&quot;</span>,e);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每更新一条数据存放进度，当发生错误则进行回滚。如果开启异步则需要在启动类添加注解<code>@EnableAsync</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line">···<span class="comment">//其他注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果样式"><a href="#结果样式" class="headerlink" title="结果样式"></a>结果样式</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/progress_bar_20201203181909.gif"></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>这次结合了前端的定时任务，后台事务以及异步，总的来说还是一次🙅‍不错的体验。</p><blockquote><p>优秀的代码只能通过时间的冲刷才会显现的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注释不会被执行吗？</title>
      <link href="/_post/java-annotations/"/>
      <url>/_post/java-annotations/</url>
      
        <content type="html"><![CDATA[<blockquote><p>**本文标题:**老师，你确定Java注释不会被执行吗？</p><p>**文章作者:**沉默王二</p><p><strong>原始链接:</strong><a href="https://blog.csdn.net/qing_gee/article/details/105895395">https://blog.csdn.net/qing_gee/article/details/105895395 </a></p></blockquote><p><font color=red  size=25>“注释是不会被执行的！”</font></p><p>相信学过编程的小伙伴都会听过这句话，注释一般是对代码的解释，或者补充，起到了提示的作用，那么到底会不会执行呢？</p><p>今天突然看到了这样一篇有趣的文章，验证了注释是否会执行，又会在什么情况下执行。可以看看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;沉默王二&quot;</span>;</span><br><span class="line">        <span class="comment">// \u000dname=&quot;沉默王三&quot;;</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我拷贝到 IDEA 中跑了一下，结果程序输出的结果出乎我的意料：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">沉默王三</span><br></pre></td></tr></table></figure><p>竟然是王三，不是王二。看到这个结果，我算是彻底懵逼了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/anno_20201203174724.png"></p><p>那一刹那，我感觉 Java 算是白学了。老师说注释是不会执行的；就连《编程思想》里也说注释是不会执行的。那现在谁能告诉我这到底为什么？</p><p>不是说程序的世界很单纯吗？不是 0 就是 1？事情搞到这个地步，只能花心思好好研究一下了。</p><p>单纯从代码上来看，问题应该出在那串特殊的字符上——<code>\u000d</code>，如果不是它在作怪，把 name 的值由“沉默王二”修改为了“沉默王三”。</p><p><code>\u000d</code> 虽然看上去比较陌生，但我知道它是一个 Unicode 字符。问了一下搜索引擎后，知道它代表一个换行符——一种恍然大悟的感觉啊。我知道，Java 编译器不仅会编译代码，还会解析 Unicode 字符。</p><p>我将这段代码编译后的字节码，使用反编译工具进行反编译，于是我看到下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;沉默王二&quot;</span>;</span><br><span class="line">        name = <span class="string">&quot;沉默王三&quot;</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咦，两个反斜杠  <code>//</code> 真的不见了，这可以确定一点——注释确实是不会执行的。只不过 <code>\u000d</code> 把 <code>name=&quot;沉默王三&quot;;</code> 挤到了 <code>//</code> 注释的下一行，就好像下面这段代码的样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;沉默王二&quot;</span>;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        name=<span class="string">&quot;沉默王三&quot;</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那这算不算是 Java 的 bug 呢？说算也不算。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/anno_20201203174758.gif" alt="641"></p><blockquote><p><font color=blue>因为通过允许 Java 源代码包含 Unicode 字符，可以确保在世界上任何一个区域编写的代码在其他地方执行。</font></p></blockquote><p>老实说，这段话是我从网上找到，好像明白点啥，又好像不明白。那再来看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> π = Math.PI;</span><br><span class="line">System.out.println(\u03C0);</span><br></pre></td></tr></table></figure><p>假如说程序员小王在创建周期率这个变量的时候，不知道 <code>π</code> 这个字符怎么敲出来，那么他就可以选择使用 <code>\u03C0</code> 来替代——编译器知道 <code>\u03C0</code> 就是 <code>π</code> 这个变量（<font color=red>编译器会在编译其他代码之前先解析 Unicode 字符</font>）。</p><p>只能说 <code>\u000d</code> 是一种例外吧。</p><p>当然了，除非特殊情况，不要在源代码中包含 Unicode 字符，以免更改源代码的本意。</p><p>这又学到了</p><p>哈哈！！get到了一个估计用不到的新知识。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用WebMagic框架实现Java爬虫Demo</title>
      <link href="/_post/webMagic-crawler-demo/"/>
      <url>/_post/webMagic-crawler-demo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="WebMagic介绍"><a href="#WebMagic介绍" class="headerlink" title="WebMagic介绍"></a>WebMagic介绍</h2><p>Java的可伸缩Web搜寻器框架。官方网站： <a href="http://webmagic.io/">http://webmagic.io/</a></p><p>一款爬虫框架是WebMagic，其底层使用的HttpClient和Jsoup。</p><p>WebMagic项目代码分为核心和扩展两部分。核心部分(webmagic-core)是一个精简的、模块化的爬虫实现，而扩展部分则包括一些便利的、实用性的功能。</p><p>WebMagic的设计目标是尽量的模块化，并体现爬虫的功能特点。这部分提供非常简单、灵活的API，在基本不改变开发模式的情况下，编写一个爬虫。</p><h2 id="结构介绍"><a href="#结构介绍" class="headerlink" title="结构介绍"></a>结构介绍</h2><p>WebMagic的结构分为Downloader、PageProcessor、Scheduler、Pipeline四大组件，并由Spider将它们彼此组织起来。这四大组件对应爬虫生命周期中的下载、处理、管理和持久化等功能。WebMagic的设计参考了Scapy，但是实现方式更Java化一些。</p><p>Spider则将这几个组件组织起来，让它们可以互相交互，流程化的执行，可以认为Spider是一个大的容器，它也是WebMagic逻辑的核心。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/webMagic_20201203171707.png"></p><h2 id="WebMagic四个组件"><a href="#WebMagic四个组件" class="headerlink" title="WebMagic四个组件"></a>WebMagic四个组件</h2><ol><li><p>Downloader</p><p>Downloader负责从互联网上下载页面，以便后续处理。WebMagic默认使用了Apache HttpClient作为下载工具。</p></li><li><p>PageProcessor</p><p>PageProcessor负责解析页面，抽取有用信息，以及发现新的链接。WebMagic使用Jsoup作为HTML解析工具，并基于其开发了解析XPath的工具Xsoup。</p><p>在这四个组件中，PageProcessor对于每个站点每个页面都不一样，是需要使用者定制的部分。</p></li><li><p>Scheduler</p><p>Scheduler负责管理待抓取的URL，以及一些去重的工作。WebMagic默认提供了JDK的内存队列来管理URL，并用集合来进行去重。也支持使用Redis进行分布式管理。</p></li><li><p>Pipeline</p><p>Pipeline负责抽取结果的处理，包括计算、持久化到文件、数据库等。WebMagic默认提供了“输出到控制台”和“保存到文件”两种结果处理方案。</p><p>Pipeline定义了结果保存的方式，如果你要保存到指定数据库，则需要编写对应的Pipeline。对于一类需求一般只需编写一个Pipeline。</p></li></ol><h2 id="用于数据流转的对象"><a href="#用于数据流转的对象" class="headerlink" title="用于数据流转的对象"></a>用于数据流转的对象</h2><ol><li><p>Request</p><p>Request是对URL地址的一层封装，一个Request对应一个URL地址。</p><p>它是PageProcessor与Downloader交互的载体，也是PageProcessor控制Downloader唯一方式。</p><p>除了URL本身外，它还包含一个Key-Value结构的字段extra。你可以在extra中保存一些特殊的属性，然后在其他地方读取，以完成不同的功能。例如附加上一个页面的一些信息等。</p></li><li><p>Page</p><p>Page代表了从Downloader下载到的一个页面——可能是HTML，也可能是JSON或者其他文本格式的内容。</p><p>Page是WebMagic抽取过程的核心对象，它提供一些方法可供抽取、结果保存等。</p></li><li><p>ResultItems</p><p>ResultItems相当于一个Map，它保存PageProcessor处理的结果，供Pipeline使用。它的API与Map很类似，值得注意的是它有一个字段skip，若设置为true，则不应被Pipeline处理。</p></li></ol><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><ol><li><p>GitHub拉取WebMagic文件，地址<a href="https://github.com/code4craft/webmagic">https://github.com/code4craft/webmagic</a></p></li><li><p>找到webmagic-core，利用mvn安装到本地仓库。</p></li><li><p>添加常规maven坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- https://mvnrepository.com/artifact/us.codecraft/webmagic-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/us.codecraft/webmagic-extension --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--WebMagic对布隆过滤器的支持--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><font color=red><em>注：博主这里使用得是spring boot+springdatajpa，为什么要在GitHub拉去核心代码，因为现版本对SSL处理不完全，对在爬取只支持SSL v1.2的网站会有SSL的异常抛出。</em></font></p><p><font color=red>解决方案：</font></p><ol><li><p><font color=red>等作者的0.7.4的版本发布</font></p></li><li><p><font color=red>直接从github上下载最新的代码，安装到本地仓库</font></p></li></ol><p><font color=red>这是开发这自己得解决方法</font>：<a href="https://github.com/code4craft/webmagic/issues/701">https://github.com/code4craft/webmagic/issues/701</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>WebMagic使用slf4j-log4j12作为slf4j的实现。</p><h3 id="添加log4j-properties配置文件"><a href="#添加log4j-properties配置文件" class="headerlink" title="添加log4j.properties配置文件"></a>添加log4j.properties配置文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,A1 </span><br><span class="line">log4j.appender.A1=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.A1.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.A1.layout.ConversionPattern=%-d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c]-[%p] %m%n</span><br></pre></td></tr></table></figure><h3 id="添加application-properties配置文件"><a href="#添加application-properties配置文件" class="headerlink" title="添加application.properties配置文件"></a>添加application.properties配置文件</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#DB Configuration:</span><br><span class="line">spring.datasource.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1:3306/crawler</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line"></span><br><span class="line">#JPA Configuration:</span><br><span class="line">spring.jpa.database=MySQL</span><br><span class="line">spring.jpa.show-sql=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `job_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键id&#x27;,</span><br><span class="line">  `company_name` varchar(100) DEFAULT NULL COMMENT &#x27;公司名称&#x27;,</span><br><span class="line">  `company_addr` varchar(200) DEFAULT NULL COMMENT &#x27;公司联系方式&#x27;,</span><br><span class="line">  `company_info` text COMMENT &#x27;公司信息&#x27;,</span><br><span class="line">  `job_name` varchar(100) DEFAULT NULL COMMENT &#x27;职位名称&#x27;,</span><br><span class="line">  `job_addr` varchar(50) DEFAULT NULL COMMENT &#x27;工作地点&#x27;,</span><br><span class="line">  `job_info` text COMMENT &#x27;职位信息&#x27;,</span><br><span class="line">  `salary_min` int(10) DEFAULT NULL COMMENT &#x27;薪资范围，最小&#x27;,</span><br><span class="line">  `salary_max` int(10) DEFAULT NULL COMMENT &#x27;薪资范围，最大&#x27;,</span><br><span class="line">  `url` varchar(150) DEFAULT NULL COMMENT &#x27;招聘信息详情页&#x27;,</span><br><span class="line">  `time` varchar(10) DEFAULT NULL COMMENT &#x27;职位最近发布时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT=&#x27;招聘信息&#x27;;</span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> String companyAddr;</span><br><span class="line">    <span class="keyword">private</span> String companyInfo;</span><br><span class="line">    <span class="keyword">private</span> String jobName;</span><br><span class="line">    <span class="keyword">private</span> String jobAddr;</span><br><span class="line">    <span class="keyword">private</span> String jobInfo;</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMin;</span><br><span class="line">    <span class="keyword">private</span> Integer salaryMax;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line">get/set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobInfoDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">JobInfo</span>, <span class="title">Long</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfo jobInfo)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;JobInfo&gt; <span class="title">findJobInfo</span><span class="params">(JobInfo jobInfo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">JobInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoDao jobInfoDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(JobInfo jobInfo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先从数据库查询数据,根据发布日期查询和url查询</span></span><br><span class="line">        JobInfo param = <span class="keyword">new</span> JobInfo();</span><br><span class="line">        param.setUrl(jobInfo.getUrl());</span><br><span class="line">        param.setTime(jobInfo.getTime());</span><br><span class="line">        List&lt;JobInfo&gt; list = <span class="keyword">this</span>.findJobInfo(param);</span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//没有查询到数据则新增或者修改数据</span></span><br><span class="line">            <span class="keyword">this</span>.jobInfoDao.saveAndFlush(jobInfo); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;JobInfo&gt; <span class="title">findJobInfo</span><span class="params">(JobInfo jobInfo)</span> </span>&#123;</span><br><span class="line">        Example example = Example.of(jobInfo);</span><br><span class="line">        List&lt;JobInfo&gt; list = <span class="keyword">this</span>.jobInfoDao.findAll(example);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataPipline dataPipline;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">&quot;https://search.51job.com/list/010000,000000,0000,00,9,99,python,2,1.html?lang=c&amp;stype=&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;providesalary=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        List&lt;Selectable&gt; list = page.getHtml().css(<span class="string">&quot;div#resultList div.el&quot;</span>).nodes();</span><br><span class="line">        <span class="keyword">if</span> (list.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//详情页</span></span><br><span class="line">            <span class="keyword">this</span>.saveJobInfo(page);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//列表页</span></span><br><span class="line">            <span class="keyword">for</span> (Selectable selectable : list) &#123;</span><br><span class="line">                <span class="comment">//获取url地址</span></span><br><span class="line">                String jobInfoUrl = selectable.links().toString();</span><br><span class="line">                <span class="comment">//把url放入任务队列中</span></span><br><span class="line">                page.addTargetRequest(jobInfoUrl);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取下一页url</span></span><br><span class="line">            String s = page.getHtml().css(<span class="string">&quot;div.p_in li.bk&quot;</span>).nodes().get(<span class="number">1</span>).links().toString();</span><br><span class="line">            <span class="comment">//下一页放入任务队列</span></span><br><span class="line">            page.addTargetRequest(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析招聘详情信息,对数据进行封装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveJobInfo</span><span class="params">(Page page)</span></span>&#123;</span><br><span class="line">        Html html = page.getHtml();</span><br><span class="line">        <span class="keyword">if</span> (html==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JobInfo jobInfo = <span class="keyword">new</span> JobInfo();</span><br><span class="line"></span><br><span class="line">        String companyName = html.css(<span class="string">&quot;div.cn p.cname a&quot;</span>, <span class="string">&quot;text&quot;</span>).toString();</span><br><span class="line">        jobInfo.setCompanyName(companyName);</span><br><span class="line">        String companyInfo = Jsoup.parse(html.css(<span class="string">&quot;div.tmsg&quot;</span>).toString()).text();</span><br><span class="line">        jobInfo.setCompanyInfo(companyInfo);</span><br><span class="line">        String jobName = Jsoup.parse(html.css(<span class="string">&quot;div.cn h1&quot;</span>).toString()).text();</span><br><span class="line">        jobInfo.setJobName(jobName);</span><br><span class="line">        String text = Jsoup.parse(html.css(<span class="string">&quot;p.ltype&quot;</span>).toString()).text();</span><br><span class="line">        String address = text.substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//String jobAddr = Jsoup.parse(html.css(&quot;div.bmsg p.fp&quot;).nodes().get(1).toString()).text();</span></span><br><span class="line">        jobInfo.setJobAddr(address);</span><br><span class="line">        String jobInfos = Jsoup.parse(html.css(<span class="string">&quot;div.job_msg&quot;</span>).toString()).text();</span><br><span class="line">        jobInfo.setJobInfo(jobInfos);</span><br><span class="line">        String salary = html.css(<span class="string">&quot;div.cn strong&quot;</span>, <span class="string">&quot;text&quot;</span>).toString();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(salary))&#123;</span><br><span class="line">            Integer[] texts = MathSalary.getSalary(salary);</span><br><span class="line">            jobInfo.setSalaryMin(texts[<span class="number">0</span>]);</span><br><span class="line">            jobInfo.setSalaryMax(texts[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        String url = page.getUrl().toString();</span><br><span class="line">        jobInfo.setUrl(url);</span><br><span class="line">        String times = Jsoup.parse(html.css(<span class="string">&quot;p.ltype&quot;</span>).toString()).text();</span><br><span class="line">        String[] split = times.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        String time = split[<span class="number">0</span>].substring(split[<span class="number">0</span>].length() - <span class="number">2</span>) +<span class="string">&quot;-&quot;</span>+ split[<span class="number">1</span>].substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        jobInfo.setTime(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存(内存)</span></span><br><span class="line">        page.putField(<span class="string">&quot;jobInfo&quot;</span>,jobInfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me()</span><br><span class="line">            .setCharset(<span class="string">&quot;gbk&quot;</span>)  <span class="comment">//编码</span></span><br><span class="line">            .setTimeOut(<span class="number">20</span>*<span class="number">1000</span>)  <span class="comment">//超时</span></span><br><span class="line">            .setRetryTimes(<span class="number">5</span>)  <span class="comment">//重试次数</span></span><br><span class="line">            .setRetrySleepTime(<span class="number">3000</span>);   <span class="comment">//重试时间间隔</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待一秒后执行  一百秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled(initialDelay = 1000,fixedDelay = 100000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Spider.create(<span class="keyword">new</span> JobProcessor())</span><br><span class="line">                .addUrl(url)</span><br><span class="line">                .setScheduler(<span class="keyword">new</span> QueueScheduler().setDuplicateRemover(<span class="keyword">new</span> BloomFilterDuplicateRemover(<span class="number">100000</span>)))    <span class="comment">//布隆过滤器</span></span><br><span class="line">                .thread(<span class="number">10</span>)    <span class="comment">//10线程爬取</span></span><br><span class="line">                .addPipeline(<span class="keyword">this</span>.dataPipline)  <span class="comment">//添加Pipeline配置</span></span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用和定制Pipline输出"><a href="#使用和定制Pipline输出" class="headerlink" title="使用和定制Pipline输出"></a>使用和定制Pipline输出</h3><p>在WebMagic中，Pileline是抽取结束后，进行处理的部分，它主要用于抽取结果的保存，也可以定制Pileline可以实现一些通用的功能。在这里我们会定制Pipeline实现数据导入到数据库中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ResultItems保存了抽取结果，它是一个Map结构，</span></span><br><span class="line">    <span class="comment">// 在page.putField(key,value)中保存的数据，</span></span><br><span class="line">    <span class="comment">//可以通过ResultItems.get(key)获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(ResultItems resultItems, Task task)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在WebMagic里，一个Spider可以有多个Pipeline，使用Spider.addPipeline()即可增加一个Pipeline。这些Pipeline都会得到处理，例如可以使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spider.addPipeline(<span class="keyword">new</span> ConsolePipeline())</span><br><span class="line">.addPipeline(<span class="keyword">new</span> FilePipeline())</span><br></pre></td></tr></table></figure><p>实现输出结果到控制台，并且保存到文件的目标。</p><table><thead><tr><th>类</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>ConsolePipeline</td><td>输出结果到控制台</td><td>抽取结果需要实现toString方法</td></tr><tr><td>FilePipeline</td><td>保存结果到文件</td><td>抽取结果需要实现toString方法</td></tr><tr><td>JsonFilePipeline</td><td>JSON格式保存结果到文件</td><td></td></tr><tr><td>ConsolePageModelPipeline</td><td>(注解模式)输出结果到控制台</td><td></td></tr><tr><td>FilePageModelPipeline</td><td>(注解模式)保存结果到文件</td><td></td></tr><tr><td>JsonFilePageModelPipeline</td><td>(注解模式)JSON格式保存结果到文件</td><td>想持久化的字段需要有getter方法</td></tr></tbody></table><h3 id="自定义Pipeline导入保存数据"><a href="#自定义Pipeline导入保存数据" class="headerlink" title="自定义Pipeline导入保存数据"></a>自定义Pipeline导入保存数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataPipeline</span> <span class="keyword">implements</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(ResultItems resultItems, Task task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取需要保存到MySQL的数据</span></span><br><span class="line">        JobInfo jobInfo = resultItems.get(<span class="string">&quot;jobInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断获取到的数据不为空</span></span><br><span class="line">        <span class="keyword">if</span>(jobInfo!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果有值则进行保存</span></span><br><span class="line">            <span class="keyword">this</span>.jobInfoService.save(jobInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动启动类"><a href="#启动启动类" class="headerlink" title="启动启动类"></a>启动启动类</h3><p>输出结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/webMagic_20201203171756.png"></p><h1 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h1><p>这里记录了博主学习得一个爬取例子，如果可以，以后直接参考这篇文章即可完成对简单页面得爬取。ok！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
          <category> WebMagic </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> WebMagic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap组件进行表单校验</title>
      <link href="/_post/bootstrap-validator/"/>
      <url>/_post/bootstrap-validator/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主在做项目的时候前段框架使用bootstrap，在进行表单提交是需要对表单数据进行校验，那么如何进行表单校验。</p><h1 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h1><p>校验要用的到组件叫<code>bootstrapvalidator</code>。</p><p>bootstrapvalidator源码： <a href="https://github.com/nghuuphuoc/bootstrapvalidator">https://github.com/nghuuphuoc/bootstrapvalidator</a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="文件引入"><a href="#文件引入" class="headerlink" title="文件引入"></a>文件引入</h2><p>下载后需要引入<code>jquery,bootstrap.min.js,bootstrap.min.css</code>以及<code>bootstrapvalidator</code>相关的js和css。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/Scripts/jquery-1.10.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/Content/bootstrap/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;/Content/bootstrap/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/Content/bootstrapValidator/js/bootstrapValidator.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;/Content/bootstrapValidator/css/bootstrapValidator.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Form表单"><a href="#Form表单" class="headerlink" title="Form表单"></a>Form表单</h2><p>这里举个例子创建一个表单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">　　　　　<span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;formLogin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;username_err&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="comment">&lt;!--这里用来显示错误信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;password_err&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="校验初始化"><a href="#校验初始化" class="headerlink" title="校验初始化"></a>校验初始化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#formLogin&quot;</span>).bootstrapValidator(&#123;</span><br><span class="line">                <span class="attr">excluded</span>:[<span class="string">&quot;:disabled&quot;</span>,<span class="string">&quot;:hidden&quot;</span>], <span class="comment">// 关键配置，表示只对于禁用域不进行验证，其他的表单元素都要验证</span></span><br><span class="line">                <span class="attr">feedbackIcons</span>: &#123;</span><br><span class="line">                    <span class="attr">valid</span>: <span class="string">&#x27;glyphicon glyphicon-ok&#x27;</span>,</span><br><span class="line">                    <span class="attr">invalid</span>: <span class="string">&#x27;glyphicon glyphicon-remove&#x27;</span>,</span><br><span class="line">                    <span class="attr">validating</span>: <span class="string">&#x27;glyphicon glyphicon-refresh&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">fields</span>: &#123;</span><br><span class="line">                    <span class="attr">username</span>: &#123;</span><br><span class="line">                        <span class="attr">container</span>: <span class="string">&quot;#username_err&quot;</span>,<span class="comment">//错误信息显示位置</span></span><br><span class="line">                        <span class="attr">validators</span>: &#123;</span><br><span class="line">                            <span class="attr">notEmpty</span>: &#123;</span><br><span class="line">                                <span class="attr">message</span>: <span class="string">&#x27;不能为空&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">password</span>: &#123;</span><br><span class="line">                        <span class="attr">container</span>: <span class="string">&quot;#password_err&quot;</span>,<span class="comment">//错误信息显示位置</span></span><br><span class="line">                        <span class="attr">validators</span>: &#123;</span><br><span class="line">                            <span class="attr">notEmpty</span>: &#123;</span><br><span class="line">                                <span class="attr">message</span>: <span class="string">&#x27;不能为空&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="js提交校验"><a href="#js提交校验" class="headerlink" title="js提交校验"></a>js提交校验</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bootstrapValidator = $(<span class="string">&quot;#formLogin&quot;</span>).data(<span class="string">&quot;bootstrapValidator&quot;</span>).validate();</span><br><span class="line">    <span class="keyword">if</span> (bootstrapValidator.isValid())&#123;</span><br><span class="line">        <span class="comment">//异步提交</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">                <span class="attr">type</span> : <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">                <span class="attr">url</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span> : $(<span class="string">&quot;#formLogin&quot;</span>).serialize(),</span><br><span class="line">                <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">                    alert(result.rspMsg);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上只是简答的校验表单数据是否为空，如果为空则会在<code>&lt;span&gt;&lt;/span&gt;</code>里面显示错误信息。不为空则提交登录。</p><p>当然bootstrap表单校验并不是只有这么一点能力的，继续看吧。</p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">　　$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;#formLogin&#x27;</span>).bootstrapValidator(&#123;</span><br><span class="line">         <span class="attr">excluded</span>:[<span class="string">&quot;:disabled&quot;</span>,<span class="string">&quot;:hidden&quot;</span>], <span class="comment">// 关键配置，表示只对于禁用域不进行验证，其他的表单元素都要验证</span></span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;This value is not valid&#x27;</span>,</span><br><span class="line">        <span class="attr">feedbackIcons</span>: &#123;</span><br><span class="line">            <span class="attr">valid</span>: <span class="string">&#x27;glyphicon glyphicon-ok&#x27;</span>,</span><br><span class="line">            <span class="attr">invalid</span>: <span class="string">&#x27;glyphicon glyphicon-remove&#x27;</span>,</span><br><span class="line">            <span class="attr">validating</span>: <span class="string">&#x27;glyphicon glyphicon-refresh&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fields</span>: &#123;</span><br><span class="line">            <span class="attr">username</span>: &#123;</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;用户名验证失败&#x27;</span>,</span><br><span class="line">                <span class="attr">validators</span>: &#123;</span><br><span class="line">                    <span class="attr">notEmpty</span>: &#123;</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;用户名不能为空&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">stringLength</span>: &#123;</span><br><span class="line">                        <span class="attr">min</span>: <span class="number">6</span>,</span><br><span class="line">                        <span class="attr">max</span>: <span class="number">18</span>,</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;用户名长度必须在6到18位之间&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">regexp</span>: &#123;</span><br><span class="line">                        <span class="attr">regexp</span>: <span class="regexp">/^[a-zA-Z0-9_]+$/</span>,</span><br><span class="line">                        message: <span class="string">&#x27;用户名只能包含大写、小写、数字和下划线&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">email</span>: &#123;</span><br><span class="line">                <span class="attr">validators</span>: &#123;</span><br><span class="line">                    <span class="attr">notEmpty</span>: &#123;</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;邮箱不能为空&#x27;</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">emailAddress</span>: &#123;</span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;邮箱地址格式有误&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段可以看出，不但能够对数据是否为空进行校验，还能对数据格式进行校验。-</p><ul><li><p>notEmpty：不能为空。</p></li><li><p>emailAddress：邮箱格式</p></li><li><p>regexp：正则表达式</p></li><li><p>stringLength：数据长度</p></li></ul><p>其实还有很多的校验规则，它们都是以JSON格式呈现的。其他常见的校验格式：</p><ul><li>creditCard：身份证</li><li>date：日期</li><li>ip：IP地址</li><li>phone： 电话</li><li>url：url链接</li><li>······</li></ul><p>对于日常开发工作这些已经足够使用了，想要更深了解的可直接参考官方api。</p><p>好啦，这次就说到这里。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> BootStrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目打包部署</title>
      <link href="/_post/SpringBoot-to-jar/"/>
      <url>/_post/SpringBoot-to-jar/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主最近一直在做自己的毕设系统，这个说了好多次了哦。</p><p>到了后期完善阶段，恰巧自己在阿里云领取了半年的服务器，配置还算不错。那么有想法把自己的系统上传到服务器上去。</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>CentOS7</li><li>Xshell</li><li>Xftp</li></ul><h1 id="SpringBoot打包方式"><a href="#SpringBoot打包方式" class="headerlink" title="SpringBoot打包方式"></a>SpringBoot打包方式</h1><p>SpringBoot打包方式有很多种。</p><ul><li>war包</li><li>jar包</li><li>提交github，通t过jekins打包部署</li></ul><p><em><font color=red>注：</font>不推荐SpringBoot项目打war包，因为SpringBoot适合前后端分离，适合打jar包。</em></p><h1 id="打包前进行的操作"><a href="#打包前进行的操作" class="headerlink" title="打包前进行的操作"></a>打包前进行的操作</h1><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><p>相关的工具，类似于数据库，Redis缓存等都需要更换数据源。这里博主贴一下自己的配置文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_1.png" alt="image-20200429135038819"></p><p>一般情况下会在要部署的服务器上安装相应的环境并测试连接成功。</p><h2 id="maven配置文件"><a href="#maven配置文件" class="headerlink" title="maven配置文件"></a>maven配置文件</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_2.png" alt="image-20200429135551050"></p><ol><li>打包的版本只能打1.4.2.RELEASE版本</li><li>没有启动类路径打包后启动报错“找不到主类”</li></ol><h2 id="Application-java"><a href="#Application-java" class="headerlink" title="Application.java"></a>Application.java</h2><p>在启动类加上<code>extends SpringBootServletInitializer</code>并重写<code>configure</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GdApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(GdApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span><span class="comment">//为了打包springboot项目</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.sources(<span class="keyword">this</span>.getClass());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h1><h2 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h2><ol><li><p>按照顺序运行运行mvn clean再mvn install，这里使用IDEA侧边栏maven工具。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_.png"></p></li><li><p>最后成功后只需在项目下的target下找自己的包啦。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_6.png" alt="5548226-d91c19cfebeee328"></p></li><li><p>用XFtp工具将jar包上传至服务器。</p></li><li><p>使用Java命令<code>java -jar smallsystem-0.0.1-SNAPSHOT.jar</code>运行项目。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_3.png" alt="image-20200429141452819"></p></li><li><p>然后去安全组去开放系统需要的端口号。</p></li></ol><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>我们根据IP地址和端口向往常一样访问，发现报<font color=red>404</font>错误。仔细检查打的jar包里面没有包含JSP文件（SpringBoot对JSP打包一般会忽略，建议替换成模板引擎）。还需要在<code>&lt;plugins&gt;</code>的同级目录添加配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个配置是为了让打包的时候把webapp文件一起打包进去。</p><p>重新打包就OK了。</p><blockquote><p>如果出现404的问题,根本原因一定是访问控制层能够进入方法，也能打印日志，是页面没找到。<br>这里我大概看了一下,大概的原因如下:</p><p>1.在SpringBoot项目中,resource并不是根资源目录</p><p>2.就是跳转的地址有问题 也就是说controller中的跳转地址不对!<br>注意注解的是否正确使用。这就是SpringBoot使用JSP的弊端。</p></blockquote><h2 id="war"><a href="#war" class="headerlink" title="war"></a>war</h2><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><ol><li><p>加入配置</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_5.png" alt="image-20200429143531052"></p><p>加个<code>&lt;packaging&gt;war&lt;/packaging&gt;</code>,就OK啦！就这么点区别。</p></li><li><p>war包的打包操作和jar包是一样的参考上边咯。</p></li><li><p>后面的流程操作一致，启动命令一致。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_4.png" alt="image-20200429141452819"></p></li><li><p>启动成功。浏览器访问</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_7.png" alt="image-20200429144326150"></p><p>后台打印日志</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_8.png" alt="image-20200429144422158"></p></li></ol><h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>这样SpringBoot项目就部署成功了。</p><h1 id="另述"><a href="#另述" class="headerlink" title="另述"></a>另述</h1><p>在进行系统操作的时候看Xshell一直有日志打印，这里让他后台运行，日志打印在文件中。</p><ol><li><p>使用命令<code>touch start.sh</code>，创建文件。</p></li><li><p>使用命令<code>vim start.sh</code>，编辑文件。</p></li><li><pre><code class="shell">nohup java -Dfile.encoding=UTF-8 -jar patentmanager-web-1.0.0-SNAPSHOT.jar --server.port=8888 &amp;   #server.port为自己项目的端口号</code></pre></li><li><p>保存并退出，修改文件权限<code>chmod 777 start.sh</code>。</p></li><li><p>运行<code>./start.sh</code>,会生成一个日志文件<code>nohup.out</code>。</p></li><li><p>可以使用cat，tail，less等命令查看日志文件。</p></li><li><p>如果想要中止系统运行就要根据端口号去杀掉进程了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/to_jar_9.png" alt="image-20200429150213092"></p></li></ol><p>好啦，这篇结束啦</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL版本引起的错误</title>
      <link href="/_post/error-about-mysql-version/"/>
      <url>/_post/error-about-mysql-version/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接上一篇帖子，博主在CentOS上安装了最新版的MySQL容器（版本为8.0.19），在使用本地springBoot项目连接，启动项目后操作登录系统时报错。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>请看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect <span class="number">3</span> times. Giving up.</span><br><span class="line">Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure</span><br></pre></td></tr></table></figure><p>这是由于MySQL8.0以上版本的驱动连接与5.0版本有所不同，下面是链接配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/sys_test?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC&amp;zeroDateTimeBehavior=CONVERT_TO_NULL</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><p><font color=red><em>注：serverTimezone=UTC必须存在否则连接不上，没有useSSL=false会在启动时会出现报红，询问是否使用SSL进行连接，但不影响使用，true或false都可以，加上这个参数后就会消失。</em></font></p><p>这里列出驱动的差别：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##版本<span class="number">8.0</span><span class="number">.19</span>驱动</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">##版本<span class="number">5.6</span> 目前项目中用的</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><h1 id="修正结果"><a href="#修正结果" class="headerlink" title="修正结果"></a>修正结果</h1><h2 id="添加maven坐标"><a href="#添加maven坐标" class="headerlink" title="添加maven坐标"></a>添加maven坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用版本驱动"><a href="#使用版本驱动" class="headerlink" title="使用版本驱动"></a>使用版本驱动</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##版本<span class="number">8.0</span><span class="number">.19</span>驱动</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>成功登录</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7安装Docker</title>
      <link href="/_post/CentOS7-install-Docker/"/>
      <url>/_post/CentOS7-install-Docker/</url>
      
        <content type="html"><![CDATA[<p>用到的工具</p><ul><li>XShell</li><li>CentOS 7</li></ul><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a> 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h2 id="Docker支持以下的64位CentOS版本："><a href="#Docker支持以下的64位CentOS版本：" class="headerlink" title="Docker支持以下的64位CentOS版本："></a>Docker支持以下的64位CentOS版本：</h2><ul><li>CentOS7</li><li>CentOS8</li><li>更高版本…</li></ul><h1 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h1><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><h2 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h2><h3 id="使用-Docker-仓库进行安装"><a href="#使用-Docker-仓库进行安装" class="headerlink" title="使用 Docker 仓库进行安装"></a>使用 Docker 仓库进行安装</h3><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p><strong>设置仓库</strong></p><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><p>使用以下命令来设置稳定的仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-Engine-Community-1"><a href="#安装-Docker-Engine-Community-1" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>如果提示您接受 GPG 密钥，请选是。</p><p>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。</p><p><em>注：如果需要安装指定版本则需要执行<code>yum list docker-ce --showduplicates | sort -r</code>列出版本，默认版本号（从高到低）对结果进行排序。</em></p><p><em>然后执行<code>sudo yum install docker-ce-&lt;版本号&gt; docker-ce-cli-&lt;版本号&gt; containerd.io</code>，例如：<code>docker-ce-18.09.1</code>。</em></p><h3 id="启动-Docker服务。"><a href="#启动-Docker服务。" class="headerlink" title="启动 Docker服务。"></a>启动 Docker服务。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="Docker容器信息"><a href="#Docker容器信息" class="headerlink" title="Docker容器信息"></a>Docker容器信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看docker容器版本</span></span></span><br><span class="line">docker version</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看docker容器信息</span></span></span><br><span class="line">docker info</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看docker容器帮助</span></span></span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure><h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><h3 id="镜像查看"><a href="#镜像查看" class="headerlink" title="镜像查看"></a>镜像查看</h3><p><font color=red>提示：对于镜像的操作可使用镜像名、镜像长ID和短ID。</font></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#列出本地images</span></span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="镜像搜索"><a href="#镜像搜索" class="headerlink" title="镜像搜索"></a>镜像搜索</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#搜索仓库MySQL镜像</span></span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># --filter=stars=600：只显示 starts&gt;=600 的镜像</span></span></span><br><span class="line">docker search --filter=stars=600 mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># --no-trunc 显示镜像完整 DESCRIPTION 描述</span></span></span><br><span class="line">docker search --no-trunc mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># --automated ：只列出 AUTOMATED=OK 的镜像</span></span></span><br><span class="line">docker search  --automated mysql</span><br></pre></td></tr></table></figure><h3 id="镜像下载"><a href="#镜像下载" class="headerlink" title="镜像下载"></a>镜像下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#下载Redis官方最新镜像，相当于：docker pull redis:latest</span></span></span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#下载仓库所有Redis镜像</span></span></span><br><span class="line">docker pull -a mysql</span><br></pre></td></tr></table></figure><h3 id="镜像删除"><a href="#镜像删除" class="headerlink" title="镜像删除"></a>镜像删除</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#单个镜像删除，相当于：docker rmi mysql:latest</span></span></span><br><span class="line">docker rmi mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#强制删除(针对基于镜像有运行的容器进程)</span></span></span><br><span class="line">docker rmi -f mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#多个镜像删除，不同镜像间以空格间隔</span></span></span><br><span class="line">docker rmi -f mysql tomcat nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#删除本地全部镜像</span></span></span><br><span class="line">docker rmi -f $(docker images -q)</span><br></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#新建并启动容器，参数：-i  以交互模式运行容器；-t  为容器重新分配一个伪输入终端；--name  为容器指定一个名称</span></span></span><br><span class="line">docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#后台启动容器，参数：-d  已守护方式启动容器</span></span></span><br><span class="line">docker run -d mycentos</span><br></pre></td></tr></table></figure><ul><li><strong>-p 3306:3306</strong> ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 <strong>宿主机ip:3306</strong> 访问到 MySQL 的服务。</li><li><strong>MYSQL_ROOT_PASSWORD=root</strong>：设置 MySQL 服务 root 用户的密码。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动一个或多个已经被停止的容器</span></span></span><br><span class="line">docker start redis</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启容器</span></span></span><br><span class="line">docker restart redis</span><br></pre></td></tr></table></figure><h3 id="进入容器和退出"><a href="#进入容器和退出" class="headerlink" title="进入容器和退出"></a>进入容器和退出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使用run方式在创建时进入</span></span></span><br><span class="line">docker run -it mysql /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入运行的容器内部</span></span></span><br><span class="line">docker exec -it mysql bash</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#关闭容器并退出</span></span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看正在运行的容器</span></span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看正在运行的容器的ID</span></span></span><br><span class="line">docker ps -q</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看正在运行+历史运行过的容器</span></span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#显示运行容器总文件大小</span></span></span><br><span class="line">docker ps -s</span><br></pre></td></tr></table></figure><h1 id="另述"><a href="#另述" class="headerlink" title="另述"></a>另述</h1><p>博主在这里记录了在CentOS下如何安装Docker,还记录了一般常用的Docker命令，在命令中顺带解释了如何去安装MySQL镜像等操作。其他的镜像安装也是大同小异，不同的大多就是端口号映射罢了。好了，这篇就截稿啦。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java如何调用本地扬声器</title>
      <link href="/_post/java-invoke-speaker/"/>
      <url>/_post/java-invoke-speaker/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主的毕设系统在做一个餐厅的点餐管理系统，在记性移动端页面开发的时候突发奇想做一个呼叫服务员，扬声器发声的一个功能类似于：“<font color=red><strong>工作人员请注意，桌号8001顾客正在寻求帮助！</strong></font>”。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>接下来就对这个小功能进行分析和实现。先写一个Demo。</p><ol><li><p>首先，我们需要一个dll作为辅助。这里解释一下dll的含义（<em>DLL(Dynamic Link Library)文件为<a href="https://www.baidu.com/s?wd=%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E6%96%87%E4%BB%B6&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao">动态链接库文件</a>，又称“应用百程序拓展”，是软件文件类型。在Windows中，许多应用程序并不是一个度完整的可执行文件，它们被分割成一些相知对独立的动态链接库，即DLL文件，放置于道系统中。当我们执行某一个程序时，相应的版DLL文件就会被调用。一个应用程序可使用权多个DLL文件，一个DLL文件也可能被不同的应用程序使用，这样的DLL文件被称为共享DLL文件</em>）。</p><p>需要把<code>jacob-1.17-M2-x64.dll</code>复制到<code>C:\Windows\System32\</code>目录下。我们也能看到目录下有很多的<code>.dll</code>文件。</p><p>这里的文件大家自己百度下，很好找的。</p></li><li><p>使用maven项目导入坐标。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.sf.jacob-project/jacob --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.jacob-project<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacob<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试类代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文字转语音测试 jdk bin文件中需要导入jacob-1.17-M2-x64.dll</span></span><br><span class="line"><span class="comment"> * 注意导包哈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020年2月25日 上午10:05:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jacobtest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        textToSpeech(<span class="string">&quot;工作人员请注意，桌号8001顾客正在寻求帮助！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 语音转文字并播放</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">textToSpeech</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        ActiveXComponent ax = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ax = <span class="keyword">new</span> ActiveXComponent(<span class="string">&quot;Sapi.SpVoice&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 运行时输出语音内容</span></span><br><span class="line">            Dispatch spVoice = ax.getObject();</span><br><span class="line">            <span class="comment">// 音量 0-100</span></span><br><span class="line">            ax.setProperty(<span class="string">&quot;Volume&quot;</span>, <span class="keyword">new</span> Variant(<span class="number">100</span>));</span><br><span class="line">            <span class="comment">// 语音朗读速度 -10 到 +10</span></span><br><span class="line">            ax.setProperty(<span class="string">&quot;Rate&quot;</span>, <span class="keyword">new</span> Variant(<span class="number">0</span>));</span><br><span class="line">            <span class="comment">// 执行朗读</span></span><br><span class="line">            Dispatch.call(spVoice, <span class="string">&quot;Speak&quot;</span>, <span class="keyword">new</span> Variant(text));</span><br><span class="line"></span><br><span class="line">           <span class="comment">/* // 下面是构建文件流把生成语音文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            ax = new ActiveXComponent(&quot;Sapi.SpFileStream&quot;);</span></span><br><span class="line"><span class="comment">            Dispatch spFileStream = ax.getObject();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            ax = new ActiveXComponent(&quot;Sapi.SpAudioFormat&quot;);</span></span><br><span class="line"><span class="comment">            Dispatch spAudioFormat = ax.getObject();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            // 设置音频流格式</span></span><br><span class="line"><span class="comment">            Dispatch.put(spAudioFormat, &quot;Type&quot;, new Variant(22));</span></span><br><span class="line"><span class="comment">            // 设置文件输出流格式</span></span><br><span class="line"><span class="comment">            Dispatch.putRef(spFileStream, &quot;Format&quot;, spAudioFormat);</span></span><br><span class="line"><span class="comment">            // 调用输出 文件流打开方法，创建一个.wav文件</span></span><br><span class="line"><span class="comment">            Dispatch.call(spFileStream, &quot;Open&quot;, new Variant(&quot;./text.wav&quot;), new Variant(3), new Variant(true));</span></span><br><span class="line"><span class="comment">            // 设置声音对象的音频输出流为输出文件对象</span></span><br><span class="line"><span class="comment">            Dispatch.putRef(spVoice, &quot;AudioOutputStream&quot;, spFileStream);</span></span><br><span class="line"><span class="comment">            // 设置音量 0到100</span></span><br><span class="line"><span class="comment">            Dispatch.put(spVoice, &quot;Volume&quot;, new Variant(100));</span></span><br><span class="line"><span class="comment">            // 设置朗读速度</span></span><br><span class="line"><span class="comment">            Dispatch.put(spVoice, &quot;Rate&quot;, new Variant(-2));</span></span><br><span class="line"><span class="comment">            // 开始朗读</span></span><br><span class="line"><span class="comment">            Dispatch.call(spVoice, &quot;Speak&quot;, new Variant(text));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            // 关闭输出文件</span></span><br><span class="line"><span class="comment">            Dispatch.call(spFileStream, &quot;Close&quot;);</span></span><br><span class="line"><span class="comment">            Dispatch.putRef(spVoice, &quot;AudioOutputStream&quot;, null);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            spAudioFormat.safeRelease();</span></span><br><span class="line"><span class="comment">            spFileStream.safeRelease();*/</span></span><br><span class="line">            spVoice.safeRelease();</span><br><span class="line">            ax.safeRelease();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从测试类可以看出，这个方法既可以发声还能输出后缀为<code>.wav</code>的文件，这是一个标准的多媒体文件。上述代码注释很清晰，就不解释了，自己看哈。</p></li><li><p>测试成功，现在集成到自己的项目中。</p></li></ol><h2 id="另述"><a href="#另述" class="headerlink" title="另述"></a>另述</h2><p>这里说到了调用扬声器发声，不放还可以想一下如何调用麦克风收音。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EngineeCore</span> </span>&#123;</span><br><span class="line">    String filePath = <span class="string">&quot;E:\\voice\\voice_cache.wav&quot;</span>;</span><br><span class="line">    AudioFormat audioFormat;</span><br><span class="line">    TargetDataLine targetDataLine;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopRecognize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        targetDataLine.stop();</span><br><span class="line">        targetDataLine.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> AudioFormat <span class="title">getAudioFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sampleRate = <span class="number">16000</span>;</span><br><span class="line">        <span class="comment">// 8000,11025,16000,22050,44100</span></span><br><span class="line">        <span class="keyword">int</span> sampleSizeInBits = <span class="number">16</span>;</span><br><span class="line">        <span class="comment">// 8,16</span></span><br><span class="line">        <span class="keyword">int</span> channels = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 1,2</span></span><br><span class="line">        <span class="keyword">boolean</span> signed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// true,false</span></span><br><span class="line">        <span class="keyword">boolean</span> bigEndian = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// true,false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);</span><br><span class="line">    &#125;<span class="comment">// end getAudioFormat</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startRecognize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得指定的音频格式</span></span><br><span class="line">            audioFormat = getAudioFormat();</span><br><span class="line">            DataLine.Info dataLineInfo = <span class="keyword">new</span> DataLine.Info(TargetDataLine.class, audioFormat);</span><br><span class="line">            targetDataLine = (TargetDataLine) AudioSystem.getLine(dataLineInfo);</span><br><span class="line">            <span class="comment">// Create a thread to capture the microphone</span></span><br><span class="line">            <span class="comment">// data into an audio file and start the</span></span><br><span class="line">            <span class="comment">// thread running. It will run until the</span></span><br><span class="line">            <span class="comment">// Stop button is clicked. This method</span></span><br><span class="line">            <span class="comment">// will return after starting the thread.</span></span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">new</span> CaptureThread().start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="comment">// end catch</span></span><br><span class="line">    &#125;<span class="comment">// end captureAudio method</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CaptureThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            AudioFileFormat.Type fileType = <span class="keyword">null</span>;</span><br><span class="line">            File audioFile = <span class="keyword">new</span> File(filePath);</span><br><span class="line"></span><br><span class="line">            fileType = AudioFileFormat.Type.WAVE;</span><br><span class="line">            <span class="comment">//声音录入的权值</span></span><br><span class="line">            <span class="keyword">int</span> weight = <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//判断是否停止的计数</span></span><br><span class="line">            <span class="keyword">int</span> downSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">null</span>;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            AudioInputStream ais = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                targetDataLine.open(audioFormat);</span><br><span class="line">                targetDataLine.start();</span><br><span class="line">                <span class="keyword">byte</span>[] fragment = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">                ais = <span class="keyword">new</span> AudioInputStream(targetDataLine);</span><br><span class="line">                <span class="keyword">while</span> (flag) &#123;</span><br><span class="line"></span><br><span class="line">                    targetDataLine.read(fragment, <span class="number">0</span>, fragment.length);</span><br><span class="line">                    <span class="comment">//当数组末位大于weight时开始存储字节（有声音传入），一旦开始不再需要判断末位</span></span><br><span class="line">                    <span class="keyword">if</span> (Math.abs(fragment[fragment.length-<span class="number">1</span>]) &gt; weight || baos.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        baos.write(fragment);</span><br><span class="line">                        System.out.println(<span class="string">&quot;守卫：&quot;</span>+fragment[<span class="number">0</span>]+<span class="string">&quot;,末尾：&quot;</span>+fragment[fragment.length-<span class="number">1</span>]+<span class="string">&quot;,lenght&quot;</span>+fragment.length);</span><br><span class="line">                        <span class="comment">//判断语音是否停止</span></span><br><span class="line">                        <span class="keyword">if</span>(Math.abs(fragment[fragment.length-<span class="number">1</span>])&lt;=weight)&#123;</span><br><span class="line">                            downSum++;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;重置奇数&quot;</span>);</span><br><span class="line">                            downSum=<span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">　　　　　　　　　　　　　　　<span class="comment">//计数超过20说明此段时间没有声音传入(值也可更改)</span></span><br><span class="line">                        <span class="keyword">if</span>(downSum&gt;<span class="number">20</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;停止录入&quot;</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//取得录音输入流</span></span><br><span class="line">                audioFormat = getAudioFormat();</span><br><span class="line">                <span class="keyword">byte</span> audioData[] = baos.toByteArray();</span><br><span class="line">                bais = <span class="keyword">new</span> ByteArrayInputStream(audioData);</span><br><span class="line">                ais = <span class="keyword">new</span> AudioInputStream(bais, audioFormat, audioData.length / audioFormat.getFrameSize());</span><br><span class="line">                <span class="comment">//定义最终保存的文件名</span></span><br><span class="line">                System.out.println(<span class="string">&quot;开始生成语音文件&quot;</span>);</span><br><span class="line">                AudioSystem.write(ais, AudioFileFormat.Type.WAVE, audioFile);</span><br><span class="line">                downSum = <span class="number">0</span>;</span><br><span class="line">                stopRecognize();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//关闭流</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ais.close();</span><br><span class="line">                    bais.close();</span><br><span class="line">                    baos.reset();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">// end run</span></span><br><span class="line">    &#125;<span class="comment">// end inner class CaptureThread</span></span><br></pre></td></tr></table></figure><p>这个测试没测试，偷个懒找的“哈哈”。</p><p>还有一点是Java操作语音文件<code>.wav</code>先不要研究了 :laugh and cry:，这里涉及到了语音识别，但是有百度那么些api，有兴趣的试试吧！</p><p>好了，在这里就结束了</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>博主把自己的毕设项目打包放到自己的服务器上，这个扬声器出现了新的问题。</p><blockquote><p>本来所有的基础都是在本地运行的，通过调用本地dll文件实现扬声器发声，现在部署到centOS上将会失去这个dll的支持，目前所存在的问题是如何不使用dll文件实现这个功能，中间借助了<code>.wav</code>后缀的音视频文件。</p><ul><li>如何在Linux上生成<code>.wav</code>的文件。</li><li>如何获取这个文件并输出。(解释一下，用餐顾客点击手机网页的菜单，然后再餐厅的主机来播放这个声音)</li><li>如何在输出主机不进行任何操作就能播放这个声音或者能够恢复之前的工作状态。</li></ul></blockquote><p><font color=red>现在的临时解决办法是本地跑一个呼叫服务的接口，当需要这个功能的时候远程服务器调用本地跑的接口，进而实现餐厅主机发声。</font></p><p><font color=red>这个和上面描述的并无差别，不一样的是存在了两台主机的调用（当然两台主机都应该链接网络，能够互相通信）</font></p><p>先写到这了，当有解决办法的时候再更新吧！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java对Mysql数据库时间格式处理</title>
      <link href="/_post/mysql-date-deal/"/>
      <url>/_post/mysql-date-deal/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>本帖对于项目中的数据库的时间进行处理。</p><h1 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h1><p>博主在做一个列表的时候从MongoDB中查出来的数据包含有时间格式，在MongoDB数据库中的存放形式为<code>2017-10-24 05:18:54.000Z</code>,而对于使用Java查询是String接受的值为<code>Tue Oct 24 13:18:54 CST 2017</code>。</p><p>本来的做法是使用第三方工具类<code>hutool-all</code>的<code>DateUtil</code>进行转换。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据格式转换</span></span><br><span class="line">List&lt;AuthLogEntity&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (AuthLogEntity authLogEntity: list) &#123;   <span class="comment">//list为mongo查询的数据集合</span></span><br><span class="line">Date createTime = DateUtil.parse(authLogEntity.getCreateTime());</span><br><span class="line">authLogEntity.setCreateTime(DateUtil.formatDateTime(createTime));</span><br><span class="line">Date lastUpdateTime = DateUtil.parse(authLogEntity.getLastUpdateTime());</span><br><span class="line">authLogEntity.setLastUpdateTime(DateUtil.formatDateTime(lastUpdateTime));</span><br><span class="line">resultList.add(authLogEntity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red>但是</font>,突然被告知不能使用第三方类进行转换，得，换一种方法，直接使用<code>java.text.SimpleDateFormat</code>进行转换，下面贴代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String createTime = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;EEE MMM dd HH:mm:ss z yyyy&quot;</span>, Locale.US);</span><br><span class="line">Date date = sdf.parse(authLogEntity.getCreateTime());</span><br><span class="line">SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">createTime = simpleDateFormat.format(date);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">authLogEntity.setCreateTime(createTime);</span><br></pre></td></tr></table></figure><p>转换过来集合中存放的值为<code>2017-10-24 13:18:54</code>，很明显是所需要的格式。</p><p><em>注：想到为什么这里不让用第三方工具类，项目中用的jdk是1.7，而第三方类是时刻更新的，有可能会不兼容，或者报错而导致项目起不起来。</em></p><h1 id="另述："><a href="#另述：" class="headerlink" title="另述："></a>另述：</h1><p>其实，关于时间的格式化处理有好多办法，除了上述两种办法，这里再记录下其他常用的。</p><ol><li><p>首先引入Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在实体类属性中的getter方法添加注解<code>@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</code>，查询到的时间会自动转换。</p></li><li><p>使用<code>DateUtil</code>转换，这个还是比较常用的一种，下面贴代码（可以直接复制使用）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期工具类，注意导包import和package</span></span><br><span class="line"><span class="comment"> * StringUtils，DateUtils是Maven依赖commons-lang3的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">/** 年-月-日 时:分:秒 显示格式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DATE_TO_STRING_DETAIAL_PATTERN = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line"><span class="comment">/** 年-月-日 显示格式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DATE_TO_STRING_SHORT_PATTERN = <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line"><span class="comment">/** 年-月 显示格式 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DATE_TO_STRING_MONTH_PATTERN = <span class="string">&quot;yyyy-MM&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat simpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">currentDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">new</span> Date();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">currentFormatDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(DATE_TO_STRING_DETAIAL_PATTERN);</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * date转化为String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToString</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(DATE_TO_STRING_DETAIAL_PATTERN);</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.format(date);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * date转化为String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToShortString</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(DATE_TO_STRING_SHORT_PATTERN);</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.format(date);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">addMinuteToDate</span><span class="params">(<span class="keyword">int</span> minute)</span></span>&#123;</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.add(Calendar.MINUTE, minute);</span><br><span class="line">Date date = calendar.getTime();</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按照指定格式格式化时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToStringByPattern</span><span class="params">(Date date, String pattern)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isBlank(pattern))&#123;</span><br><span class="line">pattern = DATE_TO_STRING_DETAIAL_PATTERN;</span><br><span class="line">&#125;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.format(date);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给指定的日期增加分钟，为空时默认当前时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minute 增加分钟  正数相加、负数相减</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addMinuteToDateStr</span><span class="params">(<span class="keyword">int</span> minute)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dateToString(addMinuteToDate(minute));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">addDayToDate</span><span class="params">(<span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.add(Calendar.DATE, day);</span><br><span class="line">calendar.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.SECOND,<span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.MINUTE,<span class="number">0</span>);</span><br><span class="line">Date date = calendar.getTime();</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addDayToDateStr</span><span class="params">(<span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dateToString(addDayToDate(day));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getWeekMonday</span><span class="params">()</span></span>&#123;</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.set(GregorianCalendar.DAY_OF_WEEK,GregorianCalendar.MONDAY);</span><br><span class="line">calendar.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.SECOND,<span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.MINUTE,<span class="number">0</span>);</span><br><span class="line">Date date = calendar.getTime();</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getWeekMondayStr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dateToString(getWeekMonday());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">addWeekToDate</span><span class="params">(<span class="keyword">int</span> week)</span></span>&#123;</span><br><span class="line">Date date= DateUtils.addWeeks(getWeekMonday(),week);</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">addWeekToDateStr</span><span class="params">(<span class="keyword">int</span> week)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dateToString(addWeekToDate(week));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间往后推n天的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getNextDay</span><span class="params">(Date date, <span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">calendar.setTime(date);</span><br><span class="line">calendar.add(Calendar.DATE,day);<span class="comment">//把日期往后增加一天.整数往后推,负数往前移动</span></span><br><span class="line">date = calendar.getTime(); <span class="comment">//这个时间就是日期往后推一天的结果</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String转化为Date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">stringToDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(DATE_TO_STRING_DETAIAL_PATTERN);</span><br><span class="line">Date dateFormat = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dateFormat = simpleDateFormat.parse(date);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dateFormat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String转化为Date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">stringToShortDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(DATE_TO_STRING_SHORT_PATTERN);</span><br><span class="line">Date dateFormat = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">dateFormat = simpleDateFormat.parse(date);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dateFormat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取月第一天</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> month 增加月数  正数相加、负数相减</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">addMonthToDate</span><span class="params">(<span class="keyword">int</span> month)</span></span>&#123;</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.add(Calendar.MONTH, month);</span><br><span class="line">calendar.set(Calendar.DAY_OF_MONTH,<span class="number">1</span>);</span><br><span class="line">calendar.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.SECOND,<span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.MINUTE,<span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">Date date = calendar.getTime();</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取月第一天</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">addMonthToDate</span><span class="params">(String date, <span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(DATE_TO_STRING_MONTH_PATTERN);</span><br><span class="line">Date monthDate = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">monthDate = simpleDateFormat.parse(date);</span><br><span class="line">Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">calendar.setTime(monthDate);</span><br><span class="line">calendar.add(Calendar.MONTH,day);<span class="comment">//把日期往后增加一天.整数往后推,负数往前移动</span></span><br><span class="line">monthDate = calendar.getTime(); <span class="comment">//这个时间就是日期往后推一天的结果</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> monthDate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间往后推n天的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> day</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">addDayToDate</span><span class="params">(Date date, <span class="keyword">int</span> day)</span></span>&#123;</span><br><span class="line">Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">calendar.setTime(date);</span><br><span class="line">calendar.set(Calendar.HOUR_OF_DAY, <span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.SECOND,<span class="number">0</span>);</span><br><span class="line">calendar.set(Calendar.MINUTE,<span class="number">0</span>);</span><br><span class="line">calendar.add(Calendar.DATE,day);</span><br><span class="line">date = calendar.getTime();</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * date转化为String yyyy-MM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToStringMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(DATE_TO_STRING_MONTH_PATTERN);</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.format(date);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * yyyy-MM-dd 转时间戳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dateStr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">strToTimestamp</span><span class="params">(String dateStr)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(DATE_TO_STRING_SHORT_PATTERN);</span><br><span class="line">Long timestamp = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Date date = format.parse(dateStr);</span><br><span class="line">timestamp = date.getTime();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> timestamp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">currentFormatDate</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line"><span class="keyword">return</span> simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串转日期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dateStr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">strToDate</span><span class="params">(String dateStr,String pattern)</span></span>&#123;</span><br><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">Date date = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">date = sdf.parse(dateStr);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">logger.error(<span class="string">&quot;时间转换异常：&#123;&#125;&quot;</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定月的开始日期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentDate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getStartDate</span><span class="params">(String currentDate)</span></span>&#123;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">c.setTime(sdf.parse(currentDate));</span><br><span class="line">c.add(Calendar.MONTH, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置为1号,当前日期既为本月第一天</span></span><br><span class="line">c.set(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定月的结束日期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentDate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getEndDate</span><span class="params">(String currentDate)</span></span>&#123;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">c.setTime(sdf.parse(currentDate));</span><br><span class="line">c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">c.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">c.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">c.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定月的开始日期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentDate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getStartDate</span><span class="params">(String currentDate,String pattern)</span></span>&#123;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">c.setTime(sdf.parse(currentDate));</span><br><span class="line">c.add(Calendar.MONTH, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//设置为1号,当前日期既为本月第一天</span></span><br><span class="line">c.set(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定月的结束日期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentDate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getEndDate</span><span class="params">(String currentDate,String pattern)</span></span>&#123;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(pattern);</span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">c.setTime(sdf.parse(currentDate));</span><br><span class="line">c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">c.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">c.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">c.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.getTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个工具类基本可以完成大部分的时间格式的处理。</p></li></ol><p>好了，本帖就说到这里。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现浏览器下载功能</title>
      <link href="/_post/BrowserToDownload/"/>
      <url>/_post/BrowserToDownload/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>最近有给分配一个任务，实现一个下载功能，前提是当在指定的目录下去查找固定名字的文件，如果存在则直接读取文件流在返回给浏览器，如果没有才去执行数据库去查，然后备份并输出到浏览器进行下载.</p><p>就这其中一个简单的功能，下面对这个部分进行实现。</p><h3 id="JSP页面："><a href="#JSP页面：" class="headerlink" title="JSP页面："></a>JSP页面：</h3><h4 id="JSP代码"><a href="#JSP代码" class="headerlink" title="JSP代码:"></a>JSP代码:</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;page.list != null &amp;&amp; fn:length(page.list) &gt; 0&#125;&quot;</span>&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;run&quot;</span> items=<span class="string">&quot;$&#123;page.list&#125;&quot;</span> varStatus=<span class="string">&quot;st&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td style=<span class="string">&quot;text-align: center&quot;</span>&gt;$&#123;run.between&#125;&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">&quot;text-align: center&quot;</span>&gt;$&#123;run.typeNo&#125;&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">&quot;text-align: center&quot;</span>&gt;$&#123;run.status&#125;&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">&quot;text-align: center&quot;</span>&gt;$&#123;run.recall&#125;&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">&quot;text-align: center&quot;</span>&gt;$&#123;run.precision&#125;&lt;/td&gt;</span><br><span class="line">&lt;td style=<span class="string">&quot;text-align: center&quot;</span>&gt;$&#123;run.kind&#125;&lt;/td&gt;</span><br><span class="line">&lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;td-manage&quot;</span> style=<span class="string">&quot;text-align: center&quot;</span>&gt;</span><br><span class="line">&lt;a title=<span class="string">&quot;下载&quot;</span> href=<span class="string">&quot;/CategoryTestRunData/downLoad?id=$&#123;run.id&#125;&quot;</span>&gt;</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;layui-icon layui-icon-download-circle&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="说明：在测试的时候发现下载这里如果写Ajax异步请求下载话这个是无法请求的，所以这里写直链。"><a href="#说明：在测试的时候发现下载这里如果写Ajax异步请求下载话这个是无法请求的，所以这里写直链。" class="headerlink" title="说明：在测试的时候发现下载这里如果写Ajax异步请求下载话这个是无法请求的，所以这里写直链。"></a><em>说明：</em><font color=red>在测试的时候发现下载这里如果写Ajax异步请求下载话这个是无法请求的，所以这里写直链。</font></h4><h3 id="控制器："><a href="#控制器：" class="headerlink" title="控制器："></a>控制器：</h3><h4 id="控制层代码："><a href="#控制层代码：" class="headerlink" title="控制层代码："></a>控制层代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Excel表下载导出</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/downLoad&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downLoad</span><span class="params">(String id, HttpServletResponse response, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;Excel表下载导出，传入参数：&quot;</span>+id);</span><br><span class="line">       <span class="comment">//目标路径</span></span><br><span class="line">       String dist = <span class="string">&quot;/data/download/&quot;</span>;</span><br><span class="line">       <span class="comment">//String dist = &quot;F:/operate/download/&quot;;</span></span><br><span class="line">       File fileList = <span class="keyword">new</span> File(dist);</span><br><span class="line">       <span class="keyword">if</span> (!fileList.exists())&#123;</span><br><span class="line">           fileList.mkdirs();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断是否存在ID为名的文件</span></span><br><span class="line">       String[] list = fileList.list();</span><br><span class="line">       <span class="keyword">boolean</span> isExist = <span class="keyword">true</span>;  <span class="comment">//默认该文件存在标志</span></span><br><span class="line">       <span class="keyword">for</span> (String name_id : list) &#123;</span><br><span class="line">           String sub_name = StringUtils.substring(name_id,<span class="number">0</span>,name_id.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">           <span class="keyword">if</span> (StringUtils.equals(sub_name,id))&#123;</span><br><span class="line">               <span class="comment">//存在预下载文件</span></span><br><span class="line">               <span class="comment">//获取输入流输出到浏览器</span></span><br><span class="line">               FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(dist+name_id);</span><br><span class="line">               OutputStream outputStream = response.getOutputStream();</span><br><span class="line">               <span class="comment">//设置Http响应头告诉浏览器下载这个附件,下载的文件名也是在这里设置的</span></span><br><span class="line">               <span class="comment">//获得浏览器代理信息</span></span><br><span class="line">               <span class="keyword">final</span> String userAgent = request.getHeader(<span class="string">&quot;USER-AGENT&quot;</span>);</span><br><span class="line">               <span class="comment">//判断浏览器代理并分别设置响应给浏览器的编码格式</span></span><br><span class="line">               String finalFileName = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">if</span>(StringUtils.contains(userAgent, <span class="string">&quot;MSIE&quot;</span>)||StringUtils.contains(userAgent,<span class="string">&quot;Trident&quot;</span>))&#123;<span class="comment">//IE浏览器</span></span><br><span class="line">                   finalFileName = URLEncoder.encode(name_id,<span class="string">&quot;UTF8&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;IE浏览器&quot;</span>);</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span>(StringUtils.contains(userAgent, <span class="string">&quot;Mozilla&quot;</span>))&#123;<span class="comment">//google,火狐浏览器</span></span><br><span class="line">                   finalFileName = <span class="keyword">new</span> String(name_id.getBytes(), <span class="string">&quot;ISO8859-1&quot;</span>);</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   finalFileName = URLEncoder.encode(name_id,<span class="string">&quot;UTF8&quot;</span>);<span class="comment">//其他浏览器</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//设置HTTP响应头</span></span><br><span class="line">               response.reset();<span class="comment">//重置 响应头</span></span><br><span class="line">               response.setContentType(<span class="string">&quot;application/x-download&quot;</span>);<span class="comment">//告知浏览器下载文件，而不是直接打开，浏览器默认为打开</span></span><br><span class="line">               response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span> ,<span class="string">&quot;attachment;filename=&quot;</span> +finalFileName+ <span class="string">&quot;&quot;</span>);<span class="comment">//下载文件的名称</span></span><br><span class="line">               <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">               <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">while</span> ((len = fileInputStream.read(bytes))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                   outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">               &#125;</span><br><span class="line">               fileInputStream.close();</span><br><span class="line">               outputStream.close();</span><br><span class="line">               <span class="keyword">return</span> ;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       isExist = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">if</span> (!isExist)&#123;</span><br><span class="line">           <span class="keyword">try</span>&#123;</span><br><span class="line">               <span class="comment">//输出写入到服务器备份</span></span><br><span class="line">               ExcelWriter writer = ExcelUtil.getWriter(dist+id+<span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line"></span><br><span class="line">               List&lt;RecordDown&gt; recordList = categoryTestRunDataService.getDownLoadList(Long.parseLong(id));</span><br><span class="line">               log.info(<span class="string">&quot;返回数据：&quot;</span>+JSON.toJSONString(recordList));</span><br><span class="line">               <span class="keyword">if</span> (recordList.size() == <span class="number">0</span>)&#123;</span><br><span class="line">               &#125;</span><br><span class="line">               writer.addHeaderAlias(<span class="string">&quot;mercNum&quot;</span>,<span class="string">&quot;商户编号&quot;</span>);</span><br><span class="line">               writer.addHeaderAlias(<span class="string">&quot;triggerTime&quot;</span>,<span class="string">&quot;风险类别触发时间&quot;</span>);</span><br><span class="line">               writer.addHeaderAlias(<span class="string">&quot;isRisk&quot;</span>,<span class="string">&quot;是否风险商户&quot;</span>);</span><br><span class="line">               writer.addHeaderAlias(<span class="string">&quot;kind&quot;</span>,<span class="string">&quot;对应风险种类&quot;</span>);</span><br><span class="line">               writer.addHeaderAlias(<span class="string">&quot;createHisTime&quot;</span>,<span class="string">&quot;商户入网时间&quot;</span>);</span><br><span class="line">               writer.addHeaderAlias(<span class="string">&quot;region&quot;</span>,<span class="string">&quot;商户所属地区&quot;</span>);</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">                   writer.setColumnWidth(i,<span class="number">35</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 一次性写出内容，使用默认样式，强制输出标题</span></span><br><span class="line">               writer.write(recordList, <span class="keyword">true</span>);</span><br><span class="line">               <span class="comment">// 关闭writer，释放内存</span></span><br><span class="line">               writer.close();</span><br><span class="line"></span><br><span class="line">               <span class="comment">//写入到浏览器</span></span><br><span class="line">               ExcelWriter writerToBrowser = ExcelUtil.getWriter(<span class="keyword">true</span>);</span><br><span class="line">               writerToBrowser.write(recordList, <span class="keyword">true</span>);</span><br><span class="line">               OutputStream outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="comment">//获得浏览器代理信息</span></span><br><span class="line">               <span class="keyword">final</span> String userAgent = request.getHeader(<span class="string">&quot;USER-AGENT&quot;</span>);</span><br><span class="line">               <span class="comment">//判断浏览器代理并分别设置响应给浏览器的编码格式</span></span><br><span class="line">               String finalFileName = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">if</span>(StringUtils.contains(userAgent, <span class="string">&quot;MSIE&quot;</span>)||StringUtils.contains(userAgent,<span class="string">&quot;Trident&quot;</span>))&#123;<span class="comment">//IE浏览器</span></span><br><span class="line">                   finalFileName = URLEncoder.encode(id+<span class="string">&quot;.xlsx&quot;</span>,<span class="string">&quot;UTF8&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;IE浏览器&quot;</span>);</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span>(StringUtils.contains(userAgent, <span class="string">&quot;Mozilla&quot;</span>))&#123;<span class="comment">//google,火狐浏览器</span></span><br><span class="line">                   String fileName= id+<span class="string">&quot;.xlsx&quot;</span>;</span><br><span class="line">                   finalFileName = <span class="keyword">new</span> String(fileName.getBytes(), <span class="string">&quot;ISO8859-1&quot;</span>);</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   finalFileName = URLEncoder.encode(id+<span class="string">&quot;.xlsx&quot;</span>,<span class="string">&quot;UTF8&quot;</span>);<span class="comment">//其他浏览器</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//设置HTTP响应头</span></span><br><span class="line">               response.reset();<span class="comment">//重置 响应头</span></span><br><span class="line">               response.setContentType(<span class="string">&quot;application/x-download&quot;</span>);<span class="comment">//告知浏览器下载文件，而不是直接打开，浏览器默认为打开</span></span><br><span class="line">               response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span> ,<span class="string">&quot;attachment;filename=&quot;</span> +finalFileName+ <span class="string">&quot;&quot;</span>);<span class="comment">//下载文件的名称</span></span><br><span class="line">               writerToBrowser.flush(outputStream, <span class="keyword">true</span>);</span><br><span class="line">               writerToBrowser.close();</span><br><span class="line">               IoUtil.close(outputStream);</span><br><span class="line">           &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               log.info(<span class="string">&quot;错误信息:&quot;</span>+e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="说明：项目实现逻辑"><a href="#说明：项目实现逻辑" class="headerlink" title="说明：项目实现逻辑"></a><em>说明：</em><font color=green>项目实现逻辑</font></h4><ol><li><p>先去指定路径查找，是否有指定目录，是否有以ID为名的文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标路径</span></span><br><span class="line">        String dist = <span class="string">&quot;/data/download/&quot;</span>;</span><br><span class="line">        <span class="comment">//String dist = &quot;F:/operate/download/&quot;;</span></span><br><span class="line">        File fileList = <span class="keyword">new</span> File(dist);</span><br><span class="line">        <span class="keyword">if</span> (!fileList.exists())&#123;</span><br><span class="line">            fileList.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否存在ID为名的文件</span></span><br><span class="line">        String[] list = fileList.list();</span><br><span class="line">        <span class="keyword">boolean</span> isExist = <span class="keyword">true</span>;  <span class="comment">//默认该文件存在标志</span></span><br><span class="line">        <span class="keyword">for</span> (String name_id : list) &#123;</span><br><span class="line">            String sub_name = StringUtils.substring(name_id,<span class="number">0</span>,name_id.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            <span class="comment">//这里对循环拿到的文件名和目标文件名匹配</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equals(sub_name,id))&#123;</span><br><span class="line">                <span class="comment">//这里对匹配到的文件读取并输出到浏览器</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果存在以ID为名的文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存在预下载文件</span></span><br><span class="line">            <span class="comment">//获取输入流输出到浏览器</span></span><br><span class="line">            FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(dist+name_id);</span><br><span class="line">            OutputStream outputStream = response.getOutputStream();</span><br><span class="line">            <span class="comment">//设置Http响应头告诉浏览器下载这个附件,下载的文件名也是在这里设置的</span></span><br><span class="line">            <span class="comment">//获得浏览器代理信息</span></span><br><span class="line">            <span class="keyword">final</span> String userAgent = request.getHeader(<span class="string">&quot;USER-AGENT&quot;</span>);</span><br><span class="line">            <span class="comment">//判断浏览器代理并分别设置响应给浏览器的编码格式,部分浏览器编码格式不同，这里的操作防止下载是防止文件名乱码</span></span><br><span class="line">            String finalFileName = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(StringUtils.contains(userAgent, <span class="string">&quot;MSIE&quot;</span>)||StringUtils.contains(userAgent,<span class="string">&quot;Trident&quot;</span>))&#123;<span class="comment">//IE浏览器</span></span><br><span class="line">                finalFileName = URLEncoder.encode(name_id,<span class="string">&quot;UTF8&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;IE浏览器&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(StringUtils.contains(userAgent, <span class="string">&quot;Mozilla&quot;</span>))&#123;<span class="comment">//google,火狐浏览器</span></span><br><span class="line">                finalFileName = <span class="keyword">new</span> String(name_id.getBytes(), <span class="string">&quot;ISO8859-1&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                finalFileName = URLEncoder.encode(name_id,<span class="string">&quot;UTF8&quot;</span>);<span class="comment">//其他浏览器</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置HTTP响应头</span></span><br><span class="line">            response.reset();<span class="comment">//重置 响应头</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/x-download&quot;</span>);<span class="comment">//告知浏览器下载文件，而不是直接打开，浏览器默认为打开</span></span><br><span class="line">            response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span> ,<span class="string">&quot;attachment;filename=&quot;</span> +finalFileName);<span class="comment">//下载文件的名称</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = fileInputStream.read(bytes))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//写入到输出流</span></span><br><span class="line">                outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="keyword">return</span> ;</span><br></pre></td></tr></table></figure></li><li><p>当指定文件目录没有目标文件名时去查询相关数据，进行指定路径备份。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出写入到服务器备份</span></span><br><span class="line">ExcelWriter writer = ExcelUtil.getWriter(dist+id+<span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line"><span class="comment">//数据库查询结果</span></span><br><span class="line">List&lt;RecordDown&gt; recordList = categoryTestRunDataService.getDownLoadList(Long.parseLong(id));</span><br><span class="line">log.info(<span class="string">&quot;返回数据：&quot;</span>+JSON.toJSONString(recordList));</span><br><span class="line"><span class="keyword">if</span> (recordList.size() == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//id下没有数据集合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一个参数是实体类属性，第二个参数是Excel对应的属性注释</span></span><br><span class="line">writer.addHeaderAlias(<span class="string">&quot;me**Num&quot;</span>,<span class="string">&quot;商**号&quot;</span>);</span><br><span class="line">writer.addHeaderAlias(<span class="string">&quot;tr**rTime&quot;</span>,<span class="string">&quot;风险****时间&quot;</span>);</span><br><span class="line">writer.addHeaderAlias(<span class="string">&quot;is**sk&quot;</span>,<span class="string">&quot;是否**商户&quot;</span>);</span><br><span class="line">writer.addHeaderAlias(<span class="string">&quot;k**d&quot;</span>,<span class="string">&quot;对应**种类&quot;</span>);</span><br><span class="line">writer.addHeaderAlias(<span class="string">&quot;cre****sTime&quot;</span>,<span class="string">&quot;商户**时间&quot;</span>);</span><br><span class="line">writer.addHeaderAlias(<span class="string">&quot;re**on&quot;</span>,<span class="string">&quot;商户**地区&quot;</span>);</span><br><span class="line"><span class="comment">//设置列的宽度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">writer.setColumnWidth(i,<span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一次性写出内容，使用默认样式，强制输出标题</span></span><br><span class="line">writer.write(recordList, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 关闭writer，释放内存</span></span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure></li><li><p>备份完成后再将输出到浏览器，具体代码和上方（2.如果存在以ID为名的文件。）的逻辑相同。这里不再赘述。</p></li><li><p>下载结果。</p><p>| 商号 | 风险时间 | 是否商户 | 对应种类 | 商户时间 | 商户地区 |<br>| ——: | ————————-: | ————: | ————: | ————————-: | ————: |<br>| 123 | 2020-04-10 11:31:32 | 是 | ** | 2020-04-10 11:31:32 | 商户 |</p></li></ol><h4 id="补充：一般情况下，我们在进行下载功能的时候需要告诉浏览器他的类型。"><a href="#补充：一般情况下，我们在进行下载功能的时候需要告诉浏览器他的类型。" class="headerlink" title="补充：一般情况下，我们在进行下载功能的时候需要告诉浏览器他的类型。"></a><em>补充：</em>一般情况下，我们在进行下载功能的时候需要告诉浏览器他的类型。</h4><p><code>response.setContentType(&quot;application/x-download&quot;)</code></p><p>是文件而不是页面，设置浏览器自带下载功能添加文件名。</p><p><code>response.addHeader(&quot;Content-Disposition&quot; ,&quot;attachment;filename=&quot; +finalFileName+ &quot;&quot;)</code></p><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><p>实现浏览器下载可以有两种方式：</p><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;toauctionExcelAction&quot;</span><span class="attr">class</span>=<span class="string">&quot;theauctionaction&quot;</span><span class="attr">method</span>=<span class="string">&quot;Excel Theauctioninfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span><span class="attr">type</span>=<span class="string">&quot;stream&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;contentType&quot;</span>&gt;</span>application/vnd.ms-excel；charset=UTF-8<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;contentoisposition&quot;</span>&gt;</span>attachment；filename=&quot;$&#123;auctionName&#125;&quot;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;inputName&quot;</span>&gt;</span>excelTheauctioninfo<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    从这个配置可以看出来这个是Struts2里面的写法，Struts2每一个方法都会有一个action作为配置信息，这样子使得配置文件更为方法和繁琐。</p><h5 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置HTTP响应头</span></span><br><span class="line">response.reset();<span class="comment">//重置 响应头</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/x-download&quot;</span>);<span class="comment">//告知浏览器下载文件，而不是直接打开，浏览器默认为打开</span></span><br><span class="line">response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span> ,<span class="string">&quot;attachment;filename=&quot;</span> +finalFileName);<span class="comment">//下载文件的名称</span></span><br></pre></td></tr></table></figure><p>​    直接在控制层中传入参数<code>HttpServletResponse response</code>利用<code>response</code>设置头信息和文件类型下载，这样做的好处是只对这一个方法有效，不会对其他请求造成影响。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合</title>
      <link href="/_post/SpringBoot-integration/"/>
      <url>/_post/SpringBoot-integration/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>来自：SimpleWu</strong></p><p><strong>链接：<a href="https://www.cnblogs.com/SimpleWu/p/9798146.html">https://www.cnblogs.com/SimpleWu/p/9798146.html</a></strong></p></blockquote><h1 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h1><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者。</p><p>Spring Boot让我们的Spring应用变的更轻量化。比如：你可以仅仅依靠一个Java类来运行一个Spring引用。你也可以打包你的应用为jar并通过使用java -jar来运行你的Spring Web应用。</p><p>Spring Boot的主要优点：</p><ul><li>为所有Spring开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><p>在下面的代码中只要有一定基础会发现这写代码实例非常简单对于开发者来说几乎是“零配置”。</p><h1 id="SpringBoot运行"><a href="#SpringBoot运行" class="headerlink" title="SpringBoot运行"></a>SpringBoot运行</h1><p>开发工具：jdk8，IDEA,STS，eclipse（需要安装STS插件）这些都支持快速启动SpringBoot工程。我这里就不快速启动了，使用maven工程。学习任何一项技术首先就要精通HelloWord，那我们来跑个初体验。</p><p>首先只用maven我们创建的maven工程直接以jar包的形式创建就行了，首先我们来引入SpringBoot的依赖</p><p>首先我们需要依赖SpringBoot父工程，这是每个项目中必须要有的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入SpringBoot父依赖--&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">2.0</span><span class="number">.5</span>.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; </span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;!--编码与JAVA版本--&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-<span class="number">8</span>&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-<span class="number">8</span>&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;<span class="number">1.8</span>&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>我们启动WEB模块当然必须要引入WEB模块的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;!--引入SpringBoot-WEB模块--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>我们需要编写一个SpringBoot启动类，SpringbootFirstExperienceApplication.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootFirstExperienceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootFirstExperienceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到了这里我们直接把他当成SpringMVC来使用就行了，不过这里默认是不支持JSP官方推荐使用模板引擎，后面会写到整合JSP。这里我就不写Controller了。</p><p>@SpringBootApplication：之前用户使用的是3个注解注解他们的main类。分别是@Configuration,@EnableAutoConfiguration,@ComponentScan。由于这些注解一般都是一起使用，spring boot提供了一个统一的注解@SpringBootApplication。</p><blockquote><p>注意事项：我们使用这个注解在不指定扫描路径的情况下，SpringBoot只能扫描到和SpringbootFirstExperienceApplication同包或子包的Bean</p></blockquote><h1 id="SpringBoot目录结构"><a href="#SpringBoot目录结构" class="headerlink" title="SpringBoot目录结构"></a>SpringBoot目录结构</h1><p>在src/main/resources中我们可以有几个文件夹：</p><ul><li><strong>templates：</strong>用来存储模板引擎的，Thymeleaf，FreeMarker，Velocity等都是不错的选择。</li><li><strong>static：</strong>存储一些静态资源，css,js等</li><li><strong>public：</strong>在默认SpringBoot工程中是不生成这个文件夹的，但是在自动配置中我们可以有这个文件夹用来存放公共的资源（html等）</li><li><strong>application.properties：</strong>这个文件名字是固定的，SpringBoot启动会默认加载这些配置在这里面可以配置端口号，访问路径，数据库连接信息等等。这个文件非常重要，当然官方中推出了一个yml格式这是非常强大的数据格式。</li></ul><h1 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h1><h2 id="整合JdbcTemplate"><a href="#整合JdbcTemplate" class="headerlink" title="整合JdbcTemplate"></a>整合JdbcTemplate</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;<span class="number">1.5</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/parent&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;!--引入WEB模块--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">        &lt;!--引入JDBC模块--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">        &lt;!--引入数据库驱动--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>配置application.properties，虽然说是“零配置”但是这些必要的肯定要指定，否则它怎么知道连那个数据库？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/你的表名</span><br><span class="line">spring.datasource.username=用户名</span><br><span class="line">spring.datasource.password=密码</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insert</span><span class="params">(String name,String email,String gender)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = employeeService.saveEmp(name, email, gender);</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveEmp</span><span class="params">(String name,String email,String gender)</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into tal_employee values(null,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> result = jdbcTemplate.update(sql, name,email,gender);</span><br><span class="line">        System.out.println(<span class="string">&quot;result : &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result &gt; <span class="number">0</span> ? <span class="keyword">true</span>:<span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们直接返回一个文本格式。</p><h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>在上面的代码中我们使用到这个注解修改我们的Controller类而是不使用@Controller这个注解，其实中包含了@Controller，同时包含@ResponseBody既然修饰在类上面那么就是表示这个类中所有的方法都是@ResponseBody所以在这里我们返回字符串在前台我们会以文本格式展示，如果是对象那么它会自动转换成json格式返回。</p><h2 id="整合JSP"><a href="#整合JSP" class="headerlink" title="整合JSP"></a>整合JSP</h2><p>在创建整合JSP的时候指定要选WAR，一定要选WAR。</p><p>引入依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.5</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- SpringBoot WEB组件 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- 整合JSP依赖 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>然后我们只需要配置试图解析器路径就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#配置试图解析器前缀</span><br><span class="line">spring.mvc.view.prefix=/WEB-INF/views/</span><br><span class="line">#配置试图解析器后缀</span><br><span class="line">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure><h2 id="整合JPA"><a href="#整合JPA" class="headerlink" title="整合JPA"></a>整合JPA</h2><p>同样的整合JPA我们只需要启动我们SpringBoot已经集成好的模块即可。</p><p>添加依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.5.2.RELEASE&lt;/version&gt;</span><br><span class="line">   &lt;/parent&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--启动JPA组件--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>启动JPA组件后直接配置数据库连接信息就可以使用JPA功能。</p><p>Application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>实体类：Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table(name=&quot;tal_employee&quot;)</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@Column(name=&quot;last_Name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//get set 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeDao接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeController.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/emps&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getEmployees</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = employeeDao.findAll();</span><br><span class="line">        System.out.println(employees);</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><p>引入依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.5</span><span class="number">.2</span>.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--引入对JDBC的支持--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">         &lt;!--引入对logging的支持--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- SpringBoot MyBatis启动器 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>配置application.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/mybatis</span></span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</span><br><span class="line">##############datasource classpath 数据连接池地址##############</span><br><span class="line">#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>使用xml作为持久层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#指定我们的mapper.xml位置</span><br><span class="line">mybatis.mapper-locations=classpath:com/simple/springboot/mybatis/dao/mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">#entity.class 指定我们实体类所在包位置</span></span><br><span class="line"><span class="comment">mybatis.type-aliases-package=com.simple.springboot.mybatis.entity</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用注解作为持久层,这里体现两种方式：一个为注解里面直接写SQL，一个为独立的SQL类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryTestRunDataMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SelectProvider(type = CategoryTestRunDataSql.class,method = &quot;getList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CategoryTestRunData&gt; <span class="title">getList</span><span class="params">(CategoryTestRunDataParam param)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT count(id) from 表名 &quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getListCount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryTestRunDataSql</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *获取类别试跑数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getList</span><span class="params">(CategoryTestRunDataParam param)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;传入参数：&quot;</span>+ JSON.toJSONString(param));</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;select `id`, `typeNo`, `kind`, `totalMercs`, `triggerMercs`, `status`, `createTime`, `endTime`, `remark` &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot; from `表名` &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot; where 1=1 &quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot; order by createTime desc limit #&#123;beginLine&#125;,#&#123;pageSize&#125; &quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;sql：&quot;</span>+sb.toString());</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h1><p>SpringBoot已经集成好一个调度功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务调度，每隔5秒执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 1000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;现在时间：&quot;</span> + dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动的时候我们必须要在主函数类上加上注解：@EnableScheduling（翻译过来就是开启调度）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot使用任务调度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@EnableScheduling</span>标注程序开启任务调度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合邮件发送"><a href="#整合邮件发送" class="headerlink" title="整合邮件发送"></a>整合邮件发送</h2><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Copy<span class="comment">&lt;!--启动邮箱发送依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置Properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Copy#根据类型配置</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="meta">spring.mail.port</span>=<span class="string">465</span></span><br><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">450255266@qq.com</span></span><br><span class="line"><span class="comment">#对于qq邮箱而言 密码指的就是发送方的授权码</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">看不见我-0-</span></span><br><span class="line"><span class="meta">spring.mail.protocol</span>=<span class="string">smtp</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.auth</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.mail.default-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment">#是否用启用加密传送的协议验证项</span></span><br><span class="line"><span class="comment">#注意：在spring.mail.password处的值是需要在邮箱设置里面生成的授权码，这个不是真实的密码。</span></span><br></pre></td></tr></table></figure><p>spring.mail.host 需要根据不同的邮箱类型配置不同的服务器地址<br>发送邮箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SimpleWu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019=05-17</span></span><br><span class="line"><span class="comment"> * 发送邮件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MimeMessage message = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            message = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">            helper.setFrom(<span class="string">&quot;450255266@qq.com&quot;</span>);</span><br><span class="line">            helper.setTo(<span class="string">&quot;450255266@qq.com&quot;</span>);</span><br><span class="line">            helper.setSubject(<span class="string">&quot;标题：发送Html内容&quot;</span>);</span><br><span class="line"></span><br><span class="line">            StringBuffer context = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            context.append(<span class="string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">            context.append(<span class="string">&quot;Hello SpringBoot Email Start SimpleWu!!&quot;</span>);</span><br><span class="line">            context.append(<span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">            helper.setText(context.toString(),<span class="keyword">true</span>);<span class="comment">//设置true发送html邮件</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//带附件</span></span><br><span class="line">            <span class="comment">//FileSystemResource fileSystemResource=new FileSystemResource(new File(&quot;D:\2019-05-07.pdf&quot;));</span></span><br><span class="line">            <span class="comment">//helper.addAttachment(&quot;邮箱附件&quot;,fileSystemResource);</span></span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：最好使用异步接口发送邮件，并且发送邮件的服务器为单独部署。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新设备如何使用hexo博客</title>
      <link href="/_post/how-to-use-hexo-about-newer/"/>
      <url>/_post/how-to-use-hexo-about-newer/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道，使用 Github+hexo 搭建一个个人博客确实需要花不少时间的，我们搭好博客后使用的挺好，但是换一个电脑如何维护我们的博客呢？我们怎么使用 hexo 再发布文章到个人博客呢？</p><p>如果我们还是按照之间我们总结的教程再次搭建一个博客，然后修改代码更换 hexo 主题等，各种配置特别繁琐，那么有没有一种方便的方法，直接使用我们之前搭建好的博客的源文件呢？</p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h2 id="一、安装必要软件"><a href="#一、安装必要软件" class="headerlink" title="一、安装必要软件"></a>一、安装必要软件</h2><p>安装 Git 客户端</p><p>安装 node JS</p><h2 id="二、在-github-官网添加新电脑产生的密钥"><a href="#二、在-github-官网添加新电脑产生的密钥" class="headerlink" title="二、在 github 官网添加新电脑产生的密钥"></a>二、在 github 官网添加新电脑产生的密钥</h2><p>这个后面解释</p><h2 id="三、源文件拷贝"><a href="#三、源文件拷贝" class="headerlink" title="三、源文件拷贝"></a>三、源文件拷贝</h2><ol><li><p>我们将个人博客的资源文件克隆到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git <span class="built_in">clone</span> <span class="built_in">source</span> github或者gitee地址</span></span><br></pre></td></tr></table></figure><p>我这里去克隆了我的github分支，没有创建分支和上传的可以从原先电脑中将资源文件拷贝过来。</p><p>在新设备上安装node JS后修改全局安装和缓存的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里修改成nodeJS目录</span></span><br><span class="line">npm config set prefix &quot;E:\nodejs&quot;  --nodejs会自动寻找该路径下的   node_modules文件夹为实际存放全局模块的路径，这也是为啥叫prefix不叫global的原因；以   后安装的全局模块都会被放到D:\Program Files\nodejs\node_modules下，跟npm模块在   一个文件夹中</span><br><span class="line">npm config set cache&quot;E:\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>修改后执行查看命令<code>npm config ls</code>查看修改结果</p></li><li><p>修改npm源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>输入<code>cnpm -v</code> ，检测是否正常。</p><p>如果这里报错，添加系统变量path的内容。</p><p>因为cnpm会被安装到D:\Program Files\nodejs\node_global下，而系统变量path并未包含该路径。在系统变量path下添加该路径即可正常使用cnpm。</p></li></ol><h2 id="四、安装-hexo"><a href="#四、安装-hexo" class="headerlink" title="四、安装 hexo"></a>四、安装 hexo</h2><p>打开博客的目录，在根目录右键打开git bash命令行，在 命令行 输入下面指令安装 hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save//文章部署到 git 的模块</span><br><span class="line">（下面为选择安装）</span><br><span class="line">npm install hexo-generator-feed --save//建立 RSS 订阅</span><br><span class="line">npm install hexo-generator-sitemap --save//建立站点地图</span><br></pre></td></tr></table></figure><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h2><p>这时候使用 <code>hexo s</code> 基本可以看到你新添加的文章了。</p><h3 id="六、部署发布文章"><a href="#六、部署发布文章" class="headerlink" title="六、部署发布文章"></a>六、部署发布文章</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   // 清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g       // 生成静态网页</span><br><span class="line">hexo d       // 开始部署</span><br></pre></td></tr></table></figure><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="1-在本地使用命令hexo-s后浏览器访问127-0-0-1-4000显示无法获取-的问题。"><a href="#1-在本地使用命令hexo-s后浏览器访问127-0-0-1-4000显示无法获取-的问题。" class="headerlink" title="1.在本地使用命令hexo s后浏览器访问127.0.0.1:4000显示无法获取/的问题。"></a>1.在本地使用命令<code>hexo s</code>后浏览器访问127.0.0.1:4000显示<code>无法获取/</code>的问题。</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>​    这是因为生成的静态页面没有生成index.html文件，我们查看npm安装hexo各个插件的情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls --depth 0</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/hexo_20201203200638.png"></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>​    我们需要逐一安装hexo需要的插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm install hexo-generator-archive --save</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>​    安装完重新构建即可。</p><h3 id="2-本地测试完成后hexo-d推送到远端服务器失败的问题。"><a href="#2-本地测试完成后hexo-d推送到远端服务器失败的问题。" class="headerlink" title="2.本地测试完成后hexo d推送到远端服务器失败的问题。"></a>2.本地测试完成后<code>hexo d</code>推送到远端服务器失败的问题。</h3><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>​    远端服务器需要识别git推送的个人信息，由<code>name</code>和<code>email</code>组成,我们需要配置本地git的信息。</p><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email “email&quot;</span><br></pre></td></tr></table></figure><p>​    生成SSH Key。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>​    会在本地生成一个<code>.ssh</code>的文件夹，打开公钥并复制。然后去github在设置里面添加即可。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot映射虚拟图片路径</title>
      <link href="/_post/Map-virtual-path/"/>
      <url>/_post/Map-virtual-path/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        我的毕设项目中涉及到了多媒体表单提交，以我本来的想法是希望把上传的图片文件存在我的项目中，数据库中只需要存在一个独一无二的图片名字，这样就不会因为项目的移动而需要修改图片的实际路径。</p><p>​        当我完成信息修改的方法是发现我所上传的图片并没有显示出来。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/path_20201203194027.png"></p><p>​        这个问题想了很久，我的图片路径是对的，图片名字也是对的，查看源代码也是404，但是当我去复制已经在项目中存在图片到数据库确是可以在页面出来，百思不得其解。偶然间得到了灵感，突然看到我项目中的图片数量和本地磁盘中的图片数量不一致，恍然大悟，原本项目中有自己复制的图片，经过编译后是存在与class中的，后期项目启动时上传的图片上传到项目的源代码项目中，很明显时无法拿到的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/path_20201203194110.png">    <img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/path_20201203194137.png"></p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>​        1.我在项目中properties配置文件中指定了本地磁盘的项目图片路径，通过配置映射项目中图片路径。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/path_20201203194233.png"></p><p>​        2.通过配置类指定映射图片路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhouli.gd.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.servlet.multipart.location&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String storageRootFolder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.servlet.asset.virtual.path&#125;&quot;)</span></span><br><span class="line">    String virtualPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 配置图片等资源虚拟路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(virtualPath).addResourceLocations(<span class="string">&quot;file:&quot;</span> + storageRootFolder);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        3.按照原来的想法数据库中只存放图片名，通过访问修改页面。。。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/path_20201203194251.png"></p><h1 id="尾言："><a href="#尾言：" class="headerlink" title="尾言："></a>尾言：</h1><p><em>这是第一次以Springboot+Mybatis架构做一个毕业设计，原先一直是SSM+eclipse做的项目练手，此前配置图片的映射路径只需要在tomcat中配置。</em></p><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name=<span class="string">&quot;localhost&quot;</span>  appBase=<span class="string">&quot;webapps&quot;</span> unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;Valve className=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> directory=<span class="string">&quot;logs&quot;</span></span><br><span class="line">           prefix=<span class="string">&quot;localhost_access_log.&quot;</span> suffix=<span class="string">&quot;.txt&quot;</span></span><br><span class="line">           pattern=<span class="string">&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot;</span> /&gt;</span><br><span class="line">&lt;!-- 设置图片虚拟路径[访问时路径为/photo] --&gt;  </span><br><span class="line">&lt;Context path=<span class="string">&quot;/photo&quot;</span> docBase=<span class="string">&quot;D:\upFiles&quot;</span> reloadable=<span class="string">&quot;true&quot;</span> /&gt; </span><br><span class="line"></span><br><span class="line">&lt;!-- 也可以这样设置图片虚拟路径 --&gt;  </span><br><span class="line">&lt;Host name=<span class="string">&quot;10.0.0.123&quot;</span> appBase=<span class="string">&quot;webapps&quot;</span>  </span><br><span class="line">        unpackWARs=<span class="string">&quot;true&quot;</span> autoDeploy=<span class="string">&quot;true&quot;</span> </span><br><span class="line"> xmlValidation=<span class="string">&quot;false&quot;</span> xmlNamespaceAware=<span class="string">&quot;false&quot;</span>&gt; </span><br><span class="line"> &lt;Context path=<span class="string">&quot;&quot;</span> docBase=<span class="string">&quot;F:\temp&quot;</span> reloadable=<span class="string">&quot;false&quot;</span> &gt;&lt;/Context&gt;  &lt;/Host&gt;</span><br></pre></td></tr></table></figure><p>方法二：</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/path_20201203194321.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置自定义域名</title>
      <link href="/_post/custom-domain-yuming/"/>
      <url>/_post/custom-domain-yuming/</url>
      
        <content type="html"><![CDATA[<p>1、在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，如xxxx.com，注意前面没有http://，也没有www，然后使用hexo g&amp;&amp;hexo d上传部署。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/custom_yuming_20201203195845.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/custom_yuming_20201203195950.png"></p><p>2、以阿里云为例<br>（1）先添加一个CNAME，主机记录写@，后面记录值写上你的xxxx.github.io</p><p>（2）再添加一个CNAME，主机记录写www，后面记录值也是xxxx.github.io这样别人用www和不用www都能访问你的网站（其实www的方式，会先解析成xxxx.github.io，然后根据CNAME再变成xxx.com，即中间是经过一次转换的）。</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/custom_yuming_20201203200050.png"></p><p>上面，我们用的是CNAME别名记录，也有人使用A记录，后面的记录值是写github page里面的ip地址，但有时候IP地址会更改，导致最后解析不正确，所以还是推荐用CNAME别名记录要好些，不建议用IP。<br>3、等十分钟左右，刷新浏览器，用你自己域名访问下试试</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/custom_yuming_20201203200118.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-api</title>
      <link href="/_post/git-api/"/>
      <url>/_post/git-api/</url>
      
        <content type="html"><![CDATA[<p>本帖会将git的使用方法以思维导图的方式呈现，目的在于更清晰的运用和操作git！</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/lemon_ant/figure_bed/raw/master/img/git-api_20201203174214.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
